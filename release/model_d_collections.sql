use change_me;
!echo ------------------------;
!echo ------------------------ journal_CarerTimeOffSummaryJournalEntry;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_journal_journal_carertimeoffsummaryjournalentry
;

CREATE EXTERNAL TABLE src_core_journal_journal_carertimeoffsummaryjournalentry(
`journalEntryProperties` STRUCT<`timeOffCircumstancesSummary`:STRUCT<`endDate`:STRING
,`startDate`:STRING>
,`whoYouCareForCircumstancesSummary`:STRUCT<`addressNumber`:STRING
,`dateOfBirth`:STRING
,`firstName`:STRING
,`lastName`:STRING
,`middleName`:STRING
,`postcode`:STRING
,`relationship`:STRING
,`townCity`:STRING>
,`name`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`journalId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`journalEntryProperties`:STRUCT<`timeOffCircumstancesSummary`:STRUCT<`endDate`:STRING
,`startDate`:STRING>
,`whoYouCareForCircumstancesSummary`:STRUCT<`addressNumber`:STRING
,`dateOfBirth`:STRING
,`firstName`:STRING
,`lastName`:STRING
,`middleName`:STRING
,`postcode`:STRING
,`relationship`:STRING
,`townCity`:STRING>
,`name`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`journalId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/journal';

DROP TABLE IF EXISTS journal_CarerTimeOffSummaryJournalEntry;

CREATE TABLE journal_carertimeoffsummaryjournalentry STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`journalEntryProperties`.`name`, `journalEntryProperties`.`name`) as journalEntryProperties_name, 
COALESCE(`_removed`.`journalEntryProperties`.`timeOffCircumstancesSummary`.`endDate`, `journalEntryProperties`.`timeOffCircumstancesSummary`.`endDate`) as journalEntryProperties_timeOffCircumstancesSummary_endDate, 
COALESCE(`_removed`.`journalEntryProperties`.`timeOffCircumstancesSummary`.`startDate`, `journalEntryProperties`.`timeOffCircumstancesSummary`.`startDate`) as journalEntryProperties_timeOffCircumstancesSummary_startDate, 
COALESCE(`_removed`.`journalEntryProperties`.`whoYouCareForCircumstancesSummary`.`addressNumber`, `journalEntryProperties`.`whoYouCareForCircumstancesSummary`.`addressNumber`) as journalEntryProperties_whoYouCareForCircumstancesSummary_addressNumber, 
COALESCE(`_removed`.`journalEntryProperties`.`whoYouCareForCircumstancesSummary`.`dateOfBirth`, `journalEntryProperties`.`whoYouCareForCircumstancesSummary`.`dateOfBirth`) as journalEntryProperties_whoYouCareForCircumstancesSummary_dateOfBirth, 
COALESCE(`_removed`.`journalEntryProperties`.`whoYouCareForCircumstancesSummary`.`firstName`, `journalEntryProperties`.`whoYouCareForCircumstancesSummary`.`firstName`) as journalEntryProperties_whoYouCareForCircumstancesSummary_firstName, 
COALESCE(`_removed`.`journalEntryProperties`.`whoYouCareForCircumstancesSummary`.`lastName`, `journalEntryProperties`.`whoYouCareForCircumstancesSummary`.`lastName`) as journalEntryProperties_whoYouCareForCircumstancesSummary_lastName, 
COALESCE(`_removed`.`journalEntryProperties`.`whoYouCareForCircumstancesSummary`.`middleName`, `journalEntryProperties`.`whoYouCareForCircumstancesSummary`.`middleName`) as journalEntryProperties_whoYouCareForCircumstancesSummary_middleName, 
COALESCE(`_removed`.`journalEntryProperties`.`whoYouCareForCircumstancesSummary`.`postcode`, `journalEntryProperties`.`whoYouCareForCircumstancesSummary`.`postcode`) as journalEntryProperties_whoYouCareForCircumstancesSummary_postcode, 
COALESCE(`_removed`.`journalEntryProperties`.`whoYouCareForCircumstancesSummary`.`relationship`, `journalEntryProperties`.`whoYouCareForCircumstancesSummary`.`relationship`) as journalEntryProperties_whoYouCareForCircumstancesSummary_relationship, 
COALESCE(`_removed`.`journalEntryProperties`.`whoYouCareForCircumstancesSummary`.`townCity`, `journalEntryProperties`.`whoYouCareForCircumstancesSummary`.`townCity`) as journalEntryProperties_whoYouCareForCircumstancesSummary_townCity, 
COALESCE(`_removed`.`journalEntryProperties`.`type`, `journalEntryProperties`.`type`) as journalEntryProperties_type, 
COALESCE(`_removed`.`_id`.`journalId`, `_id`.`journalId`) as id FROM src_core_journal_journal_carertimeoffsummaryjournalentry
 src_core_journal_journal_carertimeoffsummaryjournalentry 
 where `_removed`.`journalEntryProperties`.`type`='CarerTimeOffSummaryJournalEntry' or `journalEntryProperties`.`type`='CarerTimeOffSummaryJournalEntry';


!echo ------------------------;
!echo ------------------------ agent_todo_END_OF_RELATIONSHIP_CONTACT_CLAIMANT;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_end_of_relationship_contact_claimant
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_end_of_relationship_contact_claimant(
`toDoProperties` STRUCT<`claimant`:STRUCT<`createdDateTime`:STRUCT<`d_date`:STRING>
,`effectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`_version`:STRING
,`citizenId`:STRING
,`contactPreference`:STRING
,`contractId`:STRING
,`declarationId`:STRING
,`email`:STRING
,`firstName`:STRING
,`gender`:STRING
,`lastName`:STRING
,`middleName`:STRING
,`mobileNumber`:STRING
,`processId`:STRING
,`sanitisedFirstName`:STRING
,`sanitisedLastName`:STRING
,`sanitisedMiddleName`:STRING
,`verifiedUsingBioQuestionsOrThirdParty`:BOOLEAN
,`verifiedWithNameDateOfBirthOrAddressChange`:BOOLEAN
,`type`:STRING>
,`declaredDateTime`:STRUCT<`d_date`:STRING>
,`lastLoginDate`:STRUCT<`d_date`:STRING>
,`dateRelationshipEnded`:STRING
,`partnerName`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`claimant`:STRUCT<`createdDateTime`:STRUCT<`d_date`:STRING>
,`effectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`_version`:STRING
,`citizenId`:STRING
,`contactPreference`:STRING
,`contractId`:STRING
,`declarationId`:STRING
,`email`:STRING
,`firstName`:STRING
,`gender`:STRING
,`lastName`:STRING
,`middleName`:STRING
,`mobileNumber`:STRING
,`processId`:STRING
,`sanitisedFirstName`:STRING
,`sanitisedLastName`:STRING
,`sanitisedMiddleName`:STRING
,`verifiedUsingBioQuestionsOrThirdParty`:BOOLEAN
,`verifiedWithNameDateOfBirthOrAddressChange`:BOOLEAN
,`type`:STRING>
,`declaredDateTime`:STRUCT<`d_date`:STRING>
,`lastLoginDate`:STRUCT<`d_date`:STRING>
,`dateRelationshipEnded`:STRING
,`partnerName`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_END_OF_RELATIONSHIP_CONTACT_CLAIMANT;

CREATE TABLE agent_todo_end_of_relationship_contact_claimant STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`claimant`.`_version`, `toDoProperties`.`claimant`.`_version`) as toDoProperties_claimant__version, 
COALESCE(`_removed`.`toDoProperties`.`claimant`.`citizenId`, `toDoProperties`.`claimant`.`citizenId`) as toDoProperties_claimant_citizenId, 
COALESCE(`_removed`.`toDoProperties`.`claimant`.`contactPreference`, `toDoProperties`.`claimant`.`contactPreference`) as toDoProperties_claimant_contactPreference, 
COALESCE(`_removed`.`toDoProperties`.`claimant`.`contractId`, `toDoProperties`.`claimant`.`contractId`) as toDoProperties_claimant_contractId, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`toDoProperties`.`claimant`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`toDoProperties`.`claimant`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`claimant`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`claimant`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`claimant`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`claimant`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`toDoProperties`.`claimant`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`toDoProperties`.`claimant`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`toDoProperties`.`claimant`.`createdDateTime`.`d_date`, LENGTH(`toDoProperties`.`claimant`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`toDoProperties`.`claimant`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`claimant`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`toDoProperties`.`claimant`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`claimant`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`toDoProperties`.`claimant`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`toDoProperties`.`claimant`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as toDoProperties_claimant_createdDateTime_d_date, 
COALESCE(`_removed`.`toDoProperties`.`claimant`.`declarationId`, `toDoProperties`.`claimant`.`declarationId`) as toDoProperties_claimant_declarationId, 
COALESCE(CAST(`_removed`.`toDoProperties`.`claimant`.`effectiveDate`.`hasDate` as STRING), CAST(`toDoProperties`.`claimant`.`effectiveDate`.`hasDate` as STRING)) as toDoProperties_claimant_effectiveDate_hasDate, 
COALESCE(`_removed`.`toDoProperties`.`claimant`.`effectiveDate`.`knownDate`, `toDoProperties`.`claimant`.`effectiveDate`.`knownDate`) as toDoProperties_claimant_effectiveDate_knownDate, 
COALESCE(`_removed`.`toDoProperties`.`claimant`.`effectiveDate`.`type`, `toDoProperties`.`claimant`.`effectiveDate`.`type`) as toDoProperties_claimant_effectiveDate_type, 
COALESCE(`_removed`.`toDoProperties`.`claimant`.`effectiveDate`.`date`, `toDoProperties`.`claimant`.`effectiveDate`.`date`) as toDoProperties_claimant_effectiveDate_date, 
COALESCE(`_removed`.`toDoProperties`.`claimant`.`email`, `toDoProperties`.`claimant`.`email`) as toDoProperties_claimant_email, 
COALESCE(`_removed`.`toDoProperties`.`claimant`.`firstName`, `toDoProperties`.`claimant`.`firstName`) as toDoProperties_claimant_firstName, 
COALESCE(`_removed`.`toDoProperties`.`claimant`.`gender`, `toDoProperties`.`claimant`.`gender`) as toDoProperties_claimant_gender, 
COALESCE(`_removed`.`toDoProperties`.`claimant`.`lastName`, `toDoProperties`.`claimant`.`lastName`) as toDoProperties_claimant_lastName, 
COALESCE(`_removed`.`toDoProperties`.`claimant`.`middleName`, `toDoProperties`.`claimant`.`middleName`) as toDoProperties_claimant_middleName, 
COALESCE(`_removed`.`toDoProperties`.`claimant`.`mobileNumber`, `toDoProperties`.`claimant`.`mobileNumber`) as toDoProperties_claimant_mobileNumber, 
COALESCE(CAST(`_removed`.`toDoProperties`.`claimant`.`paymentEffectiveDate`.`hasDate` as STRING), CAST(`toDoProperties`.`claimant`.`paymentEffectiveDate`.`hasDate` as STRING)) as toDoProperties_claimant_paymentEffectiveDate_hasDate, 
COALESCE(`_removed`.`toDoProperties`.`claimant`.`paymentEffectiveDate`.`knownDate`, `toDoProperties`.`claimant`.`paymentEffectiveDate`.`knownDate`) as toDoProperties_claimant_paymentEffectiveDate_knownDate, 
COALESCE(`_removed`.`toDoProperties`.`claimant`.`paymentEffectiveDate`.`type`, `toDoProperties`.`claimant`.`paymentEffectiveDate`.`type`) as toDoProperties_claimant_paymentEffectiveDate_type, 
COALESCE(`_removed`.`toDoProperties`.`claimant`.`paymentEffectiveDate`.`date`, `toDoProperties`.`claimant`.`paymentEffectiveDate`.`date`) as toDoProperties_claimant_paymentEffectiveDate_date, 
COALESCE(`_removed`.`toDoProperties`.`claimant`.`processId`, `toDoProperties`.`claimant`.`processId`) as toDoProperties_claimant_processId, 
COALESCE(`_removed`.`toDoProperties`.`claimant`.`sanitisedFirstName`, `toDoProperties`.`claimant`.`sanitisedFirstName`) as toDoProperties_claimant_sanitisedFirstName, 
COALESCE(`_removed`.`toDoProperties`.`claimant`.`sanitisedLastName`, `toDoProperties`.`claimant`.`sanitisedLastName`) as toDoProperties_claimant_sanitisedLastName, 
COALESCE(`_removed`.`toDoProperties`.`claimant`.`sanitisedMiddleName`, `toDoProperties`.`claimant`.`sanitisedMiddleName`) as toDoProperties_claimant_sanitisedMiddleName, 
COALESCE(CAST(`_removed`.`toDoProperties`.`claimant`.`verifiedUsingBioQuestionsOrThirdParty` as STRING), CAST(`toDoProperties`.`claimant`.`verifiedUsingBioQuestionsOrThirdParty` as STRING)) as toDoProperties_claimant_verifiedUsingBioQuestionsOrThirdParty, 
COALESCE(CAST(`_removed`.`toDoProperties`.`claimant`.`verifiedWithNameDateOfBirthOrAddressChange` as STRING), CAST(`toDoProperties`.`claimant`.`verifiedWithNameDateOfBirthOrAddressChange` as STRING)) as toDoProperties_claimant_verifiedWithNameDateOfBirthOrAddressChange, 
COALESCE(`_removed`.`toDoProperties`.`claimant`.`type`, `toDoProperties`.`claimant`.`type`) as toDoProperties_claimant_type, 
COALESCE(`_removed`.`toDoProperties`.`dateRelationshipEnded`, `toDoProperties`.`dateRelationshipEnded`) as toDoProperties_dateRelationshipEnded, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`toDoProperties`.`declaredDateTime`.`d_date`, LENGTH(`_removed`.`toDoProperties`.`declaredDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`declaredDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`declaredDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`declaredDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`declaredDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`toDoProperties`.`declaredDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`toDoProperties`.`declaredDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`toDoProperties`.`declaredDateTime`.`d_date`, LENGTH(`toDoProperties`.`declaredDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`toDoProperties`.`declaredDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`declaredDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`toDoProperties`.`declaredDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`declaredDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`toDoProperties`.`declaredDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`toDoProperties`.`declaredDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as toDoProperties_declaredDateTime_d_date, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`toDoProperties`.`lastLoginDate`.`d_date`, LENGTH(`_removed`.`toDoProperties`.`lastLoginDate`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`lastLoginDate`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`lastLoginDate`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`lastLoginDate`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`lastLoginDate`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`toDoProperties`.`lastLoginDate`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`toDoProperties`.`lastLoginDate`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`toDoProperties`.`lastLoginDate`.`d_date`, LENGTH(`toDoProperties`.`lastLoginDate`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`toDoProperties`.`lastLoginDate`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`lastLoginDate`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`toDoProperties`.`lastLoginDate`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`lastLoginDate`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`toDoProperties`.`lastLoginDate`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`toDoProperties`.`lastLoginDate`.`d_date`, 21, 3)) AS TIMESTAMP) END) as toDoProperties_lastLoginDate_d_date, 
COALESCE(`_removed`.`toDoProperties`.`partnerName`, `toDoProperties`.`partnerName`) as toDoProperties_partnerName, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_end_of_relationship_contact_claimant
 src_agent_core_agenttodo_agent_todo_end_of_relationship_contact_claimant 
 where `_removed`.`toDoProperties`.`type`='END_OF_RELATIONSHIP_CONTACT_CLAIMANT' or `toDoProperties`.`type`='END_OF_RELATIONSHIP_CONTACT_CLAIMANT';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_VERIFY_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_verify_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_verify_properties(
`toDoProperties` STRUCT<`dateOfSummaryChange`:STRUCT<`d_date`:STRING>
,`declarationId`:STRING
,`processId`:STRING
,`summaryUpdatedBy`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`dateOfSummaryChange`:STRUCT<`d_date`:STRING>
,`declarationId`:STRING
,`processId`:STRING
,`summaryUpdatedBy`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_VERIFY_PROPERTIES;

CREATE TABLE agent_todo_archive_verify_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, LENGTH(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`toDoProperties`.`dateOfSummaryChange`.`d_date`, LENGTH(`toDoProperties`.`dateOfSummaryChange`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`toDoProperties`.`dateOfSummaryChange`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`dateOfSummaryChange`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`toDoProperties`.`dateOfSummaryChange`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`dateOfSummaryChange`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`toDoProperties`.`dateOfSummaryChange`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`toDoProperties`.`dateOfSummaryChange`.`d_date`, 21, 3)) AS TIMESTAMP) END) as toDoProperties_dateOfSummaryChange_d_date, 
COALESCE(`_removed`.`toDoProperties`.`declarationId`, `toDoProperties`.`declarationId`) as toDoProperties_declarationId, 
COALESCE(`_removed`.`toDoProperties`.`processId`, `toDoProperties`.`processId`) as toDoProperties_processId, 
COALESCE(`_removed`.`toDoProperties`.`summaryUpdatedBy`, `toDoProperties`.`summaryUpdatedBy`) as toDoProperties_summaryUpdatedBy, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_verify_properties
 src_agent_core_agenttodoarchive_agent_todo_archive_verify_properties 
 where `_removed`.`toDoProperties`.`type`='VERIFY_PROPERTIES' or `toDoProperties`.`type`='VERIFY_PROPERTIES';


!echo ------------------------;
!echo ------------------------ agent_todo_RECOVER_OVERLAPPING_BENEFIT_PAYMENTS;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_recover_overlapping_benefit_payments
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_recover_overlapping_benefit_payments(
`toDoProperties` STRUCT<`overlappingBenefitAmounts`:STRUCT<`overlappingBenefits`:ARRAY<STRUCT<`trace`:STRUCT<`elements`:ARRAY<STRUCT<`code`:STRING
,`description`:STRING
,`elementType`:STRING
>>>
,`value`:STRUCT<`amount`:STRING
,`claimantId`:STRING
,`otherBenefitAwardType`:STRING>
>>>
,`adjustmentTotal`:STRING
,`universalCreditMaximum`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`overlappingBenefitAmounts`:STRUCT<`overlappingBenefits`:ARRAY<STRUCT<`trace`:STRUCT<`elements`:ARRAY<STRUCT<`code`:STRING
,`description`:STRING
,`elementType`:STRING
>>>
,`value`:STRUCT<`amount`:STRING
,`claimantId`:STRING
,`otherBenefitAwardType`:STRING>
>>>
,`adjustmentTotal`:STRING
,`universalCreditMaximum`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_RECOVER_OVERLAPPING_BENEFIT_PAYMENTS;

CREATE TABLE agent_todo_recover_overlapping_benefit_payments STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`adjustmentTotal`, `toDoProperties`.`adjustmentTotal`) as toDoProperties_adjustmentTotal, 
COALESCE(`removed_exploded_todoproperties_overlappingbenefitamounts_overlappingbenefits_exploded_trace_elements`.`code`, `exploded_todoproperties_overlappingbenefitamounts_overlappingbenefits_exploded_trace_elements`.`code`) as toDoProperties_overlappingBenefitAmounts_overlappingBenefits_trace_elements_code, 
COALESCE(`removed_exploded_todoproperties_overlappingbenefitamounts_overlappingbenefits_exploded_trace_elements`.`description`, `exploded_todoproperties_overlappingbenefitamounts_overlappingbenefits_exploded_trace_elements`.`description`) as toDoProperties_overlappingBenefitAmounts_overlappingBenefits_trace_elements_description, 
COALESCE(`removed_exploded_todoproperties_overlappingbenefitamounts_overlappingbenefits_exploded_trace_elements`.`elementType`, `exploded_todoproperties_overlappingbenefitamounts_overlappingbenefits_exploded_trace_elements`.`elementType`) as toDoProperties_overlappingBenefitAmounts_overlappingBenefits_trace_elements_elementType, 
COALESCE(`removed_exploded_todoproperties_overlappingbenefitamounts_overlappingbenefits`.`value`.`amount`, `exploded_todoproperties_overlappingbenefitamounts_overlappingbenefits`.`value`.`amount`) as toDoProperties_overlappingBenefitAmounts_overlappingBenefits_value_amount, 
COALESCE(`removed_exploded_todoproperties_overlappingbenefitamounts_overlappingbenefits`.`value`.`claimantId`, `exploded_todoproperties_overlappingbenefitamounts_overlappingbenefits`.`value`.`claimantId`) as toDoProperties_overlappingBenefitAmounts_overlappingBenefits_value_claimantId, 
COALESCE(`removed_exploded_todoproperties_overlappingbenefitamounts_overlappingbenefits`.`value`.`otherBenefitAwardType`, `exploded_todoproperties_overlappingbenefitamounts_overlappingbenefits`.`value`.`otherBenefitAwardType`) as toDoProperties_overlappingBenefitAmounts_overlappingBenefits_value_otherBenefitAwardType, 
COALESCE(`_removed`.`toDoProperties`.`universalCreditMaximum`, `toDoProperties`.`universalCreditMaximum`) as toDoProperties_universalCreditMaximum, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_recover_overlapping_benefit_payments
 LATERAL VIEW OUTER EXPLODE(`toDoProperties`.`overlappingBenefitAmounts`.`overlappingBenefits`) view_exploded_todoproperties_overlappingbenefitamounts_overlappingbenefits AS exploded_todoproperties_overlappingbenefitamounts_overlappingbenefits 
 LATERAL VIEW OUTER EXPLODE(`exploded_todoproperties_overlappingbenefitamounts_overlappingbenefits`.`trace`.`elements`) view_exploded_todoproperties_overlappingbenefitamounts_overlappingbenefits_exploded_trace_elements AS exploded_todoproperties_overlappingbenefitamounts_overlappingbenefits_exploded_trace_elements 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`toDoProperties`.`overlappingBenefitAmounts`.`overlappingBenefits`) view_removed_exploded_todoproperties_overlappingbenefitamounts_overlappingbenefits AS removed_exploded_todoproperties_overlappingbenefitamounts_overlappingbenefits 
 LATERAL VIEW OUTER EXPLODE(`removed_exploded_todoproperties_overlappingbenefitamounts_overlappingbenefits`.`trace`.`elements`) view_removed_exploded_todoproperties_overlappingbenefitamounts_overlappingbenefits_exploded_trace_elements AS removed_exploded_todoproperties_overlappingbenefitamounts_overlappingbenefits_exploded_trace_elements 
 
 where `_removed`.`toDoProperties`.`type`='RECOVER_OVERLAPPING_BENEFIT_PAYMENTS' or `toDoProperties`.`type`='RECOVER_OVERLAPPING_BENEFIT_PAYMENTS';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_REFER_ENTITLEMENT_TO_DECISION_MAKER_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_refer_entitlement_to_decision_maker_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_refer_entitlement_to_decision_maker_properties(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`reason`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`reason`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_REFER_ENTITLEMENT_TO_DECISION_MAKER_PROPERTIES;

CREATE TABLE agent_todo_archive_refer_entitlement_to_decision_maker_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`reason`, `toDoProperties`.`reason`) as toDoProperties_reason, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_refer_entitlement_to_decision_maker_properties
 src_agent_core_agenttodoarchive_agent_todo_archive_refer_entitlement_to_decision_maker_properties 
 where `_removed`.`toDoProperties`.`type`='REFER_ENTITLEMENT_TO_DECISION_MAKER_PROPERTIES' or `toDoProperties`.`type`='REFER_ENTITLEMENT_TO_DECISION_MAKER_PROPERTIES';


!echo ------------------------;
!echo ------------------------ journal_ucSanctionAddedJournalEntry;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_journal_journal_ucsanctionaddedjournalentry
;

CREATE EXTERNAL TABLE src_core_journal_journal_ucsanctionaddedjournalentry(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`journalEntryProperties` STRUCT<`dateOfFailure`:STRING
,`failureType`:STRING
,`type`:STRING>
,`_id` STRUCT<`journalId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`journalEntryProperties`:STRUCT<`dateOfFailure`:STRING
,`failureType`:STRING
,`type`:STRING>
,`_id`:STRUCT<`journalId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/journal';

DROP TABLE IF EXISTS journal_ucSanctionAddedJournalEntry;

CREATE TABLE journal_ucsanctionaddedjournalentry STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`journalEntryProperties`.`dateOfFailure`, `journalEntryProperties`.`dateOfFailure`) as journalEntryProperties_dateOfFailure, 
COALESCE(`_removed`.`journalEntryProperties`.`failureType`, `journalEntryProperties`.`failureType`) as journalEntryProperties_failureType, 
COALESCE(`_removed`.`journalEntryProperties`.`type`, `journalEntryProperties`.`type`) as journalEntryProperties_type, 
COALESCE(`_removed`.`_id`.`journalId`, `_id`.`journalId`) as id FROM src_core_journal_journal_ucsanctionaddedjournalentry
 src_core_journal_journal_ucsanctionaddedjournalentry 
 where `_removed`.`journalEntryProperties`.`type`='ucSanctionAddedJournalEntry' or `journalEntryProperties`.`type`='ucSanctionAddedJournalEntry';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_RETROSPECTIVE_CALC_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_retrospective_calc_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_retrospective_calc_properties(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`assessmentPeriodId`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`assessmentPeriodId`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_RETROSPECTIVE_CALC_PROPERTIES;

CREATE TABLE agent_todo_archive_retrospective_calc_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`assessmentPeriodId`, `toDoProperties`.`assessmentPeriodId`) as toDoProperties_assessmentPeriodId, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_retrospective_calc_properties
 src_agent_core_agenttodoarchive_agent_todo_archive_retrospective_calc_properties 
 where `_removed`.`toDoProperties`.`type`='RETROSPECTIVE_CALC_PROPERTIES' or `toDoProperties`.`type`='RETROSPECTIVE_CALC_PROPERTIES';


!echo ------------------------;
!echo ------------------------ agent_todo_REFER_ENTITLEMENT_TO_DECISION_MAKER_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_refer_entitlement_to_decision_maker_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_refer_entitlement_to_decision_maker_properties(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`reason`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`reason`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_REFER_ENTITLEMENT_TO_DECISION_MAKER_PROPERTIES;

CREATE TABLE agent_todo_refer_entitlement_to_decision_maker_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`reason`, `toDoProperties`.`reason`) as toDoProperties_reason, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_refer_entitlement_to_decision_maker_properties
 src_agent_core_agenttodo_agent_todo_refer_entitlement_to_decision_maker_properties 
 where `_removed`.`toDoProperties`.`type`='REFER_ENTITLEMENT_TO_DECISION_MAKER_PROPERTIES' or `toDoProperties`.`type`='REFER_ENTITLEMENT_TO_DECISION_MAKER_PROPERTIES';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_CHECK_WORKGROUP_AND_COMMITMENT_ON_HEALTH_AND_DISABILITY_CHANGE;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_check_workgroup_and_commitment_on_health_and_disability_change
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_check_workgroup_and_commitment_on_health_and_disability_change(
`toDoProperties` STRUCT<`healthAndDisabilitySummary`:STRUCT<`agentToCallTerminallyIllClaimant`:BOOLEAN
,`claimantId`:STRING
,`contractId`:STRING
,`copiedFromDeclarationId`:STRING
,`name`:STRING
,`partnerDeclaration`:BOOLEAN
,`processId`:STRING
,`reportingIllness`:BOOLEAN
,`restrictedAbilityToWork`:BOOLEAN
,`confirmationRequired`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`declarationId`:STRING
,`message`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`healthAndDisabilitySummary`:STRUCT<`agentToCallTerminallyIllClaimant`:BOOLEAN
,`claimantId`:STRING
,`contractId`:STRING
,`copiedFromDeclarationId`:STRING
,`name`:STRING
,`partnerDeclaration`:BOOLEAN
,`processId`:STRING
,`reportingIllness`:BOOLEAN
,`restrictedAbilityToWork`:BOOLEAN
,`confirmationRequired`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`declarationId`:STRING
,`message`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_CHECK_WORKGROUP_AND_COMMITMENT_ON_HEALTH_AND_DISABILITY_CHANGE;

CREATE TABLE agent_todo_archive_check_workgroup_and_commitment_on_health_and_disability_change STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`declarationId`, `toDoProperties`.`declarationId`) as toDoProperties_declarationId, 
COALESCE(CAST(`_removed`.`toDoProperties`.`healthAndDisabilitySummary`.`agentToCallTerminallyIllClaimant` as STRING), CAST(`toDoProperties`.`healthAndDisabilitySummary`.`agentToCallTerminallyIllClaimant` as STRING)) as toDoProperties_healthAndDisabilitySummary_agentToCallTerminallyIllClaimant, 
COALESCE(`_removed`.`toDoProperties`.`healthAndDisabilitySummary`.`claimantId`, `toDoProperties`.`healthAndDisabilitySummary`.`claimantId`) as toDoProperties_healthAndDisabilitySummary_claimantId, 
COALESCE(`_removed`.`toDoProperties`.`healthAndDisabilitySummary`.`contractId`, `toDoProperties`.`healthAndDisabilitySummary`.`contractId`) as toDoProperties_healthAndDisabilitySummary_contractId, 
COALESCE(`_removed`.`toDoProperties`.`healthAndDisabilitySummary`.`copiedFromDeclarationId`, `toDoProperties`.`healthAndDisabilitySummary`.`copiedFromDeclarationId`) as toDoProperties_healthAndDisabilitySummary_copiedFromDeclarationId, 
COALESCE(`_removed`.`toDoProperties`.`healthAndDisabilitySummary`.`name`, `toDoProperties`.`healthAndDisabilitySummary`.`name`) as toDoProperties_healthAndDisabilitySummary_name, 
COALESCE(CAST(`_removed`.`toDoProperties`.`healthAndDisabilitySummary`.`partnerDeclaration` as STRING), CAST(`toDoProperties`.`healthAndDisabilitySummary`.`partnerDeclaration` as STRING)) as toDoProperties_healthAndDisabilitySummary_partnerDeclaration, 
COALESCE(`_removed`.`toDoProperties`.`healthAndDisabilitySummary`.`processId`, `toDoProperties`.`healthAndDisabilitySummary`.`processId`) as toDoProperties_healthAndDisabilitySummary_processId, 
COALESCE(CAST(`_removed`.`toDoProperties`.`healthAndDisabilitySummary`.`reportingIllness` as STRING), CAST(`toDoProperties`.`healthAndDisabilitySummary`.`reportingIllness` as STRING)) as toDoProperties_healthAndDisabilitySummary_reportingIllness, 
COALESCE(CAST(`_removed`.`toDoProperties`.`healthAndDisabilitySummary`.`restrictedAbilityToWork` as STRING), CAST(`toDoProperties`.`healthAndDisabilitySummary`.`restrictedAbilityToWork` as STRING)) as toDoProperties_healthAndDisabilitySummary_restrictedAbilityToWork, 
COALESCE(CAST(`_removed`.`toDoProperties`.`healthAndDisabilitySummary`.`confirmationRequired` as STRING), CAST(`toDoProperties`.`healthAndDisabilitySummary`.`confirmationRequired` as STRING)) as toDoProperties_healthAndDisabilitySummary_confirmationRequired, 
COALESCE(CAST(`_removed`.`toDoProperties`.`healthAndDisabilitySummary`.`perClaimant` as STRING), CAST(`toDoProperties`.`healthAndDisabilitySummary`.`perClaimant` as STRING)) as toDoProperties_healthAndDisabilitySummary_perClaimant, 
COALESCE(`_removed`.`toDoProperties`.`healthAndDisabilitySummary`.`type`, `toDoProperties`.`healthAndDisabilitySummary`.`type`) as toDoProperties_healthAndDisabilitySummary_type, 
COALESCE(`_removed`.`toDoProperties`.`message`, `toDoProperties`.`message`) as toDoProperties_message, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_check_workgroup_and_commitment_on_health_and_disability_change
 src_agent_core_agenttodoarchive_agent_todo_archive_check_workgroup_and_commitment_on_health_and_disability_change 
 where `_removed`.`toDoProperties`.`type`='CHECK_WORKGROUP_AND_COMMITMENT_ON_HEALTH_AND_DISABILITY_CHANGE' or `toDoProperties`.`type`='CHECK_WORKGROUP_AND_COMMITMENT_ON_HEALTH_AND_DISABILITY_CHANGE';


!echo ------------------------;
!echo ------------------------ journal_WorkAndEarningsSummaryJournalEntry;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_journal_journal_workandearningssummaryjournalentry
;

CREATE EXTERNAL TABLE src_core_journal_journal_workandearningssummaryjournalentry(
`journalEntryProperties` STRUCT<`workAndEarningsSummary`:STRUCT<`dateOfChange`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`earnings`:STRUCT<`amount`:STRING
,`hoursPerWeek`:STRING
,`paymentFrequency`:STRING>
,`futureEmployment`:STRUCT<`expectedEarnings`:STRING
,`hoursPerWeek`:STRING
,`paymentFrequency`:STRING
,`startDate`:STRING
,`startingEmployment`:BOOLEAN>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`employerAndMaternityAllowanceSummary`:STRUCT<`maternityAllowance`:BOOLEAN
,`maternityAllowanceAmount`:STRING
,`maternityAllowancePaymentFrequency`:STRING
,`otherEmployerPaymentFrequency`:STRING
,`otherPayFromEmployer`:BOOLEAN
,`otherPayFromEmployerAmount`:STRING>
,`workStatusSummary`:STRUCT<`dateStoppedWorking`:STRING
,`stoppedWorkingInLast9Months`:BOOLEAN>
,`claimantId`:STRING
,`contractId`:STRING
,`employmentStatus`:STRING
,`expectedPreviousEarnings`:STRING
,`name`:STRING
,`processId`:STRING
,`startingSelfEmployment`:BOOLEAN
,`working`:BOOLEAN
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`journalId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`journalEntryProperties`:STRUCT<`workAndEarningsSummary`:STRUCT<`dateOfChange`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`earnings`:STRUCT<`amount`:STRING
,`hoursPerWeek`:STRING
,`paymentFrequency`:STRING>
,`futureEmployment`:STRUCT<`expectedEarnings`:STRING
,`hoursPerWeek`:STRING
,`paymentFrequency`:STRING
,`startDate`:STRING
,`startingEmployment`:BOOLEAN>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`employerAndMaternityAllowanceSummary`:STRUCT<`maternityAllowance`:BOOLEAN
,`maternityAllowanceAmount`:STRING
,`maternityAllowancePaymentFrequency`:STRING
,`otherEmployerPaymentFrequency`:STRING
,`otherPayFromEmployer`:BOOLEAN
,`otherPayFromEmployerAmount`:STRING>
,`workStatusSummary`:STRUCT<`dateStoppedWorking`:STRING
,`stoppedWorkingInLast9Months`:BOOLEAN>
,`claimantId`:STRING
,`contractId`:STRING
,`employmentStatus`:STRING
,`expectedPreviousEarnings`:STRING
,`name`:STRING
,`processId`:STRING
,`startingSelfEmployment`:BOOLEAN
,`working`:BOOLEAN
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`journalId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/journal';

DROP TABLE IF EXISTS journal_WorkAndEarningsSummaryJournalEntry;

CREATE TABLE journal_workandearningssummaryjournalentry STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`journalEntryProperties`.`workAndEarningsSummary`.`claimantId`, `journalEntryProperties`.`workAndEarningsSummary`.`claimantId`) as journalEntryProperties_workAndEarningsSummary_claimantId, 
COALESCE(`_removed`.`journalEntryProperties`.`workAndEarningsSummary`.`contractId`, `journalEntryProperties`.`workAndEarningsSummary`.`contractId`) as journalEntryProperties_workAndEarningsSummary_contractId, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`workAndEarningsSummary`.`dateOfChange`.`hasDate` as STRING), CAST(`journalEntryProperties`.`workAndEarningsSummary`.`dateOfChange`.`hasDate` as STRING)) as journalEntryProperties_workAndEarningsSummary_dateOfChange_hasDate, 
COALESCE(`_removed`.`journalEntryProperties`.`workAndEarningsSummary`.`dateOfChange`.`knownDate`, `journalEntryProperties`.`workAndEarningsSummary`.`dateOfChange`.`knownDate`) as journalEntryProperties_workAndEarningsSummary_dateOfChange_knownDate, 
COALESCE(`_removed`.`journalEntryProperties`.`workAndEarningsSummary`.`dateOfChange`.`type`, `journalEntryProperties`.`workAndEarningsSummary`.`dateOfChange`.`type`) as journalEntryProperties_workAndEarningsSummary_dateOfChange_type, 
COALESCE(`_removed`.`journalEntryProperties`.`workAndEarningsSummary`.`dateOfChange`.`date`, `journalEntryProperties`.`workAndEarningsSummary`.`dateOfChange`.`date`) as journalEntryProperties_workAndEarningsSummary_dateOfChange_date, 
COALESCE(`_removed`.`journalEntryProperties`.`workAndEarningsSummary`.`earnings`.`amount`, `journalEntryProperties`.`workAndEarningsSummary`.`earnings`.`amount`) as journalEntryProperties_workAndEarningsSummary_earnings_amount, 
COALESCE(`_removed`.`journalEntryProperties`.`workAndEarningsSummary`.`earnings`.`hoursPerWeek`, `journalEntryProperties`.`workAndEarningsSummary`.`earnings`.`hoursPerWeek`) as journalEntryProperties_workAndEarningsSummary_earnings_hoursPerWeek, 
COALESCE(`_removed`.`journalEntryProperties`.`workAndEarningsSummary`.`earnings`.`paymentFrequency`, `journalEntryProperties`.`workAndEarningsSummary`.`earnings`.`paymentFrequency`) as journalEntryProperties_workAndEarningsSummary_earnings_paymentFrequency, 
COALESCE(`_removed`.`journalEntryProperties`.`workAndEarningsSummary`.`employmentStatus`, `journalEntryProperties`.`workAndEarningsSummary`.`employmentStatus`) as journalEntryProperties_workAndEarningsSummary_employmentStatus, 
COALESCE(`_removed`.`journalEntryProperties`.`workAndEarningsSummary`.`expectedPreviousEarnings`, `journalEntryProperties`.`workAndEarningsSummary`.`expectedPreviousEarnings`) as journalEntryProperties_workAndEarningsSummary_expectedPreviousEarnings, 
COALESCE(`_removed`.`journalEntryProperties`.`workAndEarningsSummary`.`futureEmployment`.`expectedEarnings`, `journalEntryProperties`.`workAndEarningsSummary`.`futureEmployment`.`expectedEarnings`) as journalEntryProperties_workAndEarningsSummary_futureEmployment_expectedEarnings, 
COALESCE(`_removed`.`journalEntryProperties`.`workAndEarningsSummary`.`futureEmployment`.`hoursPerWeek`, `journalEntryProperties`.`workAndEarningsSummary`.`futureEmployment`.`hoursPerWeek`) as journalEntryProperties_workAndEarningsSummary_futureEmployment_hoursPerWeek, 
COALESCE(`_removed`.`journalEntryProperties`.`workAndEarningsSummary`.`futureEmployment`.`paymentFrequency`, `journalEntryProperties`.`workAndEarningsSummary`.`futureEmployment`.`paymentFrequency`) as journalEntryProperties_workAndEarningsSummary_futureEmployment_paymentFrequency, 
COALESCE(`_removed`.`journalEntryProperties`.`workAndEarningsSummary`.`futureEmployment`.`startDate`, `journalEntryProperties`.`workAndEarningsSummary`.`futureEmployment`.`startDate`) as journalEntryProperties_workAndEarningsSummary_futureEmployment_startDate, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`workAndEarningsSummary`.`futureEmployment`.`startingEmployment` as STRING), CAST(`journalEntryProperties`.`workAndEarningsSummary`.`futureEmployment`.`startingEmployment` as STRING)) as journalEntryProperties_workAndEarningsSummary_futureEmployment_startingEmployment, 
COALESCE(`_removed`.`journalEntryProperties`.`workAndEarningsSummary`.`name`, `journalEntryProperties`.`workAndEarningsSummary`.`name`) as journalEntryProperties_workAndEarningsSummary_name, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`workAndEarningsSummary`.`paymentEffectiveDate`.`hasDate` as STRING), CAST(`journalEntryProperties`.`workAndEarningsSummary`.`paymentEffectiveDate`.`hasDate` as STRING)) as journalEntryProperties_workAndEarningsSummary_paymentEffectiveDate_hasDate, 
COALESCE(`_removed`.`journalEntryProperties`.`workAndEarningsSummary`.`paymentEffectiveDate`.`knownDate`, `journalEntryProperties`.`workAndEarningsSummary`.`paymentEffectiveDate`.`knownDate`) as journalEntryProperties_workAndEarningsSummary_paymentEffectiveDate_knownDate, 
COALESCE(`_removed`.`journalEntryProperties`.`workAndEarningsSummary`.`paymentEffectiveDate`.`type`, `journalEntryProperties`.`workAndEarningsSummary`.`paymentEffectiveDate`.`type`) as journalEntryProperties_workAndEarningsSummary_paymentEffectiveDate_type, 
COALESCE(`_removed`.`journalEntryProperties`.`workAndEarningsSummary`.`paymentEffectiveDate`.`date`, `journalEntryProperties`.`workAndEarningsSummary`.`paymentEffectiveDate`.`date`) as journalEntryProperties_workAndEarningsSummary_paymentEffectiveDate_date, 
COALESCE(`_removed`.`journalEntryProperties`.`workAndEarningsSummary`.`processId`, `journalEntryProperties`.`workAndEarningsSummary`.`processId`) as journalEntryProperties_workAndEarningsSummary_processId, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`workAndEarningsSummary`.`startingSelfEmployment` as STRING), CAST(`journalEntryProperties`.`workAndEarningsSummary`.`startingSelfEmployment` as STRING)) as journalEntryProperties_workAndEarningsSummary_startingSelfEmployment, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`workAndEarningsSummary`.`working` as STRING), CAST(`journalEntryProperties`.`workAndEarningsSummary`.`working` as STRING)) as journalEntryProperties_workAndEarningsSummary_working, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`workAndEarningsSummary`.`confirmationRequired` as STRING), CAST(`journalEntryProperties`.`workAndEarningsSummary`.`confirmationRequired` as STRING)) as journalEntryProperties_workAndEarningsSummary_confirmationRequired, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`workAndEarningsSummary`.`employerAndMaternityAllowanceSummary`.`maternityAllowance` as STRING), CAST(`journalEntryProperties`.`workAndEarningsSummary`.`employerAndMaternityAllowanceSummary`.`maternityAllowance` as STRING)) as journalEntryProperties_workAndEarningsSummary_employerAndMaternityAllowanceSummary_maternityAllowance, 
COALESCE(`_removed`.`journalEntryProperties`.`workAndEarningsSummary`.`employerAndMaternityAllowanceSummary`.`maternityAllowanceAmount`, `journalEntryProperties`.`workAndEarningsSummary`.`employerAndMaternityAllowanceSummary`.`maternityAllowanceAmount`) as journalEntryProperties_workAndEarningsSummary_employerAndMaternityAllowanceSummary_maternityAllowanceAmount, 
COALESCE(`_removed`.`journalEntryProperties`.`workAndEarningsSummary`.`employerAndMaternityAllowanceSummary`.`maternityAllowancePaymentFrequency`, `journalEntryProperties`.`workAndEarningsSummary`.`employerAndMaternityAllowanceSummary`.`maternityAllowancePaymentFrequency`) as journalEntryProperties_workAndEarningsSummary_employerAndMaternityAllowanceSummary_maternityAllowancePaymentFrequency, 
COALESCE(`_removed`.`journalEntryProperties`.`workAndEarningsSummary`.`employerAndMaternityAllowanceSummary`.`otherEmployerPaymentFrequency`, `journalEntryProperties`.`workAndEarningsSummary`.`employerAndMaternityAllowanceSummary`.`otherEmployerPaymentFrequency`) as journalEntryProperties_workAndEarningsSummary_employerAndMaternityAllowanceSummary_otherEmployerPaymentFrequency, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`workAndEarningsSummary`.`employerAndMaternityAllowanceSummary`.`otherPayFromEmployer` as STRING), CAST(`journalEntryProperties`.`workAndEarningsSummary`.`employerAndMaternityAllowanceSummary`.`otherPayFromEmployer` as STRING)) as journalEntryProperties_workAndEarningsSummary_employerAndMaternityAllowanceSummary_otherPayFromEmployer, 
COALESCE(`_removed`.`journalEntryProperties`.`workAndEarningsSummary`.`employerAndMaternityAllowanceSummary`.`otherPayFromEmployerAmount`, `journalEntryProperties`.`workAndEarningsSummary`.`employerAndMaternityAllowanceSummary`.`otherPayFromEmployerAmount`) as journalEntryProperties_workAndEarningsSummary_employerAndMaternityAllowanceSummary_otherPayFromEmployerAmount, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`workAndEarningsSummary`.`hideDetailsForPartnerDeclaration` as STRING), CAST(`journalEntryProperties`.`workAndEarningsSummary`.`hideDetailsForPartnerDeclaration` as STRING)) as journalEntryProperties_workAndEarningsSummary_hideDetailsForPartnerDeclaration, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`workAndEarningsSummary`.`perClaimant` as STRING), CAST(`journalEntryProperties`.`workAndEarningsSummary`.`perClaimant` as STRING)) as journalEntryProperties_workAndEarningsSummary_perClaimant, 
COALESCE(`_removed`.`journalEntryProperties`.`workAndEarningsSummary`.`workStatusSummary`.`dateStoppedWorking`, `journalEntryProperties`.`workAndEarningsSummary`.`workStatusSummary`.`dateStoppedWorking`) as journalEntryProperties_workAndEarningsSummary_workStatusSummary_dateStoppedWorking, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`workAndEarningsSummary`.`workStatusSummary`.`stoppedWorkingInLast9Months` as STRING), CAST(`journalEntryProperties`.`workAndEarningsSummary`.`workStatusSummary`.`stoppedWorkingInLast9Months` as STRING)) as journalEntryProperties_workAndEarningsSummary_workStatusSummary_stoppedWorkingInLast9Months, 
COALESCE(`_removed`.`journalEntryProperties`.`workAndEarningsSummary`.`type`, `journalEntryProperties`.`workAndEarningsSummary`.`type`) as journalEntryProperties_workAndEarningsSummary_type, 
COALESCE(`_removed`.`journalEntryProperties`.`type`, `journalEntryProperties`.`type`) as journalEntryProperties_type, 
COALESCE(`_removed`.`_id`.`journalId`, `_id`.`journalId`) as id FROM src_core_journal_journal_workandearningssummaryjournalentry
 src_core_journal_journal_workandearningssummaryjournalentry 
 where `_removed`.`journalEntryProperties`.`type`='WorkAndEarningsSummaryJournalEntry' or `journalEntryProperties`.`type`='WorkAndEarningsSummaryJournalEntry';


!echo ------------------------;
!echo ------------------------ agent_todo_APA_CREATE;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_apa_create
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_apa_create(
`toDoProperties` STRUCT<`portalCreateProperties`:STRUCT<`applyingFor`:ARRAY<STRING>
,`tier1Reasons`:ARRAY<STRING>
,`tier2Reasons`:ARRAY<STRING>
,`arrearsAmount`:STRING
,`contactEmailAddress`:STRING
,`contactPhoneNumber`:STRING
,`creditorReferenceNumber`:STRING
,`discussedWithClaimant`:BOOLEAN
,`tenancyAgreementId`:STRING
,`tenancyReferenceNumber`:STRING>
,`reasons`:STRING
,`region`:STRING
,`whoRequested`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`portalCreateProperties`:STRUCT<`applyingFor`:ARRAY<STRING>
,`tier1Reasons`:ARRAY<STRING>
,`tier2Reasons`:ARRAY<STRING>
,`arrearsAmount`:STRING
,`contactEmailAddress`:STRING
,`contactPhoneNumber`:STRING
,`creditorReferenceNumber`:STRING
,`discussedWithClaimant`:BOOLEAN
,`tenancyAgreementId`:STRING
,`tenancyReferenceNumber`:STRING>
,`reasons`:STRING
,`region`:STRING
,`whoRequested`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_APA_CREATE;

CREATE TABLE agent_todo_apa_create STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`removed_exploded_todoproperties_portalcreateproperties_applyingfor`, `exploded_todoproperties_portalcreateproperties_applyingfor`) as toDoProperties_portalCreateProperties_applyingFor, 
COALESCE(`_removed`.`toDoProperties`.`portalCreateProperties`.`arrearsAmount`, `toDoProperties`.`portalCreateProperties`.`arrearsAmount`) as toDoProperties_portalCreateProperties_arrearsAmount, 
COALESCE(`_removed`.`toDoProperties`.`portalCreateProperties`.`contactEmailAddress`, `toDoProperties`.`portalCreateProperties`.`contactEmailAddress`) as toDoProperties_portalCreateProperties_contactEmailAddress, 
COALESCE(`_removed`.`toDoProperties`.`portalCreateProperties`.`contactPhoneNumber`, `toDoProperties`.`portalCreateProperties`.`contactPhoneNumber`) as toDoProperties_portalCreateProperties_contactPhoneNumber, 
COALESCE(`_removed`.`toDoProperties`.`portalCreateProperties`.`creditorReferenceNumber`, `toDoProperties`.`portalCreateProperties`.`creditorReferenceNumber`) as toDoProperties_portalCreateProperties_creditorReferenceNumber, 
COALESCE(CAST(`_removed`.`toDoProperties`.`portalCreateProperties`.`discussedWithClaimant` as STRING), CAST(`toDoProperties`.`portalCreateProperties`.`discussedWithClaimant` as STRING)) as toDoProperties_portalCreateProperties_discussedWithClaimant, 
COALESCE(`_removed`.`toDoProperties`.`portalCreateProperties`.`tenancyAgreementId`, `toDoProperties`.`portalCreateProperties`.`tenancyAgreementId`) as toDoProperties_portalCreateProperties_tenancyAgreementId, 
COALESCE(`_removed`.`toDoProperties`.`portalCreateProperties`.`tenancyReferenceNumber`, `toDoProperties`.`portalCreateProperties`.`tenancyReferenceNumber`) as toDoProperties_portalCreateProperties_tenancyReferenceNumber, 
COALESCE(`removed_exploded_todoproperties_portalcreateproperties_tier1reasons`, `exploded_todoproperties_portalcreateproperties_tier1reasons`) as toDoProperties_portalCreateProperties_tier1Reasons, 
COALESCE(`removed_exploded_todoproperties_portalcreateproperties_tier2reasons`, `exploded_todoproperties_portalcreateproperties_tier2reasons`) as toDoProperties_portalCreateProperties_tier2Reasons, 
COALESCE(`_removed`.`toDoProperties`.`reasons`, `toDoProperties`.`reasons`) as toDoProperties_reasons, 
COALESCE(`_removed`.`toDoProperties`.`region`, `toDoProperties`.`region`) as toDoProperties_region, 
COALESCE(`_removed`.`toDoProperties`.`whoRequested`, `toDoProperties`.`whoRequested`) as toDoProperties_whoRequested, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_apa_create
 LATERAL VIEW OUTER EXPLODE(`toDoProperties`.`portalCreateProperties`.`applyingFor`) view_exploded_todoproperties_portalcreateproperties_applyingfor AS exploded_todoproperties_portalcreateproperties_applyingfor 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`toDoProperties`.`portalCreateProperties`.`applyingFor`) view_removed_exploded_todoproperties_portalcreateproperties_applyingfor AS removed_exploded_todoproperties_portalcreateproperties_applyingfor 
 LATERAL VIEW OUTER EXPLODE(`toDoProperties`.`portalCreateProperties`.`tier1Reasons`) view_exploded_todoproperties_portalcreateproperties_tier1reasons AS exploded_todoproperties_portalcreateproperties_tier1reasons 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`toDoProperties`.`portalCreateProperties`.`tier1Reasons`) view_removed_exploded_todoproperties_portalcreateproperties_tier1reasons AS removed_exploded_todoproperties_portalcreateproperties_tier1reasons 
 LATERAL VIEW OUTER EXPLODE(`toDoProperties`.`portalCreateProperties`.`tier2Reasons`) view_exploded_todoproperties_portalcreateproperties_tier2reasons AS exploded_todoproperties_portalcreateproperties_tier2reasons 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`toDoProperties`.`portalCreateProperties`.`tier2Reasons`) view_removed_exploded_todoproperties_portalcreateproperties_tier2reasons AS removed_exploded_todoproperties_portalcreateproperties_tier2reasons 
 
 where `_removed`.`toDoProperties`.`type`='APA_CREATE' or `toDoProperties`.`type`='APA_CREATE';


!echo ------------------------;
!echo ------------------------ agent_todo_DIFFERENCE_BETWEEN_CALCULATION_AND_PAYMENTS;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_difference_between_calculation_and_payments
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_difference_between_calculation_and_payments(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`effectiveDate`:STRING
,`retrospectiveCalculationCorrelationId`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`effectiveDate`:STRING
,`retrospectiveCalculationCorrelationId`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_DIFFERENCE_BETWEEN_CALCULATION_AND_PAYMENTS;

CREATE TABLE agent_todo_difference_between_calculation_and_payments STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`effectiveDate`, `toDoProperties`.`effectiveDate`) as toDoProperties_effectiveDate, 
COALESCE(`_removed`.`toDoProperties`.`retrospectiveCalculationCorrelationId`, `toDoProperties`.`retrospectiveCalculationCorrelationId`) as toDoProperties_retrospectiveCalculationCorrelationId, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_difference_between_calculation_and_payments
 src_agent_core_agenttodo_agent_todo_difference_between_calculation_and_payments 
 where `_removed`.`toDoProperties`.`type`='DIFFERENCE_BETWEEN_CALCULATION_AND_PAYMENTS' or `toDoProperties`.`type`='DIFFERENCE_BETWEEN_CALCULATION_AND_PAYMENTS';


!echo ------------------------;
!echo ------------------------ journal_CarerStoppedSummaryJournalEntry;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_journal_journal_carerstoppedsummaryjournalentry
;

CREATE EXTERNAL TABLE src_core_journal_journal_carerstoppedsummaryjournalentry(
`journalEntryProperties` STRUCT<`stoppedCaringCircumstancesSummary`:STRUCT<`dateStoppedCaring`:STRING
,`dueToDeath`:BOOLEAN>
,`whoYouCareForCircumstancesSummary`:STRUCT<`addressNumber`:STRING
,`dateOfBirth`:STRING
,`firstName`:STRING
,`lastName`:STRING
,`middleName`:STRING
,`postcode`:STRING
,`relationship`:STRING
,`townCity`:STRING>
,`name`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`journalId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`journalEntryProperties`:STRUCT<`stoppedCaringCircumstancesSummary`:STRUCT<`dateStoppedCaring`:STRING
,`dueToDeath`:BOOLEAN>
,`whoYouCareForCircumstancesSummary`:STRUCT<`addressNumber`:STRING
,`dateOfBirth`:STRING
,`firstName`:STRING
,`lastName`:STRING
,`middleName`:STRING
,`postcode`:STRING
,`relationship`:STRING
,`townCity`:STRING>
,`name`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`journalId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/journal';

DROP TABLE IF EXISTS journal_CarerStoppedSummaryJournalEntry;

CREATE TABLE journal_carerstoppedsummaryjournalentry STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`journalEntryProperties`.`name`, `journalEntryProperties`.`name`) as journalEntryProperties_name, 
COALESCE(`_removed`.`journalEntryProperties`.`stoppedCaringCircumstancesSummary`.`dateStoppedCaring`, `journalEntryProperties`.`stoppedCaringCircumstancesSummary`.`dateStoppedCaring`) as journalEntryProperties_stoppedCaringCircumstancesSummary_dateStoppedCaring, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`stoppedCaringCircumstancesSummary`.`dueToDeath` as STRING), CAST(`journalEntryProperties`.`stoppedCaringCircumstancesSummary`.`dueToDeath` as STRING)) as journalEntryProperties_stoppedCaringCircumstancesSummary_dueToDeath, 
COALESCE(`_removed`.`journalEntryProperties`.`whoYouCareForCircumstancesSummary`.`addressNumber`, `journalEntryProperties`.`whoYouCareForCircumstancesSummary`.`addressNumber`) as journalEntryProperties_whoYouCareForCircumstancesSummary_addressNumber, 
COALESCE(`_removed`.`journalEntryProperties`.`whoYouCareForCircumstancesSummary`.`dateOfBirth`, `journalEntryProperties`.`whoYouCareForCircumstancesSummary`.`dateOfBirth`) as journalEntryProperties_whoYouCareForCircumstancesSummary_dateOfBirth, 
COALESCE(`_removed`.`journalEntryProperties`.`whoYouCareForCircumstancesSummary`.`firstName`, `journalEntryProperties`.`whoYouCareForCircumstancesSummary`.`firstName`) as journalEntryProperties_whoYouCareForCircumstancesSummary_firstName, 
COALESCE(`_removed`.`journalEntryProperties`.`whoYouCareForCircumstancesSummary`.`lastName`, `journalEntryProperties`.`whoYouCareForCircumstancesSummary`.`lastName`) as journalEntryProperties_whoYouCareForCircumstancesSummary_lastName, 
COALESCE(`_removed`.`journalEntryProperties`.`whoYouCareForCircumstancesSummary`.`middleName`, `journalEntryProperties`.`whoYouCareForCircumstancesSummary`.`middleName`) as journalEntryProperties_whoYouCareForCircumstancesSummary_middleName, 
COALESCE(`_removed`.`journalEntryProperties`.`whoYouCareForCircumstancesSummary`.`postcode`, `journalEntryProperties`.`whoYouCareForCircumstancesSummary`.`postcode`) as journalEntryProperties_whoYouCareForCircumstancesSummary_postcode, 
COALESCE(`_removed`.`journalEntryProperties`.`whoYouCareForCircumstancesSummary`.`relationship`, `journalEntryProperties`.`whoYouCareForCircumstancesSummary`.`relationship`) as journalEntryProperties_whoYouCareForCircumstancesSummary_relationship, 
COALESCE(`_removed`.`journalEntryProperties`.`whoYouCareForCircumstancesSummary`.`townCity`, `journalEntryProperties`.`whoYouCareForCircumstancesSummary`.`townCity`) as journalEntryProperties_whoYouCareForCircumstancesSummary_townCity, 
COALESCE(`_removed`.`journalEntryProperties`.`type`, `journalEntryProperties`.`type`) as journalEntryProperties_type, 
COALESCE(`_removed`.`_id`.`journalId`, `_id`.`journalId`) as id FROM src_core_journal_journal_carerstoppedsummaryjournalentry
 src_core_journal_journal_carerstoppedsummaryjournalentry 
 where `_removed`.`journalEntryProperties`.`type`='CarerStoppedSummaryJournalEntry' or `journalEntryProperties`.`type`='CarerStoppedSummaryJournalEntry';


!echo ------------------------;
!echo ------------------------ agent_todo_APA_CHECK_LANDLORD;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_apa_check_landlord
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_apa_check_landlord(
`toDoProperties` STRUCT<`currentLandlordDetails`:STRUCT<`addressNumber`:STRING
,`email`:STRING
,`name`:STRING
,`payRentTo`:STRING
,`phoneNumber`:STRING
,`postcode`:STRING
,`townCity`:STRING>
,`previousLandlordDetails`:STRUCT<`addressNumber`:STRING
,`email`:STRING
,`name`:STRING
,`payRentTo`:STRING
,`phoneNumber`:STRING
,`postcode`:STRING
,`townCity`:STRING>
,`landlordApaEmailAddress`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`currentLandlordDetails`:STRUCT<`addressNumber`:STRING
,`email`:STRING
,`name`:STRING
,`payRentTo`:STRING
,`phoneNumber`:STRING
,`postcode`:STRING
,`townCity`:STRING>
,`previousLandlordDetails`:STRUCT<`addressNumber`:STRING
,`email`:STRING
,`name`:STRING
,`payRentTo`:STRING
,`phoneNumber`:STRING
,`postcode`:STRING
,`townCity`:STRING>
,`landlordApaEmailAddress`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_APA_CHECK_LANDLORD;

CREATE TABLE agent_todo_apa_check_landlord STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`currentLandlordDetails`.`addressNumber`, `toDoProperties`.`currentLandlordDetails`.`addressNumber`) as toDoProperties_currentLandlordDetails_addressNumber, 
COALESCE(`_removed`.`toDoProperties`.`currentLandlordDetails`.`email`, `toDoProperties`.`currentLandlordDetails`.`email`) as toDoProperties_currentLandlordDetails_email, 
COALESCE(`_removed`.`toDoProperties`.`currentLandlordDetails`.`name`, `toDoProperties`.`currentLandlordDetails`.`name`) as toDoProperties_currentLandlordDetails_name, 
COALESCE(`_removed`.`toDoProperties`.`currentLandlordDetails`.`payRentTo`, `toDoProperties`.`currentLandlordDetails`.`payRentTo`) as toDoProperties_currentLandlordDetails_payRentTo, 
COALESCE(`_removed`.`toDoProperties`.`currentLandlordDetails`.`phoneNumber`, `toDoProperties`.`currentLandlordDetails`.`phoneNumber`) as toDoProperties_currentLandlordDetails_phoneNumber, 
COALESCE(`_removed`.`toDoProperties`.`currentLandlordDetails`.`postcode`, `toDoProperties`.`currentLandlordDetails`.`postcode`) as toDoProperties_currentLandlordDetails_postcode, 
COALESCE(`_removed`.`toDoProperties`.`currentLandlordDetails`.`townCity`, `toDoProperties`.`currentLandlordDetails`.`townCity`) as toDoProperties_currentLandlordDetails_townCity, 
COALESCE(`_removed`.`toDoProperties`.`landlordApaEmailAddress`, `toDoProperties`.`landlordApaEmailAddress`) as toDoProperties_landlordApaEmailAddress, 
COALESCE(`_removed`.`toDoProperties`.`previousLandlordDetails`.`addressNumber`, `toDoProperties`.`previousLandlordDetails`.`addressNumber`) as toDoProperties_previousLandlordDetails_addressNumber, 
COALESCE(`_removed`.`toDoProperties`.`previousLandlordDetails`.`email`, `toDoProperties`.`previousLandlordDetails`.`email`) as toDoProperties_previousLandlordDetails_email, 
COALESCE(`_removed`.`toDoProperties`.`previousLandlordDetails`.`name`, `toDoProperties`.`previousLandlordDetails`.`name`) as toDoProperties_previousLandlordDetails_name, 
COALESCE(`_removed`.`toDoProperties`.`previousLandlordDetails`.`payRentTo`, `toDoProperties`.`previousLandlordDetails`.`payRentTo`) as toDoProperties_previousLandlordDetails_payRentTo, 
COALESCE(`_removed`.`toDoProperties`.`previousLandlordDetails`.`phoneNumber`, `toDoProperties`.`previousLandlordDetails`.`phoneNumber`) as toDoProperties_previousLandlordDetails_phoneNumber, 
COALESCE(`_removed`.`toDoProperties`.`previousLandlordDetails`.`postcode`, `toDoProperties`.`previousLandlordDetails`.`postcode`) as toDoProperties_previousLandlordDetails_postcode, 
COALESCE(`_removed`.`toDoProperties`.`previousLandlordDetails`.`townCity`, `toDoProperties`.`previousLandlordDetails`.`townCity`) as toDoProperties_previousLandlordDetails_townCity, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_apa_check_landlord
 src_agent_core_agenttodo_agent_todo_apa_check_landlord 
 where `_removed`.`toDoProperties`.`type`='APA_CHECK_LANDLORD' or `toDoProperties`.`type`='APA_CHECK_LANDLORD';


!echo ------------------------;
!echo ------------------------ agent_todo_GATHER_EVIDENCE_FOR_WAITING_DAYS;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_gather_evidence_for_waiting_days
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_gather_evidence_for_waiting_days(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`evidenceDueDate`:STRING
,`evidenceRequestedDate`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`evidenceDueDate`:STRING
,`evidenceRequestedDate`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_GATHER_EVIDENCE_FOR_WAITING_DAYS;

CREATE TABLE agent_todo_gather_evidence_for_waiting_days STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`evidenceDueDate`, `toDoProperties`.`evidenceDueDate`) as toDoProperties_evidenceDueDate, 
COALESCE(`_removed`.`toDoProperties`.`evidenceRequestedDate`, `toDoProperties`.`evidenceRequestedDate`) as toDoProperties_evidenceRequestedDate, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_gather_evidence_for_waiting_days
 src_agent_core_agenttodo_agent_todo_gather_evidence_for_waiting_days 
 where `_removed`.`toDoProperties`.`type`='GATHER_EVIDENCE_FOR_WAITING_DAYS' or `toDoProperties`.`type`='GATHER_EVIDENCE_FOR_WAITING_DAYS';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_MAKE_A_DECISION_ALP_TO_DO_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_make_a_decision_alp_to_do_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_make_a_decision_alp_to_do_properties(
`toDoProperties` STRUCT<`attachmentSummary`:STRUCT<`updatedAt`:STRUCT<`d_date`:STRING>
,`fileName`:STRING
,`fileSize`:STRING
,`id`:STRING
,`revision`:STRING
,`updatedBy`:STRING>
,`alpFormType`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`attachmentSummary`:STRUCT<`updatedAt`:STRUCT<`d_date`:STRING>
,`fileName`:STRING
,`fileSize`:STRING
,`id`:STRING
,`revision`:STRING
,`updatedBy`:STRING>
,`alpFormType`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_MAKE_A_DECISION_ALP_TO_DO_PROPERTIES;

CREATE TABLE agent_todo_archive_make_a_decision_alp_to_do_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`alpFormType`, `toDoProperties`.`alpFormType`) as toDoProperties_alpFormType, 
COALESCE(`_removed`.`toDoProperties`.`attachmentSummary`.`fileName`, `toDoProperties`.`attachmentSummary`.`fileName`) as toDoProperties_attachmentSummary_fileName, 
COALESCE(`_removed`.`toDoProperties`.`attachmentSummary`.`fileSize`, `toDoProperties`.`attachmentSummary`.`fileSize`) as toDoProperties_attachmentSummary_fileSize, 
COALESCE(`_removed`.`toDoProperties`.`attachmentSummary`.`id`, `toDoProperties`.`attachmentSummary`.`id`) as toDoProperties_attachmentSummary_id, 
COALESCE(`_removed`.`toDoProperties`.`attachmentSummary`.`revision`, `toDoProperties`.`attachmentSummary`.`revision`) as toDoProperties_attachmentSummary_revision, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, LENGTH(`_removed`.`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, LENGTH(`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 21, 3)) AS TIMESTAMP) END) as toDoProperties_attachmentSummary_updatedAt_d_date, 
COALESCE(`_removed`.`toDoProperties`.`attachmentSummary`.`updatedBy`, `toDoProperties`.`attachmentSummary`.`updatedBy`) as toDoProperties_attachmentSummary_updatedBy, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_make_a_decision_alp_to_do_properties
 src_agent_core_agenttodoarchive_agent_todo_archive_make_a_decision_alp_to_do_properties 
 where `_removed`.`toDoProperties`.`type`='MAKE_A_DECISION_ALP_TO_DO_PROPERTIES' or `toDoProperties`.`type`='MAKE_A_DECISION_ALP_TO_DO_PROPERTIES';


!echo ------------------------;
!echo ------------------------ agent_todo_REVIEW_CLAIMANT_UPLOAD_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_review_claimant_upload_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_review_claimant_upload_properties(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`claimantUploadDetailsId`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`claimantUploadDetailsId`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_REVIEW_CLAIMANT_UPLOAD_PROPERTIES;

CREATE TABLE agent_todo_review_claimant_upload_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`claimantUploadDetailsId`, `toDoProperties`.`claimantUploadDetailsId`) as toDoProperties_claimantUploadDetailsId, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_review_claimant_upload_properties
 src_agent_core_agenttodo_agent_todo_review_claimant_upload_properties 
 where `_removed`.`toDoProperties`.`type`='REVIEW_CLAIMANT_UPLOAD_PROPERTIES' or `toDoProperties`.`type`='REVIEW_CLAIMANT_UPLOAD_PROPERTIES';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_INTERVENTION_REVIEW;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_intervention_review
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_intervention_review(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`interventionRef`:STRING
,`interventionType`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`interventionRef`:STRING
,`interventionType`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_INTERVENTION_REVIEW;

CREATE TABLE agent_todo_archive_intervention_review STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`interventionRef`, `toDoProperties`.`interventionRef`) as toDoProperties_interventionRef, 
COALESCE(`_removed`.`toDoProperties`.`interventionType`, `toDoProperties`.`interventionType`) as toDoProperties_interventionType, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_intervention_review
 src_agent_core_agenttodoarchive_agent_todo_archive_intervention_review 
 where `_removed`.`toDoProperties`.`type`='INTERVENTION_REVIEW' or `toDoProperties`.`type`='INTERVENTION_REVIEW';


!echo ------------------------;
!echo ------------------------ todo_PROVIDE_FURTHER_PROOF_OF_YOUR_CHILDCARE_COSTS;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_todo_todo_provide_further_proof_of_your_childcare_costs
;

CREATE EXTERNAL TABLE src_core_todo_todo_provide_further_proof_of_your_childcare_costs(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`properties` STRUCT<`claimantUploadDetailsId`:STRING
,`declarationId`:STRING
,`message`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`properties`:STRUCT<`claimantUploadDetailsId`:STRING
,`declarationId`:STRING
,`message`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/toDo';

DROP TABLE IF EXISTS todo_PROVIDE_FURTHER_PROOF_OF_YOUR_CHILDCARE_COSTS;

CREATE TABLE todo_provide_further_proof_of_your_childcare_costs STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`properties`.`claimantUploadDetailsId`, `properties`.`claimantUploadDetailsId`) as properties_claimantUploadDetailsId, 
COALESCE(`_removed`.`properties`.`declarationId`, `properties`.`declarationId`) as properties_declarationId, 
COALESCE(`_removed`.`properties`.`message`, `properties`.`message`) as properties_message, 
COALESCE(`_removed`.`properties`.`type`, `properties`.`type`) as properties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_core_todo_todo_provide_further_proof_of_your_childcare_costs
 src_core_todo_todo_provide_further_proof_of_your_childcare_costs 
 where `_removed`.`properties`.`type`='PROVIDE_FURTHER_PROOF_OF_YOUR_CHILDCARE_COSTS' or `properties`.`type`='PROVIDE_FURTHER_PROOF_OF_YOUR_CHILDCARE_COSTS';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_CONFIRM_BENEFIT_DETAILS;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_confirm_benefit_details
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_confirm_benefit_details(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`adjustedAmount`:STRING
,`awardType`:STRING
,`benefitNotificationType`:STRING
,`claimantNino`:STRING
,`clericalInterest`:BOOLEAN
,`endDate`:STRING
,`frequency`:STRING
,`frequencyInvalid`:BOOLEAN
,`officeDescription`:STRING
,`officeTypeDescription`:STRING
,`startDate`:STRING
,`officeContactNumber`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`adjustedAmount`:STRING
,`awardType`:STRING
,`benefitNotificationType`:STRING
,`claimantNino`:STRING
,`clericalInterest`:BOOLEAN
,`endDate`:STRING
,`frequency`:STRING
,`frequencyInvalid`:BOOLEAN
,`officeDescription`:STRING
,`officeTypeDescription`:STRING
,`startDate`:STRING
,`officeContactNumber`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_CONFIRM_BENEFIT_DETAILS;

CREATE TABLE agent_todo_archive_confirm_benefit_details STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`adjustedAmount`, `toDoProperties`.`adjustedAmount`) as toDoProperties_adjustedAmount, 
COALESCE(`_removed`.`toDoProperties`.`awardType`, `toDoProperties`.`awardType`) as toDoProperties_awardType, 
COALESCE(`_removed`.`toDoProperties`.`benefitNotificationType`, `toDoProperties`.`benefitNotificationType`) as toDoProperties_benefitNotificationType, 
COALESCE(`_removed`.`toDoProperties`.`claimantNino`, `toDoProperties`.`claimantNino`) as toDoProperties_claimantNino, 
COALESCE(CAST(`_removed`.`toDoProperties`.`clericalInterest` as STRING), CAST(`toDoProperties`.`clericalInterest` as STRING)) as toDoProperties_clericalInterest, 
COALESCE(`_removed`.`toDoProperties`.`endDate`, `toDoProperties`.`endDate`) as toDoProperties_endDate, 
COALESCE(`_removed`.`toDoProperties`.`frequency`, `toDoProperties`.`frequency`) as toDoProperties_frequency, 
COALESCE(CAST(`_removed`.`toDoProperties`.`frequencyInvalid` as STRING), CAST(`toDoProperties`.`frequencyInvalid` as STRING)) as toDoProperties_frequencyInvalid, 
COALESCE(`_removed`.`toDoProperties`.`officeDescription`, `toDoProperties`.`officeDescription`) as toDoProperties_officeDescription, 
COALESCE(`_removed`.`toDoProperties`.`officeTypeDescription`, `toDoProperties`.`officeTypeDescription`) as toDoProperties_officeTypeDescription, 
COALESCE(`_removed`.`toDoProperties`.`startDate`, `toDoProperties`.`startDate`) as toDoProperties_startDate, 
COALESCE(`_removed`.`toDoProperties`.`officeContactNumber`, `toDoProperties`.`officeContactNumber`) as toDoProperties_officeContactNumber, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_confirm_benefit_details
 src_agent_core_agenttodoarchive_agent_todo_archive_confirm_benefit_details 
 where `_removed`.`toDoProperties`.`type`='CONFIRM_BENEFIT_DETAILS' or `toDoProperties`.`type`='CONFIRM_BENEFIT_DETAILS';


!echo ------------------------;
!echo ------------------------ todo_PROVIDE_PROOF_OF_YOUR_CHILDCARE_COSTS;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_todo_todo_provide_proof_of_your_childcare_costs
;

CREATE EXTERNAL TABLE src_core_todo_todo_provide_proof_of_your_childcare_costs(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`properties` STRUCT<`childcareProviderClaimantUploadDetailsId`:STRING
,`claimantUploadDetailsId`:STRING
,`declarationId`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`properties`:STRUCT<`childcareProviderClaimantUploadDetailsId`:STRING
,`claimantUploadDetailsId`:STRING
,`declarationId`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/toDo';

DROP TABLE IF EXISTS todo_PROVIDE_PROOF_OF_YOUR_CHILDCARE_COSTS;

CREATE TABLE todo_provide_proof_of_your_childcare_costs STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`properties`.`childcareProviderClaimantUploadDetailsId`, `properties`.`childcareProviderClaimantUploadDetailsId`) as properties_childcareProviderClaimantUploadDetailsId, 
COALESCE(`_removed`.`properties`.`claimantUploadDetailsId`, `properties`.`claimantUploadDetailsId`) as properties_claimantUploadDetailsId, 
COALESCE(`_removed`.`properties`.`declarationId`, `properties`.`declarationId`) as properties_declarationId, 
COALESCE(`_removed`.`properties`.`type`, `properties`.`type`) as properties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_core_todo_todo_provide_proof_of_your_childcare_costs
 src_core_todo_todo_provide_proof_of_your_childcare_costs 
 where `_removed`.`properties`.`type`='PROVIDE_PROOF_OF_YOUR_CHILDCARE_COSTS' or `properties`.`type`='PROVIDE_PROOF_OF_YOUR_CHILDCARE_COSTS';


!echo ------------------------;
!echo ------------------------ journal_FlexMoreFrequentPaymentsAgentToDoJournalEntry;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_journal_journal_flexmorefrequentpaymentsagenttodojournalentry
;

CREATE EXTERNAL TABLE src_core_journal_journal_flexmorefrequentpaymentsagenttodojournalentry(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`journalEntryProperties` STRUCT<`moreFrequentPaymentsStarted`:BOOLEAN
,`paymentDate`:STRING
,`type`:STRING>
,`_id` STRUCT<`journalId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`journalEntryProperties`:STRUCT<`moreFrequentPaymentsStarted`:BOOLEAN
,`paymentDate`:STRING
,`type`:STRING>
,`_id`:STRUCT<`journalId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/journal';

DROP TABLE IF EXISTS journal_FlexMoreFrequentPaymentsAgentToDoJournalEntry;

CREATE TABLE journal_flexmorefrequentpaymentsagenttodojournalentry STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`moreFrequentPaymentsStarted` as STRING), CAST(`journalEntryProperties`.`moreFrequentPaymentsStarted` as STRING)) as journalEntryProperties_moreFrequentPaymentsStarted, 
COALESCE(`_removed`.`journalEntryProperties`.`paymentDate`, `journalEntryProperties`.`paymentDate`) as journalEntryProperties_paymentDate, 
COALESCE(`_removed`.`journalEntryProperties`.`type`, `journalEntryProperties`.`type`) as journalEntryProperties_type, 
COALESCE(`_removed`.`_id`.`journalId`, `_id`.`journalId`) as id FROM src_core_journal_journal_flexmorefrequentpaymentsagenttodojournalentry
 src_core_journal_journal_flexmorefrequentpaymentsagenttodojournalentry 
 where `_removed`.`journalEntryProperties`.`type`='FlexMoreFrequentPaymentsAgentToDoJournalEntry' or `journalEntryProperties`.`type`='FlexMoreFrequentPaymentsAgentToDoJournalEntry';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_CALL_TERMINALLY_ILL_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_call_terminally_ill_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_call_terminally_ill_properties(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`healthAndDisabilityDeclarationId`:STRING
,`startDate`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`healthAndDisabilityDeclarationId`:STRING
,`startDate`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_CALL_TERMINALLY_ILL_PROPERTIES;

CREATE TABLE agent_todo_archive_call_terminally_ill_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`healthAndDisabilityDeclarationId`, `toDoProperties`.`healthAndDisabilityDeclarationId`) as toDoProperties_healthAndDisabilityDeclarationId, 
COALESCE(`_removed`.`toDoProperties`.`startDate`, `toDoProperties`.`startDate`) as toDoProperties_startDate, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_call_terminally_ill_properties
 src_agent_core_agenttodoarchive_agent_todo_archive_call_terminally_ill_properties 
 where `_removed`.`toDoProperties`.`type`='CALL_TERMINALLY_ILL_PROPERTIES' or `toDoProperties`.`type`='CALL_TERMINALLY_ILL_PROPERTIES';


!echo ------------------------;
!echo ------------------------ agent_todo_CHECK_CALCULATION_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_check_calculation_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_check_calculation_properties(
`toDoProperties` STRUCT<`untrustedAutoCalcReasons`:ARRAY<STRING>
,`assessmentPeriodId`:STRING
,`calculationId`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`untrustedAutoCalcReasons`:ARRAY<STRING>
,`assessmentPeriodId`:STRING
,`calculationId`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_CHECK_CALCULATION_PROPERTIES;

CREATE TABLE agent_todo_check_calculation_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`assessmentPeriodId`, `toDoProperties`.`assessmentPeriodId`) as toDoProperties_assessmentPeriodId, 
COALESCE(`removed_exploded_todoproperties_untrustedautocalcreasons`, `exploded_todoproperties_untrustedautocalcreasons`) as toDoProperties_untrustedAutoCalcReasons, 
COALESCE(`_removed`.`toDoProperties`.`calculationId`, `toDoProperties`.`calculationId`) as toDoProperties_calculationId, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_check_calculation_properties
 LATERAL VIEW OUTER EXPLODE(`toDoProperties`.`untrustedAutoCalcReasons`) view_exploded_todoproperties_untrustedautocalcreasons AS exploded_todoproperties_untrustedautocalcreasons 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`toDoProperties`.`untrustedAutoCalcReasons`) view_removed_exploded_todoproperties_untrustedautocalcreasons AS removed_exploded_todoproperties_untrustedautocalcreasons 
 
 where `_removed`.`toDoProperties`.`type`='CHECK_CALCULATION_PROPERTIES' or `toDoProperties`.`type`='CHECK_CALCULATION_PROPERTIES';


!echo ------------------------;
!echo ------------------------ journal_FebruaryPaymentJournalEntry;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_journal_journal_februarypaymentjournalentry
;

CREATE EXTERNAL TABLE src_core_journal_journal_februarypaymentjournalentry(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`journalEntryProperties` STRUCT<`type`:STRING>
,`_id` STRUCT<`journalId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`journalEntryProperties`:STRUCT<`type`:STRING>
,`_id`:STRUCT<`journalId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/journal';

DROP TABLE IF EXISTS journal_FebruaryPaymentJournalEntry;

CREATE TABLE journal_februarypaymentjournalentry STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`journalEntryProperties`.`type`, `journalEntryProperties`.`type`) as journalEntryProperties_type, 
COALESCE(`_removed`.`_id`.`journalId`, `_id`.`journalId`) as id FROM src_core_journal_journal_februarypaymentjournalentry
 src_core_journal_journal_februarypaymentjournalentry 
 where `_removed`.`journalEntryProperties`.`type`='FebruaryPaymentJournalEntry' or `journalEntryProperties`.`type`='FebruaryPaymentJournalEntry';


!echo ------------------------;
!echo ------------------------ agent_todo_NOTIFY_EXISTING_BENEFIT_TO_DO_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_notify_existing_benefit_to_do_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_notify_existing_benefit_to_do_properties(
`toDoProperties` STRUCT<`existingBenefits`:ARRAY<STRUCT<`benefitName`:STRING
,`endDate`:STRING
,`officeContactNumber`:STRING
,`officeDescription`:STRING
,`officeTypeDescription`:STRING
,`source`:STRING
,`startDate`:STRING
>>
,`contractIsBackdating`:BOOLEAN
,`existingBenefitOrAwardGroup`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`existingBenefits`:ARRAY<STRUCT<`benefitName`:STRING
,`endDate`:STRING
,`officeContactNumber`:STRING
,`officeDescription`:STRING
,`officeTypeDescription`:STRING
,`source`:STRING
,`startDate`:STRING
>>
,`contractIsBackdating`:BOOLEAN
,`existingBenefitOrAwardGroup`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_NOTIFY_EXISTING_BENEFIT_TO_DO_PROPERTIES;

CREATE TABLE agent_todo_notify_existing_benefit_to_do_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(CAST(`_removed`.`toDoProperties`.`contractIsBackdating` as STRING), CAST(`toDoProperties`.`contractIsBackdating` as STRING)) as toDoProperties_contractIsBackdating, 
COALESCE(`_removed`.`toDoProperties`.`existingBenefitOrAwardGroup`, `toDoProperties`.`existingBenefitOrAwardGroup`) as toDoProperties_existingBenefitOrAwardGroup, 
COALESCE(`removed_exploded_todoproperties_existingbenefits`.`benefitName`, `exploded_todoproperties_existingbenefits`.`benefitName`) as toDoProperties_existingBenefits_benefitName, 
COALESCE(`removed_exploded_todoproperties_existingbenefits`.`endDate`, `exploded_todoproperties_existingbenefits`.`endDate`) as toDoProperties_existingBenefits_endDate, 
COALESCE(`removed_exploded_todoproperties_existingbenefits`.`officeContactNumber`, `exploded_todoproperties_existingbenefits`.`officeContactNumber`) as toDoProperties_existingBenefits_officeContactNumber, 
COALESCE(`removed_exploded_todoproperties_existingbenefits`.`officeDescription`, `exploded_todoproperties_existingbenefits`.`officeDescription`) as toDoProperties_existingBenefits_officeDescription, 
COALESCE(`removed_exploded_todoproperties_existingbenefits`.`officeTypeDescription`, `exploded_todoproperties_existingbenefits`.`officeTypeDescription`) as toDoProperties_existingBenefits_officeTypeDescription, 
COALESCE(`removed_exploded_todoproperties_existingbenefits`.`source`, `exploded_todoproperties_existingbenefits`.`source`) as toDoProperties_existingBenefits_source, 
COALESCE(`removed_exploded_todoproperties_existingbenefits`.`startDate`, `exploded_todoproperties_existingbenefits`.`startDate`) as toDoProperties_existingBenefits_startDate, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_notify_existing_benefit_to_do_properties
 LATERAL VIEW OUTER EXPLODE(`toDoProperties`.`existingBenefits`) view_exploded_todoproperties_existingbenefits AS exploded_todoproperties_existingbenefits 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`toDoProperties`.`existingBenefits`) view_removed_exploded_todoproperties_existingbenefits AS removed_exploded_todoproperties_existingbenefits 
 
 where `_removed`.`toDoProperties`.`type`='NOTIFY_EXISTING_BENEFIT_TO_DO_PROPERTIES' or `toDoProperties`.`type`='NOTIFY_EXISTING_BENEFIT_TO_DO_PROPERTIES';


!echo ------------------------;
!echo ------------------------ agent_todo_MAKE_AN_AUTO_CALCULATED_PAYMENT;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_make_an_auto_calculated_payment
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_make_an_auto_calculated_payment(
`toDoProperties` STRUCT<`schedulingProperties`:STRUCT<`amount`:STRING
,`netAmount`:STRING
,`orderNumber`:STRING
,`paymentDueDate`:STRING
,`scheduledPaymentsId`:STRING
,`totalPaymentCount`:STRING>
,`assessmentPeriodId`:STRING
,`automatedPaymentRejectionReason`:STRING
,`calculationId`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`schedulingProperties`:STRUCT<`amount`:STRING
,`netAmount`:STRING
,`orderNumber`:STRING
,`paymentDueDate`:STRING
,`scheduledPaymentsId`:STRING
,`totalPaymentCount`:STRING>
,`assessmentPeriodId`:STRING
,`automatedPaymentRejectionReason`:STRING
,`calculationId`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_MAKE_AN_AUTO_CALCULATED_PAYMENT;

CREATE TABLE agent_todo_make_an_auto_calculated_payment STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`assessmentPeriodId`, `toDoProperties`.`assessmentPeriodId`) as toDoProperties_assessmentPeriodId, 
COALESCE(`_removed`.`toDoProperties`.`automatedPaymentRejectionReason`, `toDoProperties`.`automatedPaymentRejectionReason`) as toDoProperties_automatedPaymentRejectionReason, 
COALESCE(`_removed`.`toDoProperties`.`calculationId`, `toDoProperties`.`calculationId`) as toDoProperties_calculationId, 
COALESCE(`_removed`.`toDoProperties`.`schedulingProperties`.`amount`, `toDoProperties`.`schedulingProperties`.`amount`) as toDoProperties_schedulingProperties_amount, 
COALESCE(`_removed`.`toDoProperties`.`schedulingProperties`.`netAmount`, `toDoProperties`.`schedulingProperties`.`netAmount`) as toDoProperties_schedulingProperties_netAmount, 
COALESCE(`_removed`.`toDoProperties`.`schedulingProperties`.`orderNumber`, `toDoProperties`.`schedulingProperties`.`orderNumber`) as toDoProperties_schedulingProperties_orderNumber, 
COALESCE(`_removed`.`toDoProperties`.`schedulingProperties`.`paymentDueDate`, `toDoProperties`.`schedulingProperties`.`paymentDueDate`) as toDoProperties_schedulingProperties_paymentDueDate, 
COALESCE(`_removed`.`toDoProperties`.`schedulingProperties`.`scheduledPaymentsId`, `toDoProperties`.`schedulingProperties`.`scheduledPaymentsId`) as toDoProperties_schedulingProperties_scheduledPaymentsId, 
COALESCE(`_removed`.`toDoProperties`.`schedulingProperties`.`totalPaymentCount`, `toDoProperties`.`schedulingProperties`.`totalPaymentCount`) as toDoProperties_schedulingProperties_totalPaymentCount, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_make_an_auto_calculated_payment
 src_agent_core_agenttodo_agent_todo_make_an_auto_calculated_payment 
 where `_removed`.`toDoProperties`.`type`='MAKE_AN_AUTO_CALCULATED_PAYMENT' or `toDoProperties`.`type`='MAKE_AN_AUTO_CALCULATED_PAYMENT';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_UPDATE_CIS_FROM_CIS_500_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_update_cis_from_cis_500_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_update_cis_from_cis_500_properties(
`toDoProperties` STRUCT<`cis500Document`:STRUCT<`updatedAt`:STRUCT<`d_date`:STRING>
,`fileName`:STRING
,`fileSize`:STRING
,`id`:STRING
,`revision`:STRING
,`updatedBy`:STRING>
,`triggerReason`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`cis500Document`:STRUCT<`updatedAt`:STRUCT<`d_date`:STRING>
,`fileName`:STRING
,`fileSize`:STRING
,`id`:STRING
,`revision`:STRING
,`updatedBy`:STRING>
,`triggerReason`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_UPDATE_CIS_FROM_CIS_500_PROPERTIES;

CREATE TABLE agent_todo_archive_update_cis_from_cis_500_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`cis500Document`.`fileName`, `toDoProperties`.`cis500Document`.`fileName`) as toDoProperties_cis500Document_fileName, 
COALESCE(`_removed`.`toDoProperties`.`cis500Document`.`fileSize`, `toDoProperties`.`cis500Document`.`fileSize`) as toDoProperties_cis500Document_fileSize, 
COALESCE(`_removed`.`toDoProperties`.`cis500Document`.`id`, `toDoProperties`.`cis500Document`.`id`) as toDoProperties_cis500Document_id, 
COALESCE(`_removed`.`toDoProperties`.`cis500Document`.`revision`, `toDoProperties`.`cis500Document`.`revision`) as toDoProperties_cis500Document_revision, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`toDoProperties`.`cis500Document`.`updatedAt`.`d_date`, LENGTH(`_removed`.`toDoProperties`.`cis500Document`.`updatedAt`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`cis500Document`.`updatedAt`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`cis500Document`.`updatedAt`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`cis500Document`.`updatedAt`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`cis500Document`.`updatedAt`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`toDoProperties`.`cis500Document`.`updatedAt`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`toDoProperties`.`cis500Document`.`updatedAt`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`toDoProperties`.`cis500Document`.`updatedAt`.`d_date`, LENGTH(`toDoProperties`.`cis500Document`.`updatedAt`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`toDoProperties`.`cis500Document`.`updatedAt`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`cis500Document`.`updatedAt`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`toDoProperties`.`cis500Document`.`updatedAt`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`cis500Document`.`updatedAt`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`toDoProperties`.`cis500Document`.`updatedAt`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`toDoProperties`.`cis500Document`.`updatedAt`.`d_date`, 21, 3)) AS TIMESTAMP) END) as toDoProperties_cis500Document_updatedAt_d_date, 
COALESCE(`_removed`.`toDoProperties`.`cis500Document`.`updatedBy`, `toDoProperties`.`cis500Document`.`updatedBy`) as toDoProperties_cis500Document_updatedBy, 
COALESCE(`_removed`.`toDoProperties`.`triggerReason`, `toDoProperties`.`triggerReason`) as toDoProperties_triggerReason, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_update_cis_from_cis_500_properties
 src_agent_core_agenttodoarchive_agent_todo_archive_update_cis_from_cis_500_properties 
 where `_removed`.`toDoProperties`.`type`='UPDATE_CIS_FROM_CIS_500_PROPERTIES' or `toDoProperties`.`type`='UPDATE_CIS_FROM_CIS_500_PROPERTIES';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_INVESTIGATE_CIS_INTEREST_ERROR;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_investigate_cis_interest_error
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_investigate_cis_interest_error(
`toDoProperties` STRUCT<`errors`:ARRAY<STRING>
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`errors`:ARRAY<STRING>
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_INVESTIGATE_CIS_INTEREST_ERROR;

CREATE TABLE agent_todo_archive_investigate_cis_interest_error STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`removed_exploded_todoproperties_errors`, `exploded_todoproperties_errors`) as toDoProperties_errors, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_investigate_cis_interest_error
 LATERAL VIEW OUTER EXPLODE(`toDoProperties`.`errors`) view_exploded_todoproperties_errors AS exploded_todoproperties_errors 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`toDoProperties`.`errors`) view_removed_exploded_todoproperties_errors AS removed_exploded_todoproperties_errors 
 
 where `_removed`.`toDoProperties`.`type`='INVESTIGATE_CIS_INTEREST_ERROR' or `toDoProperties`.`type`='INVESTIGATE_CIS_INTEREST_ERROR';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_INFORM_CLAIMANT_LENDER_END_SMI_TODO_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_inform_claimant_lender_end_smi_todo_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_inform_claimant_lender_end_smi_todo_properties(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`housingDeclarationId`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`housingDeclarationId`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_INFORM_CLAIMANT_LENDER_END_SMI_TODO_PROPERTIES;

CREATE TABLE agent_todo_archive_inform_claimant_lender_end_smi_todo_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`housingDeclarationId`, `toDoProperties`.`housingDeclarationId`) as toDoProperties_housingDeclarationId, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_inform_claimant_lender_end_smi_todo_properties
 src_agent_core_agenttodoarchive_agent_todo_archive_inform_claimant_lender_end_smi_todo_properties 
 where `_removed`.`toDoProperties`.`type`='INFORM_CLAIMANT_LENDER_END_SMI_TODO_PROPERTIES' or `toDoProperties`.`type`='INFORM_CLAIMANT_LENDER_END_SMI_TODO_PROPERTIES';


!echo ------------------------;
!echo ------------------------ journal_COMPLETED_ATTEND_APPOINTMENT_JOURNAL_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_journal_journal_completed_attend_appointment_journal_properties
;

CREATE EXTERNAL TABLE src_core_journal_journal_completed_attend_appointment_journal_properties(
`journalEntryProperties` STRUCT<`appointmentDateTime`:STRUCT<`d_date`:STRING>
,`appointmentChannel`:STRING
,`appointmentType`:STRING
,`consolidatedAppointmentType`:STRING
,`otherAppointmentName`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`journalId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`journalEntryProperties`:STRUCT<`appointmentDateTime`:STRUCT<`d_date`:STRING>
,`appointmentChannel`:STRING
,`appointmentType`:STRING
,`consolidatedAppointmentType`:STRING
,`otherAppointmentName`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`journalId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/journal';

DROP TABLE IF EXISTS journal_COMPLETED_ATTEND_APPOINTMENT_JOURNAL_PROPERTIES;

CREATE TABLE journal_completed_attend_appointment_journal_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`journalEntryProperties`.`appointmentChannel`, `journalEntryProperties`.`appointmentChannel`) as journalEntryProperties_appointmentChannel, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`journalEntryProperties`.`appointmentDateTime`.`d_date`, LENGTH(`_removed`.`journalEntryProperties`.`appointmentDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`journalEntryProperties`.`appointmentDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`journalEntryProperties`.`appointmentDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`journalEntryProperties`.`appointmentDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`journalEntryProperties`.`appointmentDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`journalEntryProperties`.`appointmentDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`journalEntryProperties`.`appointmentDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`journalEntryProperties`.`appointmentDateTime`.`d_date`, LENGTH(`journalEntryProperties`.`appointmentDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`journalEntryProperties`.`appointmentDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`journalEntryProperties`.`appointmentDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`journalEntryProperties`.`appointmentDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`journalEntryProperties`.`appointmentDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`journalEntryProperties`.`appointmentDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`journalEntryProperties`.`appointmentDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as journalEntryProperties_appointmentDateTime_d_date, 
COALESCE(`_removed`.`journalEntryProperties`.`appointmentType`, `journalEntryProperties`.`appointmentType`) as journalEntryProperties_appointmentType, 
COALESCE(`_removed`.`journalEntryProperties`.`consolidatedAppointmentType`, `journalEntryProperties`.`consolidatedAppointmentType`) as journalEntryProperties_consolidatedAppointmentType, 
COALESCE(`_removed`.`journalEntryProperties`.`otherAppointmentName`, `journalEntryProperties`.`otherAppointmentName`) as journalEntryProperties_otherAppointmentName, 
COALESCE(`_removed`.`journalEntryProperties`.`type`, `journalEntryProperties`.`type`) as journalEntryProperties_type, 
COALESCE(`_removed`.`_id`.`journalId`, `_id`.`journalId`) as id FROM src_core_journal_journal_completed_attend_appointment_journal_properties
 src_core_journal_journal_completed_attend_appointment_journal_properties 
 where `_removed`.`journalEntryProperties`.`type`='COMPLETED_ATTEND_APPOINTMENT_JOURNAL_PROPERTIES' or `journalEntryProperties`.`type`='COMPLETED_ATTEND_APPOINTMENT_JOURNAL_PROPERTIES';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_PERMITTED_PERIOD_EXPIRING_SOON;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_permitted_period_expiring_soon
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_permitted_period_expiring_soon(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`permittedPeriodExpiry`:STRING
,`permittedPeriodExpiryAsString`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`permittedPeriodExpiry`:STRING
,`permittedPeriodExpiryAsString`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_PERMITTED_PERIOD_EXPIRING_SOON;

CREATE TABLE agent_todo_archive_permitted_period_expiring_soon STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`permittedPeriodExpiry`, `toDoProperties`.`permittedPeriodExpiry`) as toDoProperties_permittedPeriodExpiry, 
COALESCE(`_removed`.`toDoProperties`.`permittedPeriodExpiryAsString`, `toDoProperties`.`permittedPeriodExpiryAsString`) as toDoProperties_permittedPeriodExpiryAsString, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_permitted_period_expiring_soon
 src_agent_core_agenttodoarchive_agent_todo_archive_permitted_period_expiring_soon 
 where `_removed`.`toDoProperties`.`type`='PERMITTED_PERIOD_EXPIRING_SOON' or `toDoProperties`.`type`='PERMITTED_PERIOD_EXPIRING_SOON';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_SCOTTISH_FLEX_DIRECT_PAYMENT_TO_LANDLORD;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_scottish_flex_direct_payment_to_landlord
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_scottish_flex_direct_payment_to_landlord(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`claimantToDoId`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`claimantToDoId`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_SCOTTISH_FLEX_DIRECT_PAYMENT_TO_LANDLORD;

CREATE TABLE agent_todo_archive_scottish_flex_direct_payment_to_landlord STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`claimantToDoId`, `toDoProperties`.`claimantToDoId`) as toDoProperties_claimantToDoId, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_scottish_flex_direct_payment_to_landlord
 src_agent_core_agenttodoarchive_agent_todo_archive_scottish_flex_direct_payment_to_landlord 
 where `_removed`.`toDoProperties`.`type`='SCOTTISH_FLEX_DIRECT_PAYMENT_TO_LANDLORD' or `toDoProperties`.`type`='SCOTTISH_FLEX_DIRECT_PAYMENT_TO_LANDLORD';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_CHECK_PREGNANCY_DETAILS_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_check_pregnancy_details_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_check_pregnancy_details_properties(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`dueDate`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`dueDate`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_CHECK_PREGNANCY_DETAILS_PROPERTIES;

CREATE TABLE agent_todo_archive_check_pregnancy_details_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`dueDate`, `toDoProperties`.`dueDate`) as toDoProperties_dueDate, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_check_pregnancy_details_properties
 src_agent_core_agenttodoarchive_agent_todo_archive_check_pregnancy_details_properties 
 where `_removed`.`toDoProperties`.`type`='CHECK_PREGNANCY_DETAILS_PROPERTIES' or `toDoProperties`.`type`='CHECK_PREGNANCY_DETAILS_PROPERTIES';


!echo ------------------------;
!echo ------------------------ todo_ATTEND_IN_PERSON_APPOINTMENT_TODO_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_todo_todo_attend_in_person_appointment_todo_properties
;

CREATE EXTERNAL TABLE src_core_todo_todo_attend_in_person_appointment_todo_properties(
`properties` STRUCT<`appointmentDateTime`:STRUCT<`d_date`:STRING>
,`addressId`:STRING
,`appointmentType`:STRING
,`claimantInstructions`:STRING
,`otherAppointmentName`:STRING
,`thirdPartyAppointmentReference`:STRING
,`workCoachAgentId`:STRING
,`workCoachAgentName`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`properties`:STRUCT<`appointmentDateTime`:STRUCT<`d_date`:STRING>
,`addressId`:STRING
,`appointmentType`:STRING
,`claimantInstructions`:STRING
,`otherAppointmentName`:STRING
,`thirdPartyAppointmentReference`:STRING
,`workCoachAgentId`:STRING
,`workCoachAgentName`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/toDo';

DROP TABLE IF EXISTS todo_ATTEND_IN_PERSON_APPOINTMENT_TODO_PROPERTIES;

CREATE TABLE todo_attend_in_person_appointment_todo_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`properties`.`addressId`, `properties`.`addressId`) as properties_addressId, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`properties`.`appointmentDateTime`.`d_date`, LENGTH(`_removed`.`properties`.`appointmentDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`properties`.`appointmentDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`properties`.`appointmentDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`properties`.`appointmentDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`properties`.`appointmentDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`properties`.`appointmentDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`properties`.`appointmentDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`properties`.`appointmentDateTime`.`d_date`, LENGTH(`properties`.`appointmentDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`properties`.`appointmentDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`properties`.`appointmentDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`properties`.`appointmentDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`properties`.`appointmentDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`properties`.`appointmentDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`properties`.`appointmentDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as properties_appointmentDateTime_d_date, 
COALESCE(`_removed`.`properties`.`appointmentType`, `properties`.`appointmentType`) as properties_appointmentType, 
COALESCE(`_removed`.`properties`.`claimantInstructions`, `properties`.`claimantInstructions`) as properties_claimantInstructions, 
COALESCE(`_removed`.`properties`.`otherAppointmentName`, `properties`.`otherAppointmentName`) as properties_otherAppointmentName, 
COALESCE(`_removed`.`properties`.`thirdPartyAppointmentReference`, `properties`.`thirdPartyAppointmentReference`) as properties_thirdPartyAppointmentReference, 
COALESCE(`_removed`.`properties`.`workCoachAgentId`, `properties`.`workCoachAgentId`) as properties_workCoachAgentId, 
COALESCE(`_removed`.`properties`.`workCoachAgentName`, `properties`.`workCoachAgentName`) as properties_workCoachAgentName, 
COALESCE(`_removed`.`properties`.`type`, `properties`.`type`) as properties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_core_todo_todo_attend_in_person_appointment_todo_properties
 src_core_todo_todo_attend_in_person_appointment_todo_properties 
 where `_removed`.`properties`.`type`='ATTEND_IN_PERSON_APPOINTMENT_TODO_PROPERTIES' or `properties`.`type`='ATTEND_IN_PERSON_APPOINTMENT_TODO_PROPERTIES';


!echo ------------------------;
!echo ------------------------ agent_todo_CHECK_CIS_FOR_CARERS_ALLOWANCE_TO_DO_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_check_cis_for_carers_allowance_to_do_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_check_cis_for_carers_allowance_to_do_properties(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`assessmentPeriodId`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`assessmentPeriodId`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_CHECK_CIS_FOR_CARERS_ALLOWANCE_TO_DO_PROPERTIES;

CREATE TABLE agent_todo_check_cis_for_carers_allowance_to_do_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`assessmentPeriodId`, `toDoProperties`.`assessmentPeriodId`) as toDoProperties_assessmentPeriodId, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_check_cis_for_carers_allowance_to_do_properties
 src_agent_core_agenttodo_agent_todo_check_cis_for_carers_allowance_to_do_properties 
 where `_removed`.`toDoProperties`.`type`='CHECK_CIS_FOR_CARERS_ALLOWANCE_TO_DO_PROPERTIES' or `toDoProperties`.`type`='CHECK_CIS_FOR_CARERS_ALLOWANCE_TO_DO_PROPERTIES';


!echo ------------------------;
!echo ------------------------ agent_todo_SELF_EMPLOYED_EARNINGS_TO_DO_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_self_employed_earnings_to_do_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_self_employed_earnings_to_do_properties(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`assessmentPeriodId`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`assessmentPeriodId`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_SELF_EMPLOYED_EARNINGS_TO_DO_PROPERTIES;

CREATE TABLE agent_todo_self_employed_earnings_to_do_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`assessmentPeriodId`, `toDoProperties`.`assessmentPeriodId`) as toDoProperties_assessmentPeriodId, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_self_employed_earnings_to_do_properties
 src_agent_core_agenttodo_agent_todo_self_employed_earnings_to_do_properties 
 where `_removed`.`toDoProperties`.`type`='SELF_EMPLOYED_EARNINGS_TO_DO_PROPERTIES' or `toDoProperties`.`type`='SELF_EMPLOYED_EARNINGS_TO_DO_PROPERTIES';


!echo ------------------------;
!echo ------------------------ journal_BankDetailsSummaryJournalEntry;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_journal_journal_bankdetailssummaryjournalentry
;

CREATE EXTERNAL TABLE src_core_journal_journal_bankdetailssummaryjournalentry(
`journalEntryProperties` STRUCT<`bankDetailsSummary`:STRUCT<`effectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`accountNumberLast4Digits`:STRING
,`contractId`:STRING
,`obfuscatedRollNumber`:STRING
,`processId`:STRING
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`journalId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`journalEntryProperties`:STRUCT<`bankDetailsSummary`:STRUCT<`effectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`accountNumberLast4Digits`:STRING
,`contractId`:STRING
,`obfuscatedRollNumber`:STRING
,`processId`:STRING
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`journalId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/journal';

DROP TABLE IF EXISTS journal_BankDetailsSummaryJournalEntry;

CREATE TABLE journal_bankdetailssummaryjournalentry STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`journalEntryProperties`.`bankDetailsSummary`.`accountNumberLast4Digits`, `journalEntryProperties`.`bankDetailsSummary`.`accountNumberLast4Digits`) as journalEntryProperties_bankDetailsSummary_accountNumberLast4Digits, 
COALESCE(`_removed`.`journalEntryProperties`.`bankDetailsSummary`.`contractId`, `journalEntryProperties`.`bankDetailsSummary`.`contractId`) as journalEntryProperties_bankDetailsSummary_contractId, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`bankDetailsSummary`.`effectiveDate`.`hasDate` as STRING), CAST(`journalEntryProperties`.`bankDetailsSummary`.`effectiveDate`.`hasDate` as STRING)) as journalEntryProperties_bankDetailsSummary_effectiveDate_hasDate, 
COALESCE(`_removed`.`journalEntryProperties`.`bankDetailsSummary`.`effectiveDate`.`knownDate`, `journalEntryProperties`.`bankDetailsSummary`.`effectiveDate`.`knownDate`) as journalEntryProperties_bankDetailsSummary_effectiveDate_knownDate, 
COALESCE(`_removed`.`journalEntryProperties`.`bankDetailsSummary`.`effectiveDate`.`type`, `journalEntryProperties`.`bankDetailsSummary`.`effectiveDate`.`type`) as journalEntryProperties_bankDetailsSummary_effectiveDate_type, 
COALESCE(`_removed`.`journalEntryProperties`.`bankDetailsSummary`.`effectiveDate`.`date`, `journalEntryProperties`.`bankDetailsSummary`.`effectiveDate`.`date`) as journalEntryProperties_bankDetailsSummary_effectiveDate_date, 
COALESCE(`_removed`.`journalEntryProperties`.`bankDetailsSummary`.`obfuscatedRollNumber`, `journalEntryProperties`.`bankDetailsSummary`.`obfuscatedRollNumber`) as journalEntryProperties_bankDetailsSummary_obfuscatedRollNumber, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`bankDetailsSummary`.`paymentEffectiveDate`.`hasDate` as STRING), CAST(`journalEntryProperties`.`bankDetailsSummary`.`paymentEffectiveDate`.`hasDate` as STRING)) as journalEntryProperties_bankDetailsSummary_paymentEffectiveDate_hasDate, 
COALESCE(`_removed`.`journalEntryProperties`.`bankDetailsSummary`.`paymentEffectiveDate`.`knownDate`, `journalEntryProperties`.`bankDetailsSummary`.`paymentEffectiveDate`.`knownDate`) as journalEntryProperties_bankDetailsSummary_paymentEffectiveDate_knownDate, 
COALESCE(`_removed`.`journalEntryProperties`.`bankDetailsSummary`.`paymentEffectiveDate`.`type`, `journalEntryProperties`.`bankDetailsSummary`.`paymentEffectiveDate`.`type`) as journalEntryProperties_bankDetailsSummary_paymentEffectiveDate_type, 
COALESCE(`_removed`.`journalEntryProperties`.`bankDetailsSummary`.`paymentEffectiveDate`.`date`, `journalEntryProperties`.`bankDetailsSummary`.`paymentEffectiveDate`.`date`) as journalEntryProperties_bankDetailsSummary_paymentEffectiveDate_date, 
COALESCE(`_removed`.`journalEntryProperties`.`bankDetailsSummary`.`processId`, `journalEntryProperties`.`bankDetailsSummary`.`processId`) as journalEntryProperties_bankDetailsSummary_processId, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`bankDetailsSummary`.`confirmationRequired` as STRING), CAST(`journalEntryProperties`.`bankDetailsSummary`.`confirmationRequired` as STRING)) as journalEntryProperties_bankDetailsSummary_confirmationRequired, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`bankDetailsSummary`.`hideDetailsForPartnerDeclaration` as STRING), CAST(`journalEntryProperties`.`bankDetailsSummary`.`hideDetailsForPartnerDeclaration` as STRING)) as journalEntryProperties_bankDetailsSummary_hideDetailsForPartnerDeclaration, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`bankDetailsSummary`.`perClaimant` as STRING), CAST(`journalEntryProperties`.`bankDetailsSummary`.`perClaimant` as STRING)) as journalEntryProperties_bankDetailsSummary_perClaimant, 
COALESCE(`_removed`.`journalEntryProperties`.`bankDetailsSummary`.`type`, `journalEntryProperties`.`bankDetailsSummary`.`type`) as journalEntryProperties_bankDetailsSummary_type, 
COALESCE(`_removed`.`journalEntryProperties`.`type`, `journalEntryProperties`.`type`) as journalEntryProperties_type, 
COALESCE(`_removed`.`_id`.`journalId`, `_id`.`journalId`) as id FROM src_core_journal_journal_bankdetailssummaryjournalentry
 src_core_journal_journal_bankdetailssummaryjournalentry 
 where `_removed`.`journalEntryProperties`.`type`='BankDetailsSummaryJournalEntry' or `journalEntryProperties`.`type`='BankDetailsSummaryJournalEntry';


!echo ------------------------;
!echo ------------------------ agent_todo_VERIFY_CHILDCARE;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_verify_childcare
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_verify_childcare(
`toDoProperties` STRUCT<`dateOfSummaryChange`:STRUCT<`d_date`:STRING>
,`claimantProvideProofToDoId`:STRING
,`declarationToVerifyId`:STRING
,`processId`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`dateOfSummaryChange`:STRUCT<`d_date`:STRING>
,`claimantProvideProofToDoId`:STRING
,`declarationToVerifyId`:STRING
,`processId`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_VERIFY_CHILDCARE;

CREATE TABLE agent_todo_verify_childcare STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`claimantProvideProofToDoId`, `toDoProperties`.`claimantProvideProofToDoId`) as toDoProperties_claimantProvideProofToDoId, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, LENGTH(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`toDoProperties`.`dateOfSummaryChange`.`d_date`, LENGTH(`toDoProperties`.`dateOfSummaryChange`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`toDoProperties`.`dateOfSummaryChange`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`dateOfSummaryChange`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`toDoProperties`.`dateOfSummaryChange`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`dateOfSummaryChange`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`toDoProperties`.`dateOfSummaryChange`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`toDoProperties`.`dateOfSummaryChange`.`d_date`, 21, 3)) AS TIMESTAMP) END) as toDoProperties_dateOfSummaryChange_d_date, 
COALESCE(`_removed`.`toDoProperties`.`declarationToVerifyId`, `toDoProperties`.`declarationToVerifyId`) as toDoProperties_declarationToVerifyId, 
COALESCE(`_removed`.`toDoProperties`.`processId`, `toDoProperties`.`processId`) as toDoProperties_processId, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_verify_childcare
 src_agent_core_agenttodo_agent_todo_verify_childcare 
 where `_removed`.`toDoProperties`.`type`='VERIFY_CHILDCARE' or `toDoProperties`.`type`='VERIFY_CHILDCARE';


!echo ------------------------;
!echo ------------------------ claimant_commitment_HIGH-V2;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_claimantcommitment_claimant_commitment_high_v2
;

CREATE EXTERNAL TABLE src_core_claimantcommitment_claimant_commitment_high_v2(
`properties` STRUCT<`activities`:ARRAY<STRUCT<`reviewDate`:STRING
,`shortDescription`:STRING
>>
,`jobs`:ARRAY<STRING>
,`customJobInterviewAvailability`:STRING
,`customStartWorkAvailability`:STRING
,`hoursToSpendLookingForWork`:STRING
,`travelToWorkMinutes`:STRING
,`wageAmount`:STRING
,`workHours`:STRING
,`workPaymentFrequency`:STRING
,`workPreparationAndSearchSwitchedOff`:BOOLEAN
,`workSectionSwitchedOff`:BOOLEAN
,`claimantCommitmentVersion`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`contractId`:STRING
,`claimantId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`properties`:STRUCT<`activities`:ARRAY<STRUCT<`reviewDate`:STRING
,`shortDescription`:STRING
>>
,`jobs`:ARRAY<STRING>
,`customJobInterviewAvailability`:STRING
,`customStartWorkAvailability`:STRING
,`hoursToSpendLookingForWork`:STRING
,`travelToWorkMinutes`:STRING
,`wageAmount`:STRING
,`workHours`:STRING
,`workPaymentFrequency`:STRING
,`workPreparationAndSearchSwitchedOff`:BOOLEAN
,`workSectionSwitchedOff`:BOOLEAN
,`claimantCommitmentVersion`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`contractId`:STRING
,`claimantId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/claimantCommitment';

DROP TABLE IF EXISTS claimant_commitment_HIGH-V2;

CREATE TABLE claimant_commitment_high_v2 STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`removed_exploded_properties_activities`.`reviewDate`, `exploded_properties_activities`.`reviewDate`) as properties_activities_reviewDate, 
COALESCE(`removed_exploded_properties_activities`.`shortDescription`, `exploded_properties_activities`.`shortDescription`) as properties_activities_shortDescription, 
COALESCE(`_removed`.`properties`.`customJobInterviewAvailability`, `properties`.`customJobInterviewAvailability`) as properties_customJobInterviewAvailability, 
COALESCE(`_removed`.`properties`.`customStartWorkAvailability`, `properties`.`customStartWorkAvailability`) as properties_customStartWorkAvailability, 
COALESCE(`_removed`.`properties`.`hoursToSpendLookingForWork`, `properties`.`hoursToSpendLookingForWork`) as properties_hoursToSpendLookingForWork, 
COALESCE(`removed_exploded_properties_jobs`, `exploded_properties_jobs`) as properties_jobs, 
COALESCE(`_removed`.`properties`.`travelToWorkMinutes`, `properties`.`travelToWorkMinutes`) as properties_travelToWorkMinutes, 
COALESCE(`_removed`.`properties`.`wageAmount`, `properties`.`wageAmount`) as properties_wageAmount, 
COALESCE(`_removed`.`properties`.`workHours`, `properties`.`workHours`) as properties_workHours, 
COALESCE(`_removed`.`properties`.`workPaymentFrequency`, `properties`.`workPaymentFrequency`) as properties_workPaymentFrequency, 
COALESCE(CAST(`_removed`.`properties`.`workPreparationAndSearchSwitchedOff` as STRING), CAST(`properties`.`workPreparationAndSearchSwitchedOff` as STRING)) as properties_workPreparationAndSearchSwitchedOff, 
COALESCE(CAST(`_removed`.`properties`.`workSectionSwitchedOff` as STRING), CAST(`properties`.`workSectionSwitchedOff` as STRING)) as properties_workSectionSwitchedOff, 
COALESCE(`_removed`.`properties`.`claimantCommitmentVersion`, `properties`.`claimantCommitmentVersion`) as properties_claimantCommitmentVersion, 
COALESCE(`_removed`.`properties`.`type`, `properties`.`type`) as properties_type, 
COALESCE(`_removed`.`_id`.`contractId`, `_id`.`contractId`) as contractId, 
COALESCE(`_removed`.`_id`.`claimantId`, `_id`.`claimantId`) as claimantId FROM src_core_claimantcommitment_claimant_commitment_high_v2
 LATERAL VIEW OUTER EXPLODE(`properties`.`activities`) view_exploded_properties_activities AS exploded_properties_activities 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`properties`.`activities`) view_removed_exploded_properties_activities AS removed_exploded_properties_activities 
 LATERAL VIEW OUTER EXPLODE(`properties`.`jobs`) view_exploded_properties_jobs AS exploded_properties_jobs 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`properties`.`jobs`) view_removed_exploded_properties_jobs AS removed_exploded_properties_jobs 
 
 where `_removed`.`properties`.`type`='HIGH-V2' or `properties`.`type`='HIGH-V2';


!echo ------------------------;
!echo ------------------------ journal_HealthAndDisabilitySummaryJournalEntry;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_journal_journal_healthanddisabilitysummaryjournalentry
;

CREATE EXTERNAL TABLE src_core_journal_journal_healthanddisabilitysummaryjournalentry(
`journalEntryProperties` STRUCT<`dateOfChange`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`healthAndDisabilitySummary`:STRUCT<`agentToCallTerminallyIllClaimant`:BOOLEAN
,`claimantId`:STRING
,`contractId`:STRING
,`copiedFromDeclarationId`:STRING
,`name`:STRING
,`partnerDeclaration`:BOOLEAN
,`processId`:STRING
,`reportingIllness`:BOOLEAN
,`restrictedAbilityToWork`:BOOLEAN
,`confirmationRequired`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`journalId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`journalEntryProperties`:STRUCT<`dateOfChange`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`healthAndDisabilitySummary`:STRUCT<`agentToCallTerminallyIllClaimant`:BOOLEAN
,`claimantId`:STRING
,`contractId`:STRING
,`copiedFromDeclarationId`:STRING
,`name`:STRING
,`partnerDeclaration`:BOOLEAN
,`processId`:STRING
,`reportingIllness`:BOOLEAN
,`restrictedAbilityToWork`:BOOLEAN
,`confirmationRequired`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`journalId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/journal';

DROP TABLE IF EXISTS journal_HealthAndDisabilitySummaryJournalEntry;

CREATE TABLE journal_healthanddisabilitysummaryjournalentry STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`dateOfChange`.`hasDate` as STRING), CAST(`journalEntryProperties`.`dateOfChange`.`hasDate` as STRING)) as journalEntryProperties_dateOfChange_hasDate, 
COALESCE(`_removed`.`journalEntryProperties`.`dateOfChange`.`knownDate`, `journalEntryProperties`.`dateOfChange`.`knownDate`) as journalEntryProperties_dateOfChange_knownDate, 
COALESCE(`_removed`.`journalEntryProperties`.`dateOfChange`.`type`, `journalEntryProperties`.`dateOfChange`.`type`) as journalEntryProperties_dateOfChange_type, 
COALESCE(`_removed`.`journalEntryProperties`.`dateOfChange`.`date`, `journalEntryProperties`.`dateOfChange`.`date`) as journalEntryProperties_dateOfChange_date, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`healthAndDisabilitySummary`.`agentToCallTerminallyIllClaimant` as STRING), CAST(`journalEntryProperties`.`healthAndDisabilitySummary`.`agentToCallTerminallyIllClaimant` as STRING)) as journalEntryProperties_healthAndDisabilitySummary_agentToCallTerminallyIllClaimant, 
COALESCE(`_removed`.`journalEntryProperties`.`healthAndDisabilitySummary`.`claimantId`, `journalEntryProperties`.`healthAndDisabilitySummary`.`claimantId`) as journalEntryProperties_healthAndDisabilitySummary_claimantId, 
COALESCE(`_removed`.`journalEntryProperties`.`healthAndDisabilitySummary`.`contractId`, `journalEntryProperties`.`healthAndDisabilitySummary`.`contractId`) as journalEntryProperties_healthAndDisabilitySummary_contractId, 
COALESCE(`_removed`.`journalEntryProperties`.`healthAndDisabilitySummary`.`copiedFromDeclarationId`, `journalEntryProperties`.`healthAndDisabilitySummary`.`copiedFromDeclarationId`) as journalEntryProperties_healthAndDisabilitySummary_copiedFromDeclarationId, 
COALESCE(`_removed`.`journalEntryProperties`.`healthAndDisabilitySummary`.`name`, `journalEntryProperties`.`healthAndDisabilitySummary`.`name`) as journalEntryProperties_healthAndDisabilitySummary_name, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`healthAndDisabilitySummary`.`partnerDeclaration` as STRING), CAST(`journalEntryProperties`.`healthAndDisabilitySummary`.`partnerDeclaration` as STRING)) as journalEntryProperties_healthAndDisabilitySummary_partnerDeclaration, 
COALESCE(`_removed`.`journalEntryProperties`.`healthAndDisabilitySummary`.`processId`, `journalEntryProperties`.`healthAndDisabilitySummary`.`processId`) as journalEntryProperties_healthAndDisabilitySummary_processId, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`healthAndDisabilitySummary`.`reportingIllness` as STRING), CAST(`journalEntryProperties`.`healthAndDisabilitySummary`.`reportingIllness` as STRING)) as journalEntryProperties_healthAndDisabilitySummary_reportingIllness, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`healthAndDisabilitySummary`.`restrictedAbilityToWork` as STRING), CAST(`journalEntryProperties`.`healthAndDisabilitySummary`.`restrictedAbilityToWork` as STRING)) as journalEntryProperties_healthAndDisabilitySummary_restrictedAbilityToWork, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`healthAndDisabilitySummary`.`confirmationRequired` as STRING), CAST(`journalEntryProperties`.`healthAndDisabilitySummary`.`confirmationRequired` as STRING)) as journalEntryProperties_healthAndDisabilitySummary_confirmationRequired, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`healthAndDisabilitySummary`.`perClaimant` as STRING), CAST(`journalEntryProperties`.`healthAndDisabilitySummary`.`perClaimant` as STRING)) as journalEntryProperties_healthAndDisabilitySummary_perClaimant, 
COALESCE(`_removed`.`journalEntryProperties`.`healthAndDisabilitySummary`.`type`, `journalEntryProperties`.`healthAndDisabilitySummary`.`type`) as journalEntryProperties_healthAndDisabilitySummary_type, 
COALESCE(`_removed`.`journalEntryProperties`.`type`, `journalEntryProperties`.`type`) as journalEntryProperties_type, 
COALESCE(`_removed`.`_id`.`journalId`, `_id`.`journalId`) as id FROM src_core_journal_journal_healthanddisabilitysummaryjournalentry
 src_core_journal_journal_healthanddisabilitysummaryjournalentry 
 where `_removed`.`journalEntryProperties`.`type`='HealthAndDisabilitySummaryJournalEntry' or `journalEntryProperties`.`type`='HealthAndDisabilitySummaryJournalEntry';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_GENERATE_STATEMENT;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_generate_statement
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_generate_statement(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`assessmentPeriodId`:STRING
,`calculationAttachmentId`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`assessmentPeriodId`:STRING
,`calculationAttachmentId`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_GENERATE_STATEMENT;

CREATE TABLE agent_todo_archive_generate_statement STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`assessmentPeriodId`, `toDoProperties`.`assessmentPeriodId`) as toDoProperties_assessmentPeriodId, 
COALESCE(`_removed`.`toDoProperties`.`calculationAttachmentId`, `toDoProperties`.`calculationAttachmentId`) as toDoProperties_calculationAttachmentId, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_generate_statement
 src_agent_core_agenttodoarchive_agent_todo_archive_generate_statement 
 where `_removed`.`toDoProperties`.`type`='GENERATE_STATEMENT' or `toDoProperties`.`type`='GENERATE_STATEMENT';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_PERSON_DETAILS_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_person_details_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_person_details_properties(
`toDoProperties` STRUCT<`personDetails`:STRUCT<`createdDateTime`:STRUCT<`d_date`:STRING>
,`effectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`_version`:STRING
,`citizenId`:STRING
,`contactPreference`:STRING
,`contractId`:STRING
,`declarationId`:STRING
,`email`:STRING
,`firstName`:STRING
,`gender`:STRING
,`lastName`:STRING
,`middleName`:STRING
,`mobileNumber`:STRING
,`processId`:STRING
,`sanitisedFirstName`:STRING
,`sanitisedLastName`:STRING
,`sanitisedMiddleName`:STRING
,`verifiedUsingBioQuestionsOrThirdParty`:BOOLEAN
,`verifiedWithNameDateOfBirthOrAddressChange`:BOOLEAN
,`type`:STRING>
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`personDetails`:STRUCT<`createdDateTime`:STRUCT<`d_date`:STRING>
,`effectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`_version`:STRING
,`citizenId`:STRING
,`contactPreference`:STRING
,`contractId`:STRING
,`declarationId`:STRING
,`email`:STRING
,`firstName`:STRING
,`gender`:STRING
,`lastName`:STRING
,`middleName`:STRING
,`mobileNumber`:STRING
,`processId`:STRING
,`sanitisedFirstName`:STRING
,`sanitisedLastName`:STRING
,`sanitisedMiddleName`:STRING
,`verifiedUsingBioQuestionsOrThirdParty`:BOOLEAN
,`verifiedWithNameDateOfBirthOrAddressChange`:BOOLEAN
,`type`:STRING>
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_PERSON_DETAILS_PROPERTIES;

CREATE TABLE agent_todo_archive_person_details_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`_version`, `toDoProperties`.`personDetails`.`_version`) as toDoProperties_personDetails__version, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`citizenId`, `toDoProperties`.`personDetails`.`citizenId`) as toDoProperties_personDetails_citizenId, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`contactPreference`, `toDoProperties`.`personDetails`.`contactPreference`) as toDoProperties_personDetails_contactPreference, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`contractId`, `toDoProperties`.`personDetails`.`contractId`) as toDoProperties_personDetails_contractId, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`toDoProperties`.`personDetails`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`toDoProperties`.`personDetails`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`personDetails`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`personDetails`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`personDetails`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`personDetails`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`toDoProperties`.`personDetails`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`toDoProperties`.`personDetails`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`toDoProperties`.`personDetails`.`createdDateTime`.`d_date`, LENGTH(`toDoProperties`.`personDetails`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`toDoProperties`.`personDetails`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`personDetails`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`toDoProperties`.`personDetails`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`personDetails`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`toDoProperties`.`personDetails`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`toDoProperties`.`personDetails`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as toDoProperties_personDetails_createdDateTime_d_date, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`declarationId`, `toDoProperties`.`personDetails`.`declarationId`) as toDoProperties_personDetails_declarationId, 
COALESCE(CAST(`_removed`.`toDoProperties`.`personDetails`.`effectiveDate`.`hasDate` as STRING), CAST(`toDoProperties`.`personDetails`.`effectiveDate`.`hasDate` as STRING)) as toDoProperties_personDetails_effectiveDate_hasDate, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`effectiveDate`.`knownDate`, `toDoProperties`.`personDetails`.`effectiveDate`.`knownDate`) as toDoProperties_personDetails_effectiveDate_knownDate, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`effectiveDate`.`type`, `toDoProperties`.`personDetails`.`effectiveDate`.`type`) as toDoProperties_personDetails_effectiveDate_type, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`effectiveDate`.`date`, `toDoProperties`.`personDetails`.`effectiveDate`.`date`) as toDoProperties_personDetails_effectiveDate_date, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`email`, `toDoProperties`.`personDetails`.`email`) as toDoProperties_personDetails_email, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`firstName`, `toDoProperties`.`personDetails`.`firstName`) as toDoProperties_personDetails_firstName, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`gender`, `toDoProperties`.`personDetails`.`gender`) as toDoProperties_personDetails_gender, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`lastName`, `toDoProperties`.`personDetails`.`lastName`) as toDoProperties_personDetails_lastName, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`middleName`, `toDoProperties`.`personDetails`.`middleName`) as toDoProperties_personDetails_middleName, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`mobileNumber`, `toDoProperties`.`personDetails`.`mobileNumber`) as toDoProperties_personDetails_mobileNumber, 
COALESCE(CAST(`_removed`.`toDoProperties`.`personDetails`.`paymentEffectiveDate`.`hasDate` as STRING), CAST(`toDoProperties`.`personDetails`.`paymentEffectiveDate`.`hasDate` as STRING)) as toDoProperties_personDetails_paymentEffectiveDate_hasDate, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`paymentEffectiveDate`.`knownDate`, `toDoProperties`.`personDetails`.`paymentEffectiveDate`.`knownDate`) as toDoProperties_personDetails_paymentEffectiveDate_knownDate, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`paymentEffectiveDate`.`type`, `toDoProperties`.`personDetails`.`paymentEffectiveDate`.`type`) as toDoProperties_personDetails_paymentEffectiveDate_type, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`paymentEffectiveDate`.`date`, `toDoProperties`.`personDetails`.`paymentEffectiveDate`.`date`) as toDoProperties_personDetails_paymentEffectiveDate_date, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`processId`, `toDoProperties`.`personDetails`.`processId`) as toDoProperties_personDetails_processId, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`sanitisedFirstName`, `toDoProperties`.`personDetails`.`sanitisedFirstName`) as toDoProperties_personDetails_sanitisedFirstName, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`sanitisedLastName`, `toDoProperties`.`personDetails`.`sanitisedLastName`) as toDoProperties_personDetails_sanitisedLastName, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`sanitisedMiddleName`, `toDoProperties`.`personDetails`.`sanitisedMiddleName`) as toDoProperties_personDetails_sanitisedMiddleName, 
COALESCE(CAST(`_removed`.`toDoProperties`.`personDetails`.`verifiedUsingBioQuestionsOrThirdParty` as STRING), CAST(`toDoProperties`.`personDetails`.`verifiedUsingBioQuestionsOrThirdParty` as STRING)) as toDoProperties_personDetails_verifiedUsingBioQuestionsOrThirdParty, 
COALESCE(CAST(`_removed`.`toDoProperties`.`personDetails`.`verifiedWithNameDateOfBirthOrAddressChange` as STRING), CAST(`toDoProperties`.`personDetails`.`verifiedWithNameDateOfBirthOrAddressChange` as STRING)) as toDoProperties_personDetails_verifiedWithNameDateOfBirthOrAddressChange, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`type`, `toDoProperties`.`personDetails`.`type`) as toDoProperties_personDetails_type, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_person_details_properties
 src_agent_core_agenttodoarchive_agent_todo_archive_person_details_properties 
 where `_removed`.`toDoProperties`.`type`='PERSON_DETAILS_PROPERTIES' or `toDoProperties`.`type`='PERSON_DETAILS_PROPERTIES';


!echo ------------------------;
!echo ------------------------ todo_CLAIMANT_NOTES;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_todo_todo_claimant_notes
;

CREATE EXTERNAL TABLE src_core_todo_todo_claimant_notes(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`properties` STRUCT<`notes`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`properties`:STRUCT<`notes`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/toDo';

DROP TABLE IF EXISTS todo_CLAIMANT_NOTES;

CREATE TABLE todo_claimant_notes STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`properties`.`notes`, `properties`.`notes`) as properties_notes, 
COALESCE(`_removed`.`properties`.`type`, `properties`.`type`) as properties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_core_todo_todo_claimant_notes
 src_core_todo_todo_claimant_notes 
 where `_removed`.`properties`.`type`='CLAIMANT_NOTES' or `properties`.`type`='CLAIMANT_NOTES';


!echo ------------------------;
!echo ------------------------ agent_todo_REVIEW_DEADLINE_TODO;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_review_deadline_todo
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_review_deadline_todo(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`claimantToDoId`:STRING
,`deadline`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`claimantToDoId`:STRING
,`deadline`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_REVIEW_DEADLINE_TODO;

CREATE TABLE agent_todo_review_deadline_todo STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`claimantToDoId`, `toDoProperties`.`claimantToDoId`) as toDoProperties_claimantToDoId, 
COALESCE(`_removed`.`toDoProperties`.`deadline`, `toDoProperties`.`deadline`) as toDoProperties_deadline, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_review_deadline_todo
 src_agent_core_agenttodo_agent_todo_review_deadline_todo 
 where `_removed`.`toDoProperties`.`type`='REVIEW_DEADLINE_TODO' or `toDoProperties`.`type`='REVIEW_DEADLINE_TODO';


!echo ------------------------;
!echo ------------------------ journal_ProvideFurtherProofOfYourChildcareCostsJournalEntry;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_journal_journal_providefurtherproofofyourchildcarecostsjournalentry
;

CREATE EXTERNAL TABLE src_core_journal_journal_providefurtherproofofyourchildcarecostsjournalentry(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`journalEntryProperties` STRUCT<`claimantAttachmentUploadId`:STRING
,`submitProofOption`:STRING
,`type`:STRING>
,`_id` STRUCT<`journalId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`journalEntryProperties`:STRUCT<`claimantAttachmentUploadId`:STRING
,`submitProofOption`:STRING
,`type`:STRING>
,`_id`:STRUCT<`journalId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/journal';

DROP TABLE IF EXISTS journal_ProvideFurtherProofOfYourChildcareCostsJournalEntry;

CREATE TABLE journal_providefurtherproofofyourchildcarecostsjournalentry STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`journalEntryProperties`.`claimantAttachmentUploadId`, `journalEntryProperties`.`claimantAttachmentUploadId`) as journalEntryProperties_claimantAttachmentUploadId, 
COALESCE(`_removed`.`journalEntryProperties`.`submitProofOption`, `journalEntryProperties`.`submitProofOption`) as journalEntryProperties_submitProofOption, 
COALESCE(`_removed`.`journalEntryProperties`.`type`, `journalEntryProperties`.`type`) as journalEntryProperties_type, 
COALESCE(`_removed`.`_id`.`journalId`, `_id`.`journalId`) as id FROM src_core_journal_journal_providefurtherproofofyourchildcarecostsjournalentry
 src_core_journal_journal_providefurtherproofofyourchildcarecostsjournalentry 
 where `_removed`.`journalEntryProperties`.`type`='ProvideFurtherProofOfYourChildcareCostsJournalEntry' or `journalEntryProperties`.`type`='ProvideFurtherProofOfYourChildcareCostsJournalEntry';


!echo ------------------------;
!echo ------------------------ journal_WaitingDaysJournalEntry;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_journal_journal_waitingdaysjournalentry
;

CREATE EXTERNAL TABLE src_core_journal_journal_waitingdaysjournalentry(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`journalEntryProperties` STRUCT<`waitingDaysType`:STRING
,`type`:STRING>
,`_id` STRUCT<`journalId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`journalEntryProperties`:STRUCT<`waitingDaysType`:STRING
,`type`:STRING>
,`_id`:STRUCT<`journalId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/journal';

DROP TABLE IF EXISTS journal_WaitingDaysJournalEntry;

CREATE TABLE journal_waitingdaysjournalentry STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`journalEntryProperties`.`waitingDaysType`, `journalEntryProperties`.`waitingDaysType`) as journalEntryProperties_waitingDaysType, 
COALESCE(`_removed`.`journalEntryProperties`.`type`, `journalEntryProperties`.`type`) as journalEntryProperties_type, 
COALESCE(`_removed`.`_id`.`journalId`, `_id`.`journalId`) as id FROM src_core_journal_journal_waitingdaysjournalentry
 src_core_journal_journal_waitingdaysjournalentry 
 where `_removed`.`journalEntryProperties`.`type`='WaitingDaysJournalEntry' or `journalEntryProperties`.`type`='WaitingDaysJournalEntry';


!echo ------------------------;
!echo ------------------------ journal;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_journal_journal
;

CREATE EXTERNAL TABLE src_core_journal_journal(
`attachment` STRUCT<`updatedAt`:STRUCT<`d_date`:STRING>
,`fileName`:STRING
,`fileSize`:STRING
,`id`:STRING
,`revision`:STRING
,`updatedBy`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`agentResponseDateTime` STRUCT<`d_date`:STRING>
,`deleted` STRUCT<`d_date`:STRING>
,`journalEntryProperties` STRUCT<`type`:STRING>
,`_id` STRUCT<`journalId`:STRING>
,`_version` STRING
,`agentFirstName` STRING
,`agentLastName` STRING
,`agentLocation` STRING
,`agentResponse` STRING
,`alertAdviser` BOOLEAN
,`claimantCanReply` BOOLEAN
,`claimantId` STRING
,`contractId` STRING
,`createdBy` STRING
,`createdByAdviser` BOOLEAN
,`journalEntryCategory` STRING
,`journalEntryThreadId` STRING
,`journalId` STRING
,`message` STRING
,`messageType` STRING
,`title` STRING
,`type` STRING
,`_removed` STRUCT<`attachment`:STRUCT<`updatedAt`:STRUCT<`d_date`:STRING>
,`fileName`:STRING
,`fileSize`:STRING
,`id`:STRING
,`revision`:STRING
,`updatedBy`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`agentResponseDateTime`:STRUCT<`d_date`:STRING>
,`deleted`:STRUCT<`d_date`:STRING>
,`journalEntryProperties`:STRUCT<`type`:STRING>
,`_id`:STRUCT<`journalId`:STRING>
,`_version`:STRING
,`agentFirstName`:STRING
,`agentLastName`:STRING
,`agentLocation`:STRING
,`agentResponse`:STRING
,`alertAdviser`:BOOLEAN
,`claimantCanReply`:BOOLEAN
,`claimantId`:STRING
,`contractId`:STRING
,`createdBy`:STRING
,`createdByAdviser`:BOOLEAN
,`journalEntryCategory`:STRING
,`journalEntryThreadId`:STRING
,`journalId`:STRING
,`message`:STRING
,`messageType`:STRING
,`title`:STRING
,`type`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/journal';

DROP TABLE IF EXISTS journal;

CREATE TABLE journal STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`agentFirstName`, `agentFirstName`) as agentFirstName, 
COALESCE(`_removed`.`agentLastName`, `agentLastName`) as agentLastName, 
COALESCE(`_removed`.`agentLocation`, `agentLocation`) as agentLocation, 
COALESCE(`_removed`.`agentResponse`, `agentResponse`) as agentResponse, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`agentResponseDateTime`.`d_date`, LENGTH(`_removed`.`agentResponseDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`agentResponseDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`agentResponseDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`agentResponseDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`agentResponseDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`agentResponseDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`agentResponseDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`agentResponseDateTime`.`d_date`, LENGTH(`agentResponseDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`agentResponseDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`agentResponseDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`agentResponseDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`agentResponseDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`agentResponseDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`agentResponseDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as agentResponseDateTime_d_date, 
COALESCE(CAST(`_removed`.`alertAdviser` as STRING), CAST(`alertAdviser` as STRING)) as alertAdviser, 
COALESCE(`_removed`.`attachment`.`fileName`, `attachment`.`fileName`) as attachment_fileName, 
COALESCE(`_removed`.`attachment`.`fileSize`, `attachment`.`fileSize`) as attachment_fileSize, 
COALESCE(`_removed`.`attachment`.`id`, `attachment`.`id`) as attachment_id, 
COALESCE(`_removed`.`attachment`.`revision`, `attachment`.`revision`) as attachment_revision, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`attachment`.`updatedAt`.`d_date`, LENGTH(`_removed`.`attachment`.`updatedAt`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`attachment`.`updatedAt`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`attachment`.`updatedAt`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`attachment`.`updatedAt`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`attachment`.`updatedAt`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`attachment`.`updatedAt`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`attachment`.`updatedAt`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`attachment`.`updatedAt`.`d_date`, LENGTH(`attachment`.`updatedAt`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`attachment`.`updatedAt`.`d_date`, 1, 10), ' ', SUBSTR(`attachment`.`updatedAt`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`attachment`.`updatedAt`.`d_date`, 1, 10), ' ', SUBSTR(`attachment`.`updatedAt`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`attachment`.`updatedAt`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`attachment`.`updatedAt`.`d_date`, 21, 3)) AS TIMESTAMP) END) as attachment_updatedAt_d_date, 
COALESCE(`_removed`.`attachment`.`updatedBy`, `attachment`.`updatedBy`) as attachment_updatedBy, 
COALESCE(CAST(`_removed`.`claimantCanReply` as STRING), CAST(`claimantCanReply` as STRING)) as claimantCanReply, 
COALESCE(`_removed`.`claimantId`, `claimantId`) as claimantId, 
COALESCE(`_removed`.`contractId`, `contractId`) as contractId, 
COALESCE(`_removed`.`createdBy`, `createdBy`) as createdBy, 
COALESCE(CAST(`_removed`.`createdByAdviser` as STRING), CAST(`createdByAdviser` as STRING)) as createdByAdviser, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as createdDateTime_d_date, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`deleted`.`d_date`, LENGTH(`_removed`.`deleted`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`deleted`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`deleted`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`deleted`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`deleted`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`deleted`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`deleted`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`deleted`.`d_date`, LENGTH(`deleted`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`deleted`.`d_date`, 1, 10), ' ', SUBSTR(`deleted`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`deleted`.`d_date`, 1, 10), ' ', SUBSTR(`deleted`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`deleted`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`deleted`.`d_date`, 21, 3)) AS TIMESTAMP) END) as deleted_d_date, 
COALESCE(`_removed`.`journalEntryCategory`, `journalEntryCategory`) as journalEntryCategory, 
COALESCE(`_removed`.`journalEntryProperties`.`type`, `journalEntryProperties`.`type`) as journalEntryProperties_type, 
COALESCE(`_removed`.`journalEntryThreadId`, `journalEntryThreadId`) as journalEntryThreadId, 
COALESCE(`_removed`.`journalId`, `journalId`) as journalId, 
COALESCE(`_removed`.`message`, `message`) as message, 
COALESCE(`_removed`.`messageType`, `messageType`) as messageType, 
COALESCE(`_removed`.`title`, `title`) as title, 
COALESCE(`_removed`.`type`, `type`) as type, 
COALESCE(`_removed`.`_id`.`journalId`, `_id`.`journalId`) as id FROM src_core_journal_journal
 src_core_journal_journal;


!echo ------------------------;
!echo ------------------------ todo_CONTACT_SERVICE_CENTRE_TODO_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_todo_todo_contact_service_centre_todo_properties
;

CREATE EXTERNAL TABLE src_core_todo_todo_contact_service_centre_todo_properties(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`properties` STRUCT<`savingsAndInvestmentsChanged`:BOOLEAN
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`properties`:STRUCT<`savingsAndInvestmentsChanged`:BOOLEAN
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/toDo';

DROP TABLE IF EXISTS todo_CONTACT_SERVICE_CENTRE_TODO_PROPERTIES;

CREATE TABLE todo_contact_service_centre_todo_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(CAST(`_removed`.`properties`.`savingsAndInvestmentsChanged` as STRING), CAST(`properties`.`savingsAndInvestmentsChanged` as STRING)) as properties_savingsAndInvestmentsChanged, 
COALESCE(`_removed`.`properties`.`type`, `properties`.`type`) as properties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_core_todo_todo_contact_service_centre_todo_properties
 src_core_todo_todo_contact_service_centre_todo_properties 
 where `_removed`.`properties`.`type`='CONTACT_SERVICE_CENTRE_TODO_PROPERTIES' or `properties`.`type`='CONTACT_SERVICE_CENTRE_TODO_PROPERTIES';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_MAKE_A_DECISION_LATE_REPORTING_OF_CHANGE_TO_DO_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_make_a_decision_late_reporting_of_change_to_do_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_make_a_decision_late_reporting_of_change_to_do_properties(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`changeOfCircumstancesDate`:STRING
,`changeOfCircumstancesDelayedCommunicationReason`:STRING
,`changeOfCircumstancesDescription`:STRING
,`changeOfCircumstancesFirstReportDate`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`changeOfCircumstancesDate`:STRING
,`changeOfCircumstancesDelayedCommunicationReason`:STRING
,`changeOfCircumstancesDescription`:STRING
,`changeOfCircumstancesFirstReportDate`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_MAKE_A_DECISION_LATE_REPORTING_OF_CHANGE_TO_DO_PROPERTIES;

CREATE TABLE agent_todo_archive_make_a_decision_late_reporting_of_change_to_do_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`changeOfCircumstancesDate`, `toDoProperties`.`changeOfCircumstancesDate`) as toDoProperties_changeOfCircumstancesDate, 
COALESCE(`_removed`.`toDoProperties`.`changeOfCircumstancesDelayedCommunicationReason`, `toDoProperties`.`changeOfCircumstancesDelayedCommunicationReason`) as toDoProperties_changeOfCircumstancesDelayedCommunicationReason, 
COALESCE(`_removed`.`toDoProperties`.`changeOfCircumstancesDescription`, `toDoProperties`.`changeOfCircumstancesDescription`) as toDoProperties_changeOfCircumstancesDescription, 
COALESCE(`_removed`.`toDoProperties`.`changeOfCircumstancesFirstReportDate`, `toDoProperties`.`changeOfCircumstancesFirstReportDate`) as toDoProperties_changeOfCircumstancesFirstReportDate, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_make_a_decision_late_reporting_of_change_to_do_properties
 src_agent_core_agenttodoarchive_agent_todo_archive_make_a_decision_late_reporting_of_change_to_do_properties 
 where `_removed`.`toDoProperties`.`type`='MAKE_A_DECISION_LATE_REPORTING_OF_CHANGE_TO_DO_PROPERTIES' or `toDoProperties`.`type`='MAKE_A_DECISION_LATE_REPORTING_OF_CHANGE_TO_DO_PROPERTIES';


!echo ------------------------;
!echo ------------------------ journal_BenefitCapNotificationJournalEntry;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_journal_journal_benefitcapnotificationjournalentry
;

CREATE EXTERNAL TABLE src_core_journal_journal_benefitcapnotificationjournalentry(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`journalEntryProperties` STRUCT<`hasWorkcoach`:BOOLEAN
,`type`:STRING>
,`_id` STRUCT<`journalId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`journalEntryProperties`:STRUCT<`hasWorkcoach`:BOOLEAN
,`type`:STRING>
,`_id`:STRUCT<`journalId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/journal';

DROP TABLE IF EXISTS journal_BenefitCapNotificationJournalEntry;

CREATE TABLE journal_benefitcapnotificationjournalentry STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`hasWorkcoach` as STRING), CAST(`journalEntryProperties`.`hasWorkcoach` as STRING)) as journalEntryProperties_hasWorkcoach, 
COALESCE(`_removed`.`journalEntryProperties`.`type`, `journalEntryProperties`.`type`) as journalEntryProperties_type, 
COALESCE(`_removed`.`_id`.`journalId`, `_id`.`journalId`) as id FROM src_core_journal_journal_benefitcapnotificationjournalentry
 src_core_journal_journal_benefitcapnotificationjournalentry 
 where `_removed`.`journalEntryProperties`.`type`='BenefitCapNotificationJournalEntry' or `journalEntryProperties`.`type`='BenefitCapNotificationJournalEntry';


!echo ------------------------;
!echo ------------------------ agent_todo_CHECK_WORKGROUP_AND_COMMITMENT_ON_HEALTH_AND_DISABILITY_CHANGE;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_check_workgroup_and_commitment_on_health_and_disability_change
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_check_workgroup_and_commitment_on_health_and_disability_change(
`toDoProperties` STRUCT<`healthAndDisabilitySummary`:STRUCT<`agentToCallTerminallyIllClaimant`:BOOLEAN
,`claimantId`:STRING
,`contractId`:STRING
,`copiedFromDeclarationId`:STRING
,`name`:STRING
,`partnerDeclaration`:BOOLEAN
,`processId`:STRING
,`reportingIllness`:BOOLEAN
,`restrictedAbilityToWork`:BOOLEAN
,`confirmationRequired`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`declarationId`:STRING
,`message`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`healthAndDisabilitySummary`:STRUCT<`agentToCallTerminallyIllClaimant`:BOOLEAN
,`claimantId`:STRING
,`contractId`:STRING
,`copiedFromDeclarationId`:STRING
,`name`:STRING
,`partnerDeclaration`:BOOLEAN
,`processId`:STRING
,`reportingIllness`:BOOLEAN
,`restrictedAbilityToWork`:BOOLEAN
,`confirmationRequired`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`declarationId`:STRING
,`message`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_CHECK_WORKGROUP_AND_COMMITMENT_ON_HEALTH_AND_DISABILITY_CHANGE;

CREATE TABLE agent_todo_check_workgroup_and_commitment_on_health_and_disability_change STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`declarationId`, `toDoProperties`.`declarationId`) as toDoProperties_declarationId, 
COALESCE(CAST(`_removed`.`toDoProperties`.`healthAndDisabilitySummary`.`agentToCallTerminallyIllClaimant` as STRING), CAST(`toDoProperties`.`healthAndDisabilitySummary`.`agentToCallTerminallyIllClaimant` as STRING)) as toDoProperties_healthAndDisabilitySummary_agentToCallTerminallyIllClaimant, 
COALESCE(`_removed`.`toDoProperties`.`healthAndDisabilitySummary`.`claimantId`, `toDoProperties`.`healthAndDisabilitySummary`.`claimantId`) as toDoProperties_healthAndDisabilitySummary_claimantId, 
COALESCE(`_removed`.`toDoProperties`.`healthAndDisabilitySummary`.`contractId`, `toDoProperties`.`healthAndDisabilitySummary`.`contractId`) as toDoProperties_healthAndDisabilitySummary_contractId, 
COALESCE(`_removed`.`toDoProperties`.`healthAndDisabilitySummary`.`copiedFromDeclarationId`, `toDoProperties`.`healthAndDisabilitySummary`.`copiedFromDeclarationId`) as toDoProperties_healthAndDisabilitySummary_copiedFromDeclarationId, 
COALESCE(`_removed`.`toDoProperties`.`healthAndDisabilitySummary`.`name`, `toDoProperties`.`healthAndDisabilitySummary`.`name`) as toDoProperties_healthAndDisabilitySummary_name, 
COALESCE(CAST(`_removed`.`toDoProperties`.`healthAndDisabilitySummary`.`partnerDeclaration` as STRING), CAST(`toDoProperties`.`healthAndDisabilitySummary`.`partnerDeclaration` as STRING)) as toDoProperties_healthAndDisabilitySummary_partnerDeclaration, 
COALESCE(`_removed`.`toDoProperties`.`healthAndDisabilitySummary`.`processId`, `toDoProperties`.`healthAndDisabilitySummary`.`processId`) as toDoProperties_healthAndDisabilitySummary_processId, 
COALESCE(CAST(`_removed`.`toDoProperties`.`healthAndDisabilitySummary`.`reportingIllness` as STRING), CAST(`toDoProperties`.`healthAndDisabilitySummary`.`reportingIllness` as STRING)) as toDoProperties_healthAndDisabilitySummary_reportingIllness, 
COALESCE(CAST(`_removed`.`toDoProperties`.`healthAndDisabilitySummary`.`restrictedAbilityToWork` as STRING), CAST(`toDoProperties`.`healthAndDisabilitySummary`.`restrictedAbilityToWork` as STRING)) as toDoProperties_healthAndDisabilitySummary_restrictedAbilityToWork, 
COALESCE(CAST(`_removed`.`toDoProperties`.`healthAndDisabilitySummary`.`confirmationRequired` as STRING), CAST(`toDoProperties`.`healthAndDisabilitySummary`.`confirmationRequired` as STRING)) as toDoProperties_healthAndDisabilitySummary_confirmationRequired, 
COALESCE(CAST(`_removed`.`toDoProperties`.`healthAndDisabilitySummary`.`perClaimant` as STRING), CAST(`toDoProperties`.`healthAndDisabilitySummary`.`perClaimant` as STRING)) as toDoProperties_healthAndDisabilitySummary_perClaimant, 
COALESCE(`_removed`.`toDoProperties`.`healthAndDisabilitySummary`.`type`, `toDoProperties`.`healthAndDisabilitySummary`.`type`) as toDoProperties_healthAndDisabilitySummary_type, 
COALESCE(`_removed`.`toDoProperties`.`message`, `toDoProperties`.`message`) as toDoProperties_message, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_check_workgroup_and_commitment_on_health_and_disability_change
 src_agent_core_agenttodo_agent_todo_check_workgroup_and_commitment_on_health_and_disability_change 
 where `_removed`.`toDoProperties`.`type`='CHECK_WORKGROUP_AND_COMMITMENT_ON_HEALTH_AND_DISABILITY_CHANGE' or `toDoProperties`.`type`='CHECK_WORKGROUP_AND_COMMITMENT_ON_HEALTH_AND_DISABILITY_CHANGE';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_CALCULATE_PAYMENT_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_calculate_payment_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_calculate_payment_properties(
`toDoProperties` STRUCT<`manualCalculationReasons`:ARRAY<STRUCT<`additionalInformation`:STRING
,`type`:STRING
,`_type`:STRING
>>
,`assessmentPeriodId`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`manualCalculationReasons`:ARRAY<STRUCT<`additionalInformation`:STRING
,`type`:STRING
,`_type`:STRING
>>
,`assessmentPeriodId`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_CALCULATE_PAYMENT_PROPERTIES;

CREATE TABLE agent_todo_archive_calculate_payment_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`assessmentPeriodId`, `toDoProperties`.`assessmentPeriodId`) as toDoProperties_assessmentPeriodId, 
COALESCE(`removed_exploded_todoproperties_manualcalculationreasons`.`additionalInformation`, `exploded_todoproperties_manualcalculationreasons`.`additionalInformation`) as toDoProperties_manualCalculationReasons_additionalInformation, 
COALESCE(`removed_exploded_todoproperties_manualcalculationreasons`.`type`, `exploded_todoproperties_manualcalculationreasons`.`type`) as toDoProperties_manualCalculationReasons_type, 
COALESCE(`removed_exploded_todoproperties_manualcalculationreasons`.`_type`, `exploded_todoproperties_manualcalculationreasons`.`_type`) as toDoProperties_manualCalculationReasons__type, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_calculate_payment_properties
 LATERAL VIEW OUTER EXPLODE(`toDoProperties`.`manualCalculationReasons`) view_exploded_todoproperties_manualcalculationreasons AS exploded_todoproperties_manualcalculationreasons 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`toDoProperties`.`manualCalculationReasons`) view_removed_exploded_todoproperties_manualcalculationreasons AS removed_exploded_todoproperties_manualcalculationreasons 
 
 where `_removed`.`toDoProperties`.`type`='CALCULATE_PAYMENT_PROPERTIES' or `toDoProperties`.`type`='CALCULATE_PAYMENT_PROPERTIES';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_RELATIONSHIP_ENDED;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_relationship_ended
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_relationship_ended(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`message`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`message`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_RELATIONSHIP_ENDED;

CREATE TABLE agent_todo_archive_relationship_ended STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`message`, `toDoProperties`.`message`) as toDoProperties_message, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_relationship_ended
 src_agent_core_agenttodoarchive_agent_todo_archive_relationship_ended 
 where `_removed`.`toDoProperties`.`type`='RELATIONSHIP_ENDED' or `toDoProperties`.`type`='RELATIONSHIP_ENDED';


!echo ------------------------;
!echo ------------------------ agent_todo_CONSIDER_CLOSING_CLAIM;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_consider_closing_claim
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_consider_closing_claim(
`toDoProperties` STRUCT<`deferrals`:ARRAY<STRUCT<`agentId`:STRING
,`decisionNotes`:STRING
,`deferredFrom`:STRING
,`deferredTo`:STRING
>>
,`acceptCommitmentToDoDeadline`:STRING
,`acceptCommitmentToDoId`:STRING
,`annualVerificationEligibilityDate`:STRING
,`considerClaimClosureDate`:STRING
,`considerClosingClaimReason`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`deferrals`:ARRAY<STRUCT<`agentId`:STRING
,`decisionNotes`:STRING
,`deferredFrom`:STRING
,`deferredTo`:STRING
>>
,`acceptCommitmentToDoDeadline`:STRING
,`acceptCommitmentToDoId`:STRING
,`annualVerificationEligibilityDate`:STRING
,`considerClaimClosureDate`:STRING
,`considerClosingClaimReason`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_CONSIDER_CLOSING_CLAIM;

CREATE TABLE agent_todo_consider_closing_claim STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`acceptCommitmentToDoDeadline`, `toDoProperties`.`acceptCommitmentToDoDeadline`) as toDoProperties_acceptCommitmentToDoDeadline, 
COALESCE(`_removed`.`toDoProperties`.`acceptCommitmentToDoId`, `toDoProperties`.`acceptCommitmentToDoId`) as toDoProperties_acceptCommitmentToDoId, 
COALESCE(`_removed`.`toDoProperties`.`annualVerificationEligibilityDate`, `toDoProperties`.`annualVerificationEligibilityDate`) as toDoProperties_annualVerificationEligibilityDate, 
COALESCE(`_removed`.`toDoProperties`.`considerClaimClosureDate`, `toDoProperties`.`considerClaimClosureDate`) as toDoProperties_considerClaimClosureDate, 
COALESCE(`_removed`.`toDoProperties`.`considerClosingClaimReason`, `toDoProperties`.`considerClosingClaimReason`) as toDoProperties_considerClosingClaimReason, 
COALESCE(`removed_exploded_todoproperties_deferrals`.`agentId`, `exploded_todoproperties_deferrals`.`agentId`) as toDoProperties_deferrals_agentId, 
COALESCE(`removed_exploded_todoproperties_deferrals`.`decisionNotes`, `exploded_todoproperties_deferrals`.`decisionNotes`) as toDoProperties_deferrals_decisionNotes, 
COALESCE(`removed_exploded_todoproperties_deferrals`.`deferredFrom`, `exploded_todoproperties_deferrals`.`deferredFrom`) as toDoProperties_deferrals_deferredFrom, 
COALESCE(`removed_exploded_todoproperties_deferrals`.`deferredTo`, `exploded_todoproperties_deferrals`.`deferredTo`) as toDoProperties_deferrals_deferredTo, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_consider_closing_claim
 LATERAL VIEW OUTER EXPLODE(`toDoProperties`.`deferrals`) view_exploded_todoproperties_deferrals AS exploded_todoproperties_deferrals 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`toDoProperties`.`deferrals`) view_removed_exploded_todoproperties_deferrals AS removed_exploded_todoproperties_deferrals 
 
 where `_removed`.`toDoProperties`.`type`='CONSIDER_CLOSING_CLAIM' or `toDoProperties`.`type`='CONSIDER_CLOSING_CLAIM';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_CHECK_PERSONAL_DETAILS;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_check_personal_details
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_check_personal_details(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`addressMismatch`:BOOLEAN
,`dateOfBirthMismatch`:BOOLEAN
,`dobStatusMistmatch`:BOOLEAN
,`firstNameMismatch`:BOOLEAN
,`lastNameMismatch`:BOOLEAN
,`middleNameMismatch`:BOOLEAN
,`phoneNumberMismatch`:BOOLEAN
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`addressMismatch`:BOOLEAN
,`dateOfBirthMismatch`:BOOLEAN
,`dobStatusMistmatch`:BOOLEAN
,`firstNameMismatch`:BOOLEAN
,`lastNameMismatch`:BOOLEAN
,`middleNameMismatch`:BOOLEAN
,`phoneNumberMismatch`:BOOLEAN
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_CHECK_PERSONAL_DETAILS;

CREATE TABLE agent_todo_archive_check_personal_details STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(CAST(`_removed`.`toDoProperties`.`addressMismatch` as STRING), CAST(`toDoProperties`.`addressMismatch` as STRING)) as toDoProperties_addressMismatch, 
COALESCE(CAST(`_removed`.`toDoProperties`.`dateOfBirthMismatch` as STRING), CAST(`toDoProperties`.`dateOfBirthMismatch` as STRING)) as toDoProperties_dateOfBirthMismatch, 
COALESCE(CAST(`_removed`.`toDoProperties`.`dobStatusMistmatch` as STRING), CAST(`toDoProperties`.`dobStatusMistmatch` as STRING)) as toDoProperties_dobStatusMistmatch, 
COALESCE(CAST(`_removed`.`toDoProperties`.`firstNameMismatch` as STRING), CAST(`toDoProperties`.`firstNameMismatch` as STRING)) as toDoProperties_firstNameMismatch, 
COALESCE(CAST(`_removed`.`toDoProperties`.`lastNameMismatch` as STRING), CAST(`toDoProperties`.`lastNameMismatch` as STRING)) as toDoProperties_lastNameMismatch, 
COALESCE(CAST(`_removed`.`toDoProperties`.`middleNameMismatch` as STRING), CAST(`toDoProperties`.`middleNameMismatch` as STRING)) as toDoProperties_middleNameMismatch, 
COALESCE(CAST(`_removed`.`toDoProperties`.`phoneNumberMismatch` as STRING), CAST(`toDoProperties`.`phoneNumberMismatch` as STRING)) as toDoProperties_phoneNumberMismatch, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_check_personal_details
 src_agent_core_agenttodoarchive_agent_todo_archive_check_personal_details 
 where `_removed`.`toDoProperties`.`type`='CHECK_PERSONAL_DETAILS' or `toDoProperties`.`type`='CHECK_PERSONAL_DETAILS';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_RTE_SUPPLIED;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_rte_supplied
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_rte_supplied(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`message`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`message`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_RTE_SUPPLIED;

CREATE TABLE agent_todo_archive_rte_supplied STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`message`, `toDoProperties`.`message`) as toDoProperties_message, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_rte_supplied
 src_agent_core_agenttodoarchive_agent_todo_archive_rte_supplied 
 where `_removed`.`toDoProperties`.`type`='RTE_SUPPLIED' or `toDoProperties`.`type`='RTE_SUPPLIED';


!echo ------------------------;
!echo ------------------------ agent_todo_DATA_GATHER_REFER_HRT_TO_DECISION_MAKER;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_data_gather_refer_hrt_to_decision_maker
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_data_gather_refer_hrt_to_decision_maker(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`notUkNational`:BOOLEAN
,`returnAfterAbsence`:BOOLEAN
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`notUkNational`:BOOLEAN
,`returnAfterAbsence`:BOOLEAN
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_DATA_GATHER_REFER_HRT_TO_DECISION_MAKER;

CREATE TABLE agent_todo_data_gather_refer_hrt_to_decision_maker STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(CAST(`_removed`.`toDoProperties`.`notUkNational` as STRING), CAST(`toDoProperties`.`notUkNational` as STRING)) as toDoProperties_notUkNational, 
COALESCE(CAST(`_removed`.`toDoProperties`.`returnAfterAbsence` as STRING), CAST(`toDoProperties`.`returnAfterAbsence` as STRING)) as toDoProperties_returnAfterAbsence, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_data_gather_refer_hrt_to_decision_maker
 src_agent_core_agenttodo_agent_todo_data_gather_refer_hrt_to_decision_maker 
 where `_removed`.`toDoProperties`.`type`='DATA_GATHER_REFER_HRT_TO_DECISION_MAKER' or `toDoProperties`.`type`='DATA_GATHER_REFER_HRT_TO_DECISION_MAKER';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_ENDING_SELF_EMPLOYMENT;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_ending_self_employment
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_ending_self_employment(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`effectiveDate`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`effectiveDate`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_ENDING_SELF_EMPLOYMENT;

CREATE TABLE agent_todo_archive_ending_self_employment STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`effectiveDate`, `toDoProperties`.`effectiveDate`) as toDoProperties_effectiveDate, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_ending_self_employment
 src_agent_core_agenttodoarchive_agent_todo_archive_ending_self_employment 
 where `_removed`.`toDoProperties`.`type`='ENDING_SELF_EMPLOYMENT' or `toDoProperties`.`type`='ENDING_SELF_EMPLOYMENT';


!echo ------------------------;
!echo ------------------------ agent_todo_CHECK_MEDICAL_EVIDENCE_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_check_medical_evidence_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_check_medical_evidence_properties(
`toDoProperties` STRUCT<`result`:STRUCT<`agentPrognosis`:STRING
,`fitNoteEvidenceAccepted`:BOOLEAN>
,`fitNoteId`:STRING
,`periodOfSicknessId`:STRING
,`declarationId`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`result`:STRUCT<`agentPrognosis`:STRING
,`fitNoteEvidenceAccepted`:BOOLEAN>
,`fitNoteId`:STRING
,`periodOfSicknessId`:STRING
,`declarationId`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_CHECK_MEDICAL_EVIDENCE_PROPERTIES;

CREATE TABLE agent_todo_check_medical_evidence_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`fitNoteId`, `toDoProperties`.`fitNoteId`) as toDoProperties_fitNoteId, 
COALESCE(`_removed`.`toDoProperties`.`periodOfSicknessId`, `toDoProperties`.`periodOfSicknessId`) as toDoProperties_periodOfSicknessId, 
COALESCE(`_removed`.`toDoProperties`.`result`.`agentPrognosis`, `toDoProperties`.`result`.`agentPrognosis`) as toDoProperties_result_agentPrognosis, 
COALESCE(CAST(`_removed`.`toDoProperties`.`result`.`fitNoteEvidenceAccepted` as STRING), CAST(`toDoProperties`.`result`.`fitNoteEvidenceAccepted` as STRING)) as toDoProperties_result_fitNoteEvidenceAccepted, 
COALESCE(`_removed`.`toDoProperties`.`declarationId`, `toDoProperties`.`declarationId`) as toDoProperties_declarationId, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_check_medical_evidence_properties
 src_agent_core_agenttodo_agent_todo_check_medical_evidence_properties 
 where `_removed`.`toDoProperties`.`type`='CHECK_MEDICAL_EVIDENCE_PROPERTIES' or `toDoProperties`.`type`='CHECK_MEDICAL_EVIDENCE_PROPERTIES';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_MAKE_AN_ADVANCE_PAYMENT;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_make_an_advance_payment
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_make_an_advance_payment(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`advanceGroupId`:STRING
,`automatedPaymentRejectionReason`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`advanceGroupId`:STRING
,`automatedPaymentRejectionReason`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_MAKE_AN_ADVANCE_PAYMENT;

CREATE TABLE agent_todo_archive_make_an_advance_payment STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`advanceGroupId`, `toDoProperties`.`advanceGroupId`) as toDoProperties_advanceGroupId, 
COALESCE(`_removed`.`toDoProperties`.`automatedPaymentRejectionReason`, `toDoProperties`.`automatedPaymentRejectionReason`) as toDoProperties_automatedPaymentRejectionReason, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_make_an_advance_payment
 src_agent_core_agenttodoarchive_agent_todo_archive_make_an_advance_payment 
 where `_removed`.`toDoProperties`.`type`='MAKE_AN_ADVANCE_PAYMENT' or `toDoProperties`.`type`='MAKE_AN_ADVANCE_PAYMENT';


!echo ------------------------;
!echo ------------------------ journal_GenericJournalEntry;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_journal_journal_genericjournalentry
;

CREATE EXTERNAL TABLE src_core_journal_journal_genericjournalentry(
`journalEntryProperties` STRUCT<`paragraphs`:ARRAY<STRUCT<`words`:ARRAY<STRUCT<`args`:ARRAY<STRUCT<`arg`:STRING
>>
,`bold`:BOOLEAN
,`key`:STRING
,`link`:BOOLEAN
,`linkHref`:STRING
>>
,`list`:BOOLEAN
,`notification`:BOOLEAN
>>
,`fieldEntries`:ARRAY<STRUCT<`field`:STRING
,`type`:STRING
,`value`:STRING
>>
,`notes`:ARRAY<STRING>
,`simpleList`:ARRAY<STRING>
,`description`:STRING
,`entryType`:STRING
,`title`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`journalId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`journalEntryProperties`:STRUCT<`paragraphs`:ARRAY<STRUCT<`words`:ARRAY<STRUCT<`args`:ARRAY<STRUCT<`arg`:STRING
>>
,`bold`:BOOLEAN
,`key`:STRING
,`link`:BOOLEAN
,`linkHref`:STRING
>>
,`list`:BOOLEAN
,`notification`:BOOLEAN
>>
,`fieldEntries`:ARRAY<STRUCT<`field`:STRING
,`type`:STRING
,`value`:STRING
>>
,`notes`:ARRAY<STRING>
,`simpleList`:ARRAY<STRING>
,`description`:STRING
,`entryType`:STRING
,`title`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`journalId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/journal';

DROP TABLE IF EXISTS journal_GenericJournalEntry;

CREATE TABLE journal_genericjournalentry STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`journalEntryProperties`.`description`, `journalEntryProperties`.`description`) as journalEntryProperties_description, 
COALESCE(`_removed`.`journalEntryProperties`.`entryType`, `journalEntryProperties`.`entryType`) as journalEntryProperties_entryType, 
COALESCE(`removed_exploded_journalentryproperties_fieldentries`.`field`, `exploded_journalentryproperties_fieldentries`.`field`) as journalEntryProperties_fieldEntries_field, 
COALESCE(`removed_exploded_journalentryproperties_fieldentries`.`type`, `exploded_journalentryproperties_fieldentries`.`type`) as journalEntryProperties_fieldEntries_type, 
COALESCE(`removed_exploded_journalentryproperties_fieldentries`.`value`, `exploded_journalentryproperties_fieldentries`.`value`) as journalEntryProperties_fieldEntries_value, 
COALESCE(`removed_exploded_journalentryproperties_notes`, `exploded_journalentryproperties_notes`) as journalEntryProperties_notes, 
COALESCE(CAST(`removed_exploded_journalentryproperties_paragraphs`.`list` as STRING), CAST(`exploded_journalentryproperties_paragraphs`.`list` as STRING)) as journalEntryProperties_paragraphs_list, 
COALESCE(CAST(`removed_exploded_journalentryproperties_paragraphs`.`notification` as STRING), CAST(`exploded_journalentryproperties_paragraphs`.`notification` as STRING)) as journalEntryProperties_paragraphs_notification, 
COALESCE(`removed_exploded_journalentryproperties_paragraphs_exploded_words_exploded_args`.`arg`, `exploded_journalentryproperties_paragraphs_exploded_words_exploded_args`.`arg`) as journalEntryProperties_paragraphs_words_args_arg, 
COALESCE(CAST(`removed_exploded_journalentryproperties_paragraphs_exploded_words`.`bold` as STRING), CAST(`exploded_journalentryproperties_paragraphs_exploded_words`.`bold` as STRING)) as journalEntryProperties_paragraphs_words_bold, 
COALESCE(`removed_exploded_journalentryproperties_paragraphs_exploded_words`.`key`, `exploded_journalentryproperties_paragraphs_exploded_words`.`key`) as journalEntryProperties_paragraphs_words_key, 
COALESCE(CAST(`removed_exploded_journalentryproperties_paragraphs_exploded_words`.`link` as STRING), CAST(`exploded_journalentryproperties_paragraphs_exploded_words`.`link` as STRING)) as journalEntryProperties_paragraphs_words_link, 
COALESCE(`removed_exploded_journalentryproperties_paragraphs_exploded_words`.`linkHref`, `exploded_journalentryproperties_paragraphs_exploded_words`.`linkHref`) as journalEntryProperties_paragraphs_words_linkHref, 
COALESCE(`removed_exploded_journalentryproperties_simplelist`, `exploded_journalentryproperties_simplelist`) as journalEntryProperties_simpleList, 
COALESCE(`_removed`.`journalEntryProperties`.`title`, `journalEntryProperties`.`title`) as journalEntryProperties_title, 
COALESCE(`_removed`.`journalEntryProperties`.`type`, `journalEntryProperties`.`type`) as journalEntryProperties_type, 
COALESCE(`_removed`.`_id`.`journalId`, `_id`.`journalId`) as id FROM src_core_journal_journal_genericjournalentry
 LATERAL VIEW OUTER EXPLODE(`journalEntryProperties`.`fieldEntries`) view_exploded_journalentryproperties_fieldentries AS exploded_journalentryproperties_fieldentries 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`journalEntryProperties`.`fieldEntries`) view_removed_exploded_journalentryproperties_fieldentries AS removed_exploded_journalentryproperties_fieldentries 
 LATERAL VIEW OUTER EXPLODE(`journalEntryProperties`.`notes`) view_exploded_journalentryproperties_notes AS exploded_journalentryproperties_notes 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`journalEntryProperties`.`notes`) view_removed_exploded_journalentryproperties_notes AS removed_exploded_journalentryproperties_notes 
 LATERAL VIEW OUTER EXPLODE(`journalEntryProperties`.`paragraphs`) view_exploded_journalentryproperties_paragraphs AS exploded_journalentryproperties_paragraphs 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`journalEntryProperties`.`paragraphs`) view_removed_exploded_journalentryproperties_paragraphs AS removed_exploded_journalentryproperties_paragraphs 
 LATERAL VIEW OUTER EXPLODE(`exploded_journalentryproperties_paragraphs`.`words`) view_exploded_journalentryproperties_paragraphs_exploded_words AS exploded_journalentryproperties_paragraphs_exploded_words 
 LATERAL VIEW OUTER EXPLODE(`exploded_journalentryproperties_paragraphs_exploded_words`.`args`) view_exploded_journalentryproperties_paragraphs_exploded_words_exploded_args AS exploded_journalentryproperties_paragraphs_exploded_words_exploded_args 
 LATERAL VIEW OUTER EXPLODE(`removed_exploded_journalentryproperties_paragraphs`.`words`) view_removed_exploded_journalentryproperties_paragraphs_exploded_words AS removed_exploded_journalentryproperties_paragraphs_exploded_words 
 LATERAL VIEW OUTER EXPLODE(`removed_exploded_journalentryproperties_paragraphs_exploded_words`.`args`) view_removed_exploded_journalentryproperties_paragraphs_exploded_words_exploded_args AS removed_exploded_journalentryproperties_paragraphs_exploded_words_exploded_args 
 LATERAL VIEW OUTER EXPLODE(`journalEntryProperties`.`simpleList`) view_exploded_journalentryproperties_simplelist AS exploded_journalentryproperties_simplelist 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`journalEntryProperties`.`simpleList`) view_removed_exploded_journalentryproperties_simplelist AS removed_exploded_journalentryproperties_simplelist 
 
 where `_removed`.`journalEntryProperties`.`type`='GenericJournalEntry' or `journalEntryProperties`.`type`='GenericJournalEntry';


!echo ------------------------;
!echo ------------------------ agent_todo_ACCOUNT_LOCKED_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_account_locked_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_account_locked_properties(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_ACCOUNT_LOCKED_PROPERTIES;

CREATE TABLE agent_todo_account_locked_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_account_locked_properties
 src_agent_core_agenttodo_agent_todo_account_locked_properties 
 where `_removed`.`toDoProperties`.`type`='ACCOUNT_LOCKED_PROPERTIES' or `toDoProperties`.`type`='ACCOUNT_LOCKED_PROPERTIES';


!echo ------------------------;
!echo ------------------------ agent_todo_DATE_OF_BIRTH_SUMMARY;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_date_of_birth_summary
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_date_of_birth_summary(
`toDoProperties` STRUCT<`dateOfBirthSummary`:STRUCT<`effectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`contractId`:STRING
,`processId`:STRING
,`claimantId`:STRING
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`dateOfBirthSummary`:STRUCT<`effectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`contractId`:STRING
,`processId`:STRING
,`claimantId`:STRING
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_DATE_OF_BIRTH_SUMMARY;

CREATE TABLE agent_todo_date_of_birth_summary STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`dateOfBirthSummary`.`contractId`, `toDoProperties`.`dateOfBirthSummary`.`contractId`) as toDoProperties_dateOfBirthSummary_contractId, 
COALESCE(CAST(`_removed`.`toDoProperties`.`dateOfBirthSummary`.`effectiveDate`.`hasDate` as STRING), CAST(`toDoProperties`.`dateOfBirthSummary`.`effectiveDate`.`hasDate` as STRING)) as toDoProperties_dateOfBirthSummary_effectiveDate_hasDate, 
COALESCE(`_removed`.`toDoProperties`.`dateOfBirthSummary`.`effectiveDate`.`knownDate`, `toDoProperties`.`dateOfBirthSummary`.`effectiveDate`.`knownDate`) as toDoProperties_dateOfBirthSummary_effectiveDate_knownDate, 
COALESCE(`_removed`.`toDoProperties`.`dateOfBirthSummary`.`effectiveDate`.`type`, `toDoProperties`.`dateOfBirthSummary`.`effectiveDate`.`type`) as toDoProperties_dateOfBirthSummary_effectiveDate_type, 
COALESCE(`_removed`.`toDoProperties`.`dateOfBirthSummary`.`effectiveDate`.`date`, `toDoProperties`.`dateOfBirthSummary`.`effectiveDate`.`date`) as toDoProperties_dateOfBirthSummary_effectiveDate_date, 
COALESCE(CAST(`_removed`.`toDoProperties`.`dateOfBirthSummary`.`paymentEffectiveDate`.`hasDate` as STRING), CAST(`toDoProperties`.`dateOfBirthSummary`.`paymentEffectiveDate`.`hasDate` as STRING)) as toDoProperties_dateOfBirthSummary_paymentEffectiveDate_hasDate, 
COALESCE(`_removed`.`toDoProperties`.`dateOfBirthSummary`.`paymentEffectiveDate`.`knownDate`, `toDoProperties`.`dateOfBirthSummary`.`paymentEffectiveDate`.`knownDate`) as toDoProperties_dateOfBirthSummary_paymentEffectiveDate_knownDate, 
COALESCE(`_removed`.`toDoProperties`.`dateOfBirthSummary`.`paymentEffectiveDate`.`type`, `toDoProperties`.`dateOfBirthSummary`.`paymentEffectiveDate`.`type`) as toDoProperties_dateOfBirthSummary_paymentEffectiveDate_type, 
COALESCE(`_removed`.`toDoProperties`.`dateOfBirthSummary`.`paymentEffectiveDate`.`date`, `toDoProperties`.`dateOfBirthSummary`.`paymentEffectiveDate`.`date`) as toDoProperties_dateOfBirthSummary_paymentEffectiveDate_date, 
COALESCE(`_removed`.`toDoProperties`.`dateOfBirthSummary`.`processId`, `toDoProperties`.`dateOfBirthSummary`.`processId`) as toDoProperties_dateOfBirthSummary_processId, 
COALESCE(`_removed`.`toDoProperties`.`dateOfBirthSummary`.`claimantId`, `toDoProperties`.`dateOfBirthSummary`.`claimantId`) as toDoProperties_dateOfBirthSummary_claimantId, 
COALESCE(CAST(`_removed`.`toDoProperties`.`dateOfBirthSummary`.`confirmationRequired` as STRING), CAST(`toDoProperties`.`dateOfBirthSummary`.`confirmationRequired` as STRING)) as toDoProperties_dateOfBirthSummary_confirmationRequired, 
COALESCE(CAST(`_removed`.`toDoProperties`.`dateOfBirthSummary`.`hideDetailsForPartnerDeclaration` as STRING), CAST(`toDoProperties`.`dateOfBirthSummary`.`hideDetailsForPartnerDeclaration` as STRING)) as toDoProperties_dateOfBirthSummary_hideDetailsForPartnerDeclaration, 
COALESCE(CAST(`_removed`.`toDoProperties`.`dateOfBirthSummary`.`perClaimant` as STRING), CAST(`toDoProperties`.`dateOfBirthSummary`.`perClaimant` as STRING)) as toDoProperties_dateOfBirthSummary_perClaimant, 
COALESCE(`_removed`.`toDoProperties`.`dateOfBirthSummary`.`type`, `toDoProperties`.`dateOfBirthSummary`.`type`) as toDoProperties_dateOfBirthSummary_type, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_date_of_birth_summary
 src_agent_core_agenttodo_agent_todo_date_of_birth_summary 
 where `_removed`.`toDoProperties`.`type`='DATE_OF_BIRTH_SUMMARY' or `toDoProperties`.`type`='DATE_OF_BIRTH_SUMMARY';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_EARNINGS_SUPPLIED;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_earnings_supplied
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_earnings_supplied(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`assessmentPeriodId`:STRING
,`message`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`assessmentPeriodId`:STRING
,`message`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_EARNINGS_SUPPLIED;

CREATE TABLE agent_todo_archive_earnings_supplied STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`assessmentPeriodId`, `toDoProperties`.`assessmentPeriodId`) as toDoProperties_assessmentPeriodId, 
COALESCE(`_removed`.`toDoProperties`.`message`, `toDoProperties`.`message`) as toDoProperties_message, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_earnings_supplied
 src_agent_core_agenttodoarchive_agent_todo_archive_earnings_supplied 
 where `_removed`.`toDoProperties`.`type`='EARNINGS_SUPPLIED' or `toDoProperties`.`type`='EARNINGS_SUPPLIED';


!echo ------------------------;
!echo ------------------------ agent_todo_UPDATE_CIS_FROM_CIS_500_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_update_cis_from_cis_500_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_update_cis_from_cis_500_properties(
`toDoProperties` STRUCT<`cis500Document`:STRUCT<`updatedAt`:STRUCT<`d_date`:STRING>
,`fileName`:STRING
,`fileSize`:STRING
,`id`:STRING
,`revision`:STRING
,`updatedBy`:STRING>
,`triggerReason`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`cis500Document`:STRUCT<`updatedAt`:STRUCT<`d_date`:STRING>
,`fileName`:STRING
,`fileSize`:STRING
,`id`:STRING
,`revision`:STRING
,`updatedBy`:STRING>
,`triggerReason`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_UPDATE_CIS_FROM_CIS_500_PROPERTIES;

CREATE TABLE agent_todo_update_cis_from_cis_500_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`cis500Document`.`fileName`, `toDoProperties`.`cis500Document`.`fileName`) as toDoProperties_cis500Document_fileName, 
COALESCE(`_removed`.`toDoProperties`.`cis500Document`.`fileSize`, `toDoProperties`.`cis500Document`.`fileSize`) as toDoProperties_cis500Document_fileSize, 
COALESCE(`_removed`.`toDoProperties`.`cis500Document`.`id`, `toDoProperties`.`cis500Document`.`id`) as toDoProperties_cis500Document_id, 
COALESCE(`_removed`.`toDoProperties`.`cis500Document`.`revision`, `toDoProperties`.`cis500Document`.`revision`) as toDoProperties_cis500Document_revision, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`toDoProperties`.`cis500Document`.`updatedAt`.`d_date`, LENGTH(`_removed`.`toDoProperties`.`cis500Document`.`updatedAt`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`cis500Document`.`updatedAt`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`cis500Document`.`updatedAt`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`cis500Document`.`updatedAt`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`cis500Document`.`updatedAt`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`toDoProperties`.`cis500Document`.`updatedAt`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`toDoProperties`.`cis500Document`.`updatedAt`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`toDoProperties`.`cis500Document`.`updatedAt`.`d_date`, LENGTH(`toDoProperties`.`cis500Document`.`updatedAt`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`toDoProperties`.`cis500Document`.`updatedAt`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`cis500Document`.`updatedAt`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`toDoProperties`.`cis500Document`.`updatedAt`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`cis500Document`.`updatedAt`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`toDoProperties`.`cis500Document`.`updatedAt`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`toDoProperties`.`cis500Document`.`updatedAt`.`d_date`, 21, 3)) AS TIMESTAMP) END) as toDoProperties_cis500Document_updatedAt_d_date, 
COALESCE(`_removed`.`toDoProperties`.`cis500Document`.`updatedBy`, `toDoProperties`.`cis500Document`.`updatedBy`) as toDoProperties_cis500Document_updatedBy, 
COALESCE(`_removed`.`toDoProperties`.`triggerReason`, `toDoProperties`.`triggerReason`) as toDoProperties_triggerReason, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_update_cis_from_cis_500_properties
 src_agent_core_agenttodo_agent_todo_update_cis_from_cis_500_properties 
 where `_removed`.`toDoProperties`.`type`='UPDATE_CIS_FROM_CIS_500_PROPERTIES' or `toDoProperties`.`type`='UPDATE_CIS_FROM_CIS_500_PROPERTIES';


!echo ------------------------;
!echo ------------------------ claimant_commitment_LOW;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_claimantcommitment_claimant_commitment_low
;

CREATE EXTERNAL TABLE src_core_claimantcommitment_claimant_commitment_low(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`properties` STRUCT<`activities`:STRING
,`circumstancesFollowOnSanction`:STRING
,`circumstancesInitialSanction`:STRING
,`circumstancesLostWorkSanction`:STRING
,`commitment`:STRING
,`followOnSanction`:STRING
,`initialSanction`:STRING
,`claimantCommitmentVersion`:STRING
,`type`:STRING>
,`_id` STRUCT<`contractId`:STRING
,`claimantId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`properties`:STRUCT<`activities`:STRING
,`circumstancesFollowOnSanction`:STRING
,`circumstancesInitialSanction`:STRING
,`circumstancesLostWorkSanction`:STRING
,`commitment`:STRING
,`followOnSanction`:STRING
,`initialSanction`:STRING
,`claimantCommitmentVersion`:STRING
,`type`:STRING>
,`_id`:STRUCT<`contractId`:STRING
,`claimantId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/claimantCommitment';

DROP TABLE IF EXISTS claimant_commitment_LOW;

CREATE TABLE claimant_commitment_low STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`properties`.`activities`, `properties`.`activities`) as properties_activities, 
COALESCE(`_removed`.`properties`.`circumstancesFollowOnSanction`, `properties`.`circumstancesFollowOnSanction`) as properties_circumstancesFollowOnSanction, 
COALESCE(`_removed`.`properties`.`circumstancesInitialSanction`, `properties`.`circumstancesInitialSanction`) as properties_circumstancesInitialSanction, 
COALESCE(`_removed`.`properties`.`circumstancesLostWorkSanction`, `properties`.`circumstancesLostWorkSanction`) as properties_circumstancesLostWorkSanction, 
COALESCE(`_removed`.`properties`.`commitment`, `properties`.`commitment`) as properties_commitment, 
COALESCE(`_removed`.`properties`.`followOnSanction`, `properties`.`followOnSanction`) as properties_followOnSanction, 
COALESCE(`_removed`.`properties`.`initialSanction`, `properties`.`initialSanction`) as properties_initialSanction, 
COALESCE(`_removed`.`properties`.`claimantCommitmentVersion`, `properties`.`claimantCommitmentVersion`) as properties_claimantCommitmentVersion, 
COALESCE(`_removed`.`properties`.`type`, `properties`.`type`) as properties_type, 
COALESCE(`_removed`.`_id`.`contractId`, `_id`.`contractId`) as contractId, 
COALESCE(`_removed`.`_id`.`claimantId`, `_id`.`claimantId`) as claimantId FROM src_core_claimantcommitment_claimant_commitment_low
 src_core_claimantcommitment_claimant_commitment_low 
 where `_removed`.`properties`.`type`='LOW' or `properties`.`type`='LOW';


!echo ------------------------;
!echo ------------------------ agent_todo_INVESTIGATE_DUPLICATE_ACCOUNT_TODO_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_investigate_duplicate_account_todo_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_investigate_duplicate_account_todo_properties(
`toDoProperties` STRUCT<`duplicateContractIds`:ARRAY<STRING>
,`alreadyForwardedToFraudTeam`:BOOLEAN
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`duplicateContractIds`:ARRAY<STRING>
,`alreadyForwardedToFraudTeam`:BOOLEAN
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_INVESTIGATE_DUPLICATE_ACCOUNT_TODO_PROPERTIES;

CREATE TABLE agent_todo_investigate_duplicate_account_todo_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(CAST(`_removed`.`toDoProperties`.`alreadyForwardedToFraudTeam` as STRING), CAST(`toDoProperties`.`alreadyForwardedToFraudTeam` as STRING)) as toDoProperties_alreadyForwardedToFraudTeam, 
COALESCE(`removed_exploded_todoproperties_duplicatecontractids`, `exploded_todoproperties_duplicatecontractids`) as toDoProperties_duplicateContractIds, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_investigate_duplicate_account_todo_properties
 LATERAL VIEW OUTER EXPLODE(`toDoProperties`.`duplicateContractIds`) view_exploded_todoproperties_duplicatecontractids AS exploded_todoproperties_duplicatecontractids 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`toDoProperties`.`duplicateContractIds`) view_removed_exploded_todoproperties_duplicatecontractids AS removed_exploded_todoproperties_duplicatecontractids 
 
 where `_removed`.`toDoProperties`.`type`='INVESTIGATE_DUPLICATE_ACCOUNT_TODO_PROPERTIES' or `toDoProperties`.`type`='INVESTIGATE_DUPLICATE_ACCOUNT_TODO_PROPERTIES';


!echo ------------------------;
!echo ------------------------ journal_AnnualVerificationJournalEntry;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_journal_journal_annualverificationjournalentry
;

CREATE EXTERNAL TABLE src_core_journal_journal_annualverificationjournalentry(
`journalEntryProperties` STRUCT<`declarationSummaryDto`:STRUCT<`addressSummary`:STRUCT<`declarationSummaryKey`:STRUCT<`claimantId`:STRING
,`claimantToDoType`:STRING>
,`summary`:STRUCT<`confirmationRequired`:BOOLEAN
,`contractId`:STRING
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN>
,`hasFullDetails`:BOOLEAN>
,`bankDetailsSummary`:STRUCT<`declarationSummaryKey`:STRUCT<`claimantId`:STRING
,`claimantToDoType`:STRING>
,`summary`:STRUCT<`confirmationRequired`:BOOLEAN
,`contractId`:STRING
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN>
,`hasFullDetails`:BOOLEAN>
,`childcareSummary`:STRUCT<`declarationSummaryKey`:STRUCT<`claimantId`:STRING
,`claimantToDoType`:STRING>
,`summary`:STRUCT<`confirmationRequired`:BOOLEAN
,`contractId`:STRING
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN>
,`hasFullDetails`:BOOLEAN>
,`housingSummary`:STRUCT<`declarationSummaryKey`:STRUCT<`claimantId`:STRING
,`claimantToDoType`:STRING>
,`summary`:STRUCT<`confirmationRequired`:BOOLEAN
,`contractId`:STRING
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN>
,`hasFullDetails`:BOOLEAN>
,`partner`:STRUCT<`declarationSummaryKey`:STRUCT<`claimantId`:STRING
,`claimantToDoType`:STRING>
,`summary`:STRUCT<`confirmationRequired`:BOOLEAN
,`contractId`:STRING
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN>
,`hasFullDetails`:BOOLEAN>
,`partnerQuestion`:STRUCT<`declarationSummaryKey`:STRUCT<`claimantId`:STRING
,`claimantToDoType`:STRING>
,`summary`:STRUCT<`confirmationRequired`:BOOLEAN
,`contractId`:STRING
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN>
,`hasFullDetails`:BOOLEAN>
,`person`:STRUCT<`declarationSummaryKey`:STRUCT<`claimantId`:STRING
,`claimantToDoType`:STRING>
,`summary`:STRUCT<`confirmationRequired`:BOOLEAN
,`contractId`:STRING
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN>
,`hasFullDetails`:BOOLEAN>
,`whoLivesWithYouSummary`:STRUCT<`declarationSummaryKey`:STRUCT<`claimantId`:STRING
,`claimantToDoType`:STRING>
,`summary`:STRUCT<`confirmationRequired`:BOOLEAN
,`contractId`:STRING
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN>
,`hasFullDetails`:BOOLEAN>
,`savingsAndInvestmentSummary`:STRUCT<`declarationSummaryKey`:STRUCT<`claimantId`:STRING
,`claimantToDoType`:STRING>
,`summary`:STRUCT<`confirmationRequired`:BOOLEAN
,`contractId`:STRING
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN>
,`hasFullDetails`:BOOLEAN>>
,`changes`:ARRAY<STRUCT<`declarationType`:STRING
,`name`:STRING
>>
,`declaringClaimantId`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`journalId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`journalEntryProperties`:STRUCT<`declarationSummaryDto`:STRUCT<`addressSummary`:STRUCT<`declarationSummaryKey`:STRUCT<`claimantId`:STRING
,`claimantToDoType`:STRING>
,`summary`:STRUCT<`confirmationRequired`:BOOLEAN
,`contractId`:STRING
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN>
,`hasFullDetails`:BOOLEAN>
,`bankDetailsSummary`:STRUCT<`declarationSummaryKey`:STRUCT<`claimantId`:STRING
,`claimantToDoType`:STRING>
,`summary`:STRUCT<`confirmationRequired`:BOOLEAN
,`contractId`:STRING
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN>
,`hasFullDetails`:BOOLEAN>
,`childcareSummary`:STRUCT<`declarationSummaryKey`:STRUCT<`claimantId`:STRING
,`claimantToDoType`:STRING>
,`summary`:STRUCT<`confirmationRequired`:BOOLEAN
,`contractId`:STRING
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN>
,`hasFullDetails`:BOOLEAN>
,`housingSummary`:STRUCT<`declarationSummaryKey`:STRUCT<`claimantId`:STRING
,`claimantToDoType`:STRING>
,`summary`:STRUCT<`confirmationRequired`:BOOLEAN
,`contractId`:STRING
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN>
,`hasFullDetails`:BOOLEAN>
,`partner`:STRUCT<`declarationSummaryKey`:STRUCT<`claimantId`:STRING
,`claimantToDoType`:STRING>
,`summary`:STRUCT<`confirmationRequired`:BOOLEAN
,`contractId`:STRING
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN>
,`hasFullDetails`:BOOLEAN>
,`partnerQuestion`:STRUCT<`declarationSummaryKey`:STRUCT<`claimantId`:STRING
,`claimantToDoType`:STRING>
,`summary`:STRUCT<`confirmationRequired`:BOOLEAN
,`contractId`:STRING
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN>
,`hasFullDetails`:BOOLEAN>
,`person`:STRUCT<`declarationSummaryKey`:STRUCT<`claimantId`:STRING
,`claimantToDoType`:STRING>
,`summary`:STRUCT<`confirmationRequired`:BOOLEAN
,`contractId`:STRING
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN>
,`hasFullDetails`:BOOLEAN>
,`whoLivesWithYouSummary`:STRUCT<`declarationSummaryKey`:STRUCT<`claimantId`:STRING
,`claimantToDoType`:STRING>
,`summary`:STRUCT<`confirmationRequired`:BOOLEAN
,`contractId`:STRING
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN>
,`hasFullDetails`:BOOLEAN>
,`savingsAndInvestmentSummary`:STRUCT<`declarationSummaryKey`:STRUCT<`claimantId`:STRING
,`claimantToDoType`:STRING>
,`summary`:STRUCT<`confirmationRequired`:BOOLEAN
,`contractId`:STRING
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN>
,`hasFullDetails`:BOOLEAN>>
,`changes`:ARRAY<STRUCT<`declarationType`:STRING
,`name`:STRING
>>
,`declaringClaimantId`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`journalId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/journal';

DROP TABLE IF EXISTS journal_AnnualVerificationJournalEntry;

CREATE TABLE journal_annualverificationjournalentry STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`removed_exploded_journalentryproperties_changes`.`declarationType`, `exploded_journalentryproperties_changes`.`declarationType`) as journalEntryProperties_changes_declarationType, 
COALESCE(`removed_exploded_journalentryproperties_changes`.`name`, `exploded_journalentryproperties_changes`.`name`) as journalEntryProperties_changes_name, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`addressSummary`.`declarationSummaryKey`.`claimantId`, `journalEntryProperties`.`declarationSummaryDto`.`addressSummary`.`declarationSummaryKey`.`claimantId`) as journalEntryProperties_declarationSummaryDto_addressSummary_declarationSummaryKey_claimantId, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`addressSummary`.`declarationSummaryKey`.`claimantToDoType`, `journalEntryProperties`.`declarationSummaryDto`.`addressSummary`.`declarationSummaryKey`.`claimantToDoType`) as journalEntryProperties_declarationSummaryDto_addressSummary_declarationSummaryKey_claimantToDoType, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`addressSummary`.`hasFullDetails` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`addressSummary`.`hasFullDetails` as STRING)) as journalEntryProperties_declarationSummaryDto_addressSummary_hasFullDetails, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`addressSummary`.`summary`.`confirmationRequired` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`addressSummary`.`summary`.`confirmationRequired` as STRING)) as journalEntryProperties_declarationSummaryDto_addressSummary_summary_confirmationRequired, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`addressSummary`.`summary`.`contractId`, `journalEntryProperties`.`declarationSummaryDto`.`addressSummary`.`summary`.`contractId`) as journalEntryProperties_declarationSummaryDto_addressSummary_summary_contractId, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`addressSummary`.`summary`.`hideDetailsForPartnerDeclaration` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`addressSummary`.`summary`.`hideDetailsForPartnerDeclaration` as STRING)) as journalEntryProperties_declarationSummaryDto_addressSummary_summary_hideDetailsForPartnerDeclaration, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`addressSummary`.`summary`.`perClaimant` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`addressSummary`.`summary`.`perClaimant` as STRING)) as journalEntryProperties_declarationSummaryDto_addressSummary_summary_perClaimant, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`bankDetailsSummary`.`declarationSummaryKey`.`claimantId`, `journalEntryProperties`.`declarationSummaryDto`.`bankDetailsSummary`.`declarationSummaryKey`.`claimantId`) as journalEntryProperties_declarationSummaryDto_bankDetailsSummary_declarationSummaryKey_claimantId, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`bankDetailsSummary`.`declarationSummaryKey`.`claimantToDoType`, `journalEntryProperties`.`declarationSummaryDto`.`bankDetailsSummary`.`declarationSummaryKey`.`claimantToDoType`) as journalEntryProperties_declarationSummaryDto_bankDetailsSummary_declarationSummaryKey_claimantToDoType, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`bankDetailsSummary`.`hasFullDetails` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`bankDetailsSummary`.`hasFullDetails` as STRING)) as journalEntryProperties_declarationSummaryDto_bankDetailsSummary_hasFullDetails, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`bankDetailsSummary`.`summary`.`confirmationRequired` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`bankDetailsSummary`.`summary`.`confirmationRequired` as STRING)) as journalEntryProperties_declarationSummaryDto_bankDetailsSummary_summary_confirmationRequired, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`bankDetailsSummary`.`summary`.`contractId`, `journalEntryProperties`.`declarationSummaryDto`.`bankDetailsSummary`.`summary`.`contractId`) as journalEntryProperties_declarationSummaryDto_bankDetailsSummary_summary_contractId, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`bankDetailsSummary`.`summary`.`hideDetailsForPartnerDeclaration` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`bankDetailsSummary`.`summary`.`hideDetailsForPartnerDeclaration` as STRING)) as journalEntryProperties_declarationSummaryDto_bankDetailsSummary_summary_hideDetailsForPartnerDeclaration, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`bankDetailsSummary`.`summary`.`perClaimant` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`bankDetailsSummary`.`summary`.`perClaimant` as STRING)) as journalEntryProperties_declarationSummaryDto_bankDetailsSummary_summary_perClaimant, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`childcareSummary`.`declarationSummaryKey`.`claimantId`, `journalEntryProperties`.`declarationSummaryDto`.`childcareSummary`.`declarationSummaryKey`.`claimantId`) as journalEntryProperties_declarationSummaryDto_childcareSummary_declarationSummaryKey_claimantId, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`childcareSummary`.`declarationSummaryKey`.`claimantToDoType`, `journalEntryProperties`.`declarationSummaryDto`.`childcareSummary`.`declarationSummaryKey`.`claimantToDoType`) as journalEntryProperties_declarationSummaryDto_childcareSummary_declarationSummaryKey_claimantToDoType, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`childcareSummary`.`hasFullDetails` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`childcareSummary`.`hasFullDetails` as STRING)) as journalEntryProperties_declarationSummaryDto_childcareSummary_hasFullDetails, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`childcareSummary`.`summary`.`confirmationRequired` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`childcareSummary`.`summary`.`confirmationRequired` as STRING)) as journalEntryProperties_declarationSummaryDto_childcareSummary_summary_confirmationRequired, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`childcareSummary`.`summary`.`contractId`, `journalEntryProperties`.`declarationSummaryDto`.`childcareSummary`.`summary`.`contractId`) as journalEntryProperties_declarationSummaryDto_childcareSummary_summary_contractId, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`childcareSummary`.`summary`.`hideDetailsForPartnerDeclaration` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`childcareSummary`.`summary`.`hideDetailsForPartnerDeclaration` as STRING)) as journalEntryProperties_declarationSummaryDto_childcareSummary_summary_hideDetailsForPartnerDeclaration, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`childcareSummary`.`summary`.`perClaimant` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`childcareSummary`.`summary`.`perClaimant` as STRING)) as journalEntryProperties_declarationSummaryDto_childcareSummary_summary_perClaimant, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`declarationSummaryKey`.`claimantId`, `journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`declarationSummaryKey`.`claimantId`) as journalEntryProperties_declarationSummaryDto_housingSummary_declarationSummaryKey_claimantId, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`declarationSummaryKey`.`claimantToDoType`, `journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`declarationSummaryKey`.`claimantToDoType`) as journalEntryProperties_declarationSummaryDto_housingSummary_declarationSummaryKey_claimantToDoType, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`hasFullDetails` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`hasFullDetails` as STRING)) as journalEntryProperties_declarationSummaryDto_housingSummary_hasFullDetails, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`summary`.`confirmationRequired` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`summary`.`confirmationRequired` as STRING)) as journalEntryProperties_declarationSummaryDto_housingSummary_summary_confirmationRequired, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`summary`.`contractId`, `journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`summary`.`contractId`) as journalEntryProperties_declarationSummaryDto_housingSummary_summary_contractId, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`summary`.`hideDetailsForPartnerDeclaration` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`summary`.`hideDetailsForPartnerDeclaration` as STRING)) as journalEntryProperties_declarationSummaryDto_housingSummary_summary_hideDetailsForPartnerDeclaration, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`summary`.`perClaimant` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`summary`.`perClaimant` as STRING)) as journalEntryProperties_declarationSummaryDto_housingSummary_summary_perClaimant, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`partner`.`declarationSummaryKey`.`claimantId`, `journalEntryProperties`.`declarationSummaryDto`.`partner`.`declarationSummaryKey`.`claimantId`) as journalEntryProperties_declarationSummaryDto_partner_declarationSummaryKey_claimantId, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`partner`.`declarationSummaryKey`.`claimantToDoType`, `journalEntryProperties`.`declarationSummaryDto`.`partner`.`declarationSummaryKey`.`claimantToDoType`) as journalEntryProperties_declarationSummaryDto_partner_declarationSummaryKey_claimantToDoType, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`partner`.`hasFullDetails` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`partner`.`hasFullDetails` as STRING)) as journalEntryProperties_declarationSummaryDto_partner_hasFullDetails, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`partner`.`summary`.`confirmationRequired` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`partner`.`summary`.`confirmationRequired` as STRING)) as journalEntryProperties_declarationSummaryDto_partner_summary_confirmationRequired, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`partner`.`summary`.`contractId`, `journalEntryProperties`.`declarationSummaryDto`.`partner`.`summary`.`contractId`) as journalEntryProperties_declarationSummaryDto_partner_summary_contractId, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`partner`.`summary`.`hideDetailsForPartnerDeclaration` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`partner`.`summary`.`hideDetailsForPartnerDeclaration` as STRING)) as journalEntryProperties_declarationSummaryDto_partner_summary_hideDetailsForPartnerDeclaration, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`partner`.`summary`.`perClaimant` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`partner`.`summary`.`perClaimant` as STRING)) as journalEntryProperties_declarationSummaryDto_partner_summary_perClaimant, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`partnerQuestion`.`declarationSummaryKey`.`claimantId`, `journalEntryProperties`.`declarationSummaryDto`.`partnerQuestion`.`declarationSummaryKey`.`claimantId`) as journalEntryProperties_declarationSummaryDto_partnerQuestion_declarationSummaryKey_claimantId, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`partnerQuestion`.`declarationSummaryKey`.`claimantToDoType`, `journalEntryProperties`.`declarationSummaryDto`.`partnerQuestion`.`declarationSummaryKey`.`claimantToDoType`) as journalEntryProperties_declarationSummaryDto_partnerQuestion_declarationSummaryKey_claimantToDoType, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`partnerQuestion`.`hasFullDetails` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`partnerQuestion`.`hasFullDetails` as STRING)) as journalEntryProperties_declarationSummaryDto_partnerQuestion_hasFullDetails, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`partnerQuestion`.`summary`.`confirmationRequired` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`partnerQuestion`.`summary`.`confirmationRequired` as STRING)) as journalEntryProperties_declarationSummaryDto_partnerQuestion_summary_confirmationRequired, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`partnerQuestion`.`summary`.`contractId`, `journalEntryProperties`.`declarationSummaryDto`.`partnerQuestion`.`summary`.`contractId`) as journalEntryProperties_declarationSummaryDto_partnerQuestion_summary_contractId, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`partnerQuestion`.`summary`.`hideDetailsForPartnerDeclaration` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`partnerQuestion`.`summary`.`hideDetailsForPartnerDeclaration` as STRING)) as journalEntryProperties_declarationSummaryDto_partnerQuestion_summary_hideDetailsForPartnerDeclaration, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`partnerQuestion`.`summary`.`perClaimant` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`partnerQuestion`.`summary`.`perClaimant` as STRING)) as journalEntryProperties_declarationSummaryDto_partnerQuestion_summary_perClaimant, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`person`.`declarationSummaryKey`.`claimantId`, `journalEntryProperties`.`declarationSummaryDto`.`person`.`declarationSummaryKey`.`claimantId`) as journalEntryProperties_declarationSummaryDto_person_declarationSummaryKey_claimantId, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`person`.`declarationSummaryKey`.`claimantToDoType`, `journalEntryProperties`.`declarationSummaryDto`.`person`.`declarationSummaryKey`.`claimantToDoType`) as journalEntryProperties_declarationSummaryDto_person_declarationSummaryKey_claimantToDoType, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`person`.`hasFullDetails` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`person`.`hasFullDetails` as STRING)) as journalEntryProperties_declarationSummaryDto_person_hasFullDetails, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`person`.`summary`.`confirmationRequired` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`person`.`summary`.`confirmationRequired` as STRING)) as journalEntryProperties_declarationSummaryDto_person_summary_confirmationRequired, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`person`.`summary`.`contractId`, `journalEntryProperties`.`declarationSummaryDto`.`person`.`summary`.`contractId`) as journalEntryProperties_declarationSummaryDto_person_summary_contractId, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`person`.`summary`.`hideDetailsForPartnerDeclaration` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`person`.`summary`.`hideDetailsForPartnerDeclaration` as STRING)) as journalEntryProperties_declarationSummaryDto_person_summary_hideDetailsForPartnerDeclaration, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`person`.`summary`.`perClaimant` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`person`.`summary`.`perClaimant` as STRING)) as journalEntryProperties_declarationSummaryDto_person_summary_perClaimant, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`whoLivesWithYouSummary`.`declarationSummaryKey`.`claimantId`, `journalEntryProperties`.`declarationSummaryDto`.`whoLivesWithYouSummary`.`declarationSummaryKey`.`claimantId`) as journalEntryProperties_declarationSummaryDto_whoLivesWithYouSummary_declarationSummaryKey_claimantId, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`whoLivesWithYouSummary`.`declarationSummaryKey`.`claimantToDoType`, `journalEntryProperties`.`declarationSummaryDto`.`whoLivesWithYouSummary`.`declarationSummaryKey`.`claimantToDoType`) as journalEntryProperties_declarationSummaryDto_whoLivesWithYouSummary_declarationSummaryKey_claimantToDoType, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`whoLivesWithYouSummary`.`hasFullDetails` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`whoLivesWithYouSummary`.`hasFullDetails` as STRING)) as journalEntryProperties_declarationSummaryDto_whoLivesWithYouSummary_hasFullDetails, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`whoLivesWithYouSummary`.`summary`.`confirmationRequired` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`whoLivesWithYouSummary`.`summary`.`confirmationRequired` as STRING)) as journalEntryProperties_declarationSummaryDto_whoLivesWithYouSummary_summary_confirmationRequired, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`whoLivesWithYouSummary`.`summary`.`contractId`, `journalEntryProperties`.`declarationSummaryDto`.`whoLivesWithYouSummary`.`summary`.`contractId`) as journalEntryProperties_declarationSummaryDto_whoLivesWithYouSummary_summary_contractId, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`whoLivesWithYouSummary`.`summary`.`hideDetailsForPartnerDeclaration` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`whoLivesWithYouSummary`.`summary`.`hideDetailsForPartnerDeclaration` as STRING)) as journalEntryProperties_declarationSummaryDto_whoLivesWithYouSummary_summary_hideDetailsForPartnerDeclaration, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`whoLivesWithYouSummary`.`summary`.`perClaimant` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`whoLivesWithYouSummary`.`summary`.`perClaimant` as STRING)) as journalEntryProperties_declarationSummaryDto_whoLivesWithYouSummary_summary_perClaimant, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`savingsAndInvestmentSummary`.`declarationSummaryKey`.`claimantId`, `journalEntryProperties`.`declarationSummaryDto`.`savingsAndInvestmentSummary`.`declarationSummaryKey`.`claimantId`) as journalEntryProperties_declarationSummaryDto_savingsAndInvestmentSummary_declarationSummaryKey_claimantId, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`savingsAndInvestmentSummary`.`declarationSummaryKey`.`claimantToDoType`, `journalEntryProperties`.`declarationSummaryDto`.`savingsAndInvestmentSummary`.`declarationSummaryKey`.`claimantToDoType`) as journalEntryProperties_declarationSummaryDto_savingsAndInvestmentSummary_declarationSummaryKey_claimantToDoType, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`savingsAndInvestmentSummary`.`hasFullDetails` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`savingsAndInvestmentSummary`.`hasFullDetails` as STRING)) as journalEntryProperties_declarationSummaryDto_savingsAndInvestmentSummary_hasFullDetails, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`savingsAndInvestmentSummary`.`summary`.`confirmationRequired` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`savingsAndInvestmentSummary`.`summary`.`confirmationRequired` as STRING)) as journalEntryProperties_declarationSummaryDto_savingsAndInvestmentSummary_summary_confirmationRequired, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`savingsAndInvestmentSummary`.`summary`.`contractId`, `journalEntryProperties`.`declarationSummaryDto`.`savingsAndInvestmentSummary`.`summary`.`contractId`) as journalEntryProperties_declarationSummaryDto_savingsAndInvestmentSummary_summary_contractId, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`savingsAndInvestmentSummary`.`summary`.`hideDetailsForPartnerDeclaration` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`savingsAndInvestmentSummary`.`summary`.`hideDetailsForPartnerDeclaration` as STRING)) as journalEntryProperties_declarationSummaryDto_savingsAndInvestmentSummary_summary_hideDetailsForPartnerDeclaration, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`savingsAndInvestmentSummary`.`summary`.`perClaimant` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`savingsAndInvestmentSummary`.`summary`.`perClaimant` as STRING)) as journalEntryProperties_declarationSummaryDto_savingsAndInvestmentSummary_summary_perClaimant, 
COALESCE(`_removed`.`journalEntryProperties`.`declaringClaimantId`, `journalEntryProperties`.`declaringClaimantId`) as journalEntryProperties_declaringClaimantId, 
COALESCE(`_removed`.`journalEntryProperties`.`type`, `journalEntryProperties`.`type`) as journalEntryProperties_type, 
COALESCE(`_removed`.`_id`.`journalId`, `_id`.`journalId`) as id FROM src_core_journal_journal_annualverificationjournalentry
 LATERAL VIEW OUTER EXPLODE(`journalEntryProperties`.`changes`) view_exploded_journalentryproperties_changes AS exploded_journalentryproperties_changes 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`journalEntryProperties`.`changes`) view_removed_exploded_journalentryproperties_changes AS removed_exploded_journalentryproperties_changes 
 
 where `_removed`.`journalEntryProperties`.`type`='AnnualVerificationJournalEntry' or `journalEntryProperties`.`type`='AnnualVerificationJournalEntry';


!echo ------------------------;
!echo ------------------------ todo;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_todo_todo
;

CREATE EXTERNAL TABLE src_core_todo_todo(
`attachment` STRUCT<`updatedAt`:STRUCT<`d_date`:STRING>
,`fileName`:STRING
,`fileSize`:STRING
,`id`:STRING
,`revision`:STRING
,`updatedBy`:STRING>
,`completion` STRUCT<`completedBy`:STRUCT<`agentId`:STRING
,`type`:STRING
,`claimantId`:STRING>
,`completionDate`:STRING
,`completionTime`:STRING
,`version`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`canDo` ARRAY<STRING>
,`canSee` ARRAY<STRING>
,`flags` ARRAY<STRING>
,`_version` STRING
,`cancelled` STRING
,`contractId` STRING
,`deadlineDate` STRING
,`deadlineTime` STRING
,`description` STRING
,`informAgentWhenCompleted` BOOLEAN
,`relatedToClaimantId` STRING
,`status` STRING
,`title` STRING
,`toDoId` STRING
,`type` STRING
,`_removed` STRUCT<`attachment`:STRUCT<`updatedAt`:STRUCT<`d_date`:STRING>
,`fileName`:STRING
,`fileSize`:STRING
,`id`:STRING
,`revision`:STRING
,`updatedBy`:STRING>
,`completion`:STRUCT<`completedBy`:STRUCT<`agentId`:STRING
,`type`:STRING
,`claimantId`:STRING>
,`completionDate`:STRING
,`completionTime`:STRING
,`version`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`canDo`:ARRAY<STRING>
,`canSee`:ARRAY<STRING>
,`flags`:ARRAY<STRING>
,`_version`:STRING
,`cancelled`:STRING
,`contractId`:STRING
,`deadlineDate`:STRING
,`deadlineTime`:STRING
,`description`:STRING
,`informAgentWhenCompleted`:BOOLEAN
,`relatedToClaimantId`:STRING
,`status`:STRING
,`title`:STRING
,`toDoId`:STRING
,`type`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/toDo';

DROP TABLE IF EXISTS todo;

CREATE TABLE todo STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`attachment`.`fileName`, `attachment`.`fileName`) as attachment_fileName, 
COALESCE(`_removed`.`attachment`.`fileSize`, `attachment`.`fileSize`) as attachment_fileSize, 
COALESCE(`_removed`.`attachment`.`id`, `attachment`.`id`) as attachment_id, 
COALESCE(`_removed`.`attachment`.`revision`, `attachment`.`revision`) as attachment_revision, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`attachment`.`updatedAt`.`d_date`, LENGTH(`_removed`.`attachment`.`updatedAt`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`attachment`.`updatedAt`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`attachment`.`updatedAt`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`attachment`.`updatedAt`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`attachment`.`updatedAt`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`attachment`.`updatedAt`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`attachment`.`updatedAt`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`attachment`.`updatedAt`.`d_date`, LENGTH(`attachment`.`updatedAt`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`attachment`.`updatedAt`.`d_date`, 1, 10), ' ', SUBSTR(`attachment`.`updatedAt`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`attachment`.`updatedAt`.`d_date`, 1, 10), ' ', SUBSTR(`attachment`.`updatedAt`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`attachment`.`updatedAt`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`attachment`.`updatedAt`.`d_date`, 21, 3)) AS TIMESTAMP) END) as attachment_updatedAt_d_date, 
COALESCE(`_removed`.`attachment`.`updatedBy`, `attachment`.`updatedBy`) as attachment_updatedBy, 
COALESCE(`removed_exploded_cando`, `exploded_cando`) as canDo, 
COALESCE(`removed_exploded_cansee`, `exploded_cansee`) as canSee, 
COALESCE(`_removed`.`cancelled`, `cancelled`) as cancelled, 
COALESCE(`_removed`.`completion`.`completedBy`.`agentId`, `completion`.`completedBy`.`agentId`) as completion_completedBy_agentId, 
COALESCE(`_removed`.`completion`.`completedBy`.`type`, `completion`.`completedBy`.`type`) as completion_completedBy_type, 
COALESCE(`_removed`.`completion`.`completedBy`.`claimantId`, `completion`.`completedBy`.`claimantId`) as completion_completedBy_claimantId, 
COALESCE(`_removed`.`completion`.`completionDate`, `completion`.`completionDate`) as completion_completionDate, 
COALESCE(`_removed`.`completion`.`completionTime`, `completion`.`completionTime`) as completion_completionTime, 
COALESCE(`_removed`.`completion`.`version`, `completion`.`version`) as completion_version, 
COALESCE(`_removed`.`contractId`, `contractId`) as contractId, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as createdDateTime_d_date, 
COALESCE(`_removed`.`deadlineDate`, `deadlineDate`) as deadlineDate, 
COALESCE(`_removed`.`deadlineTime`, `deadlineTime`) as deadlineTime, 
COALESCE(`_removed`.`description`, `description`) as description, 
COALESCE(`removed_exploded_flags`, `exploded_flags`) as flags, 
COALESCE(CAST(`_removed`.`informAgentWhenCompleted` as STRING), CAST(`informAgentWhenCompleted` as STRING)) as informAgentWhenCompleted, 
COALESCE(`_removed`.`relatedToClaimantId`, `relatedToClaimantId`) as relatedToClaimantId, 
COALESCE(`_removed`.`status`, `status`) as status, 
COALESCE(`_removed`.`title`, `title`) as title, 
COALESCE(`_removed`.`toDoId`, `toDoId`) as toDoId, 
COALESCE(`_removed`.`type`, `type`) as type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_core_todo_todo
 LATERAL VIEW OUTER EXPLODE(`canDo`) view_exploded_cando AS exploded_cando 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`canDo`) view_removed_exploded_cando AS removed_exploded_cando 
 LATERAL VIEW OUTER EXPLODE(`canSee`) view_exploded_cansee AS exploded_cansee 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`canSee`) view_removed_exploded_cansee AS removed_exploded_cansee 
 LATERAL VIEW OUTER EXPLODE(`flags`) view_exploded_flags AS exploded_flags 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`flags`) view_removed_exploded_flags AS removed_exploded_flags 
;


!echo ------------------------;
!echo ------------------------ journal_PaymentStoppedJournalEntry;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_journal_journal_paymentstoppedjournalentry
;

CREATE EXTERNAL TABLE src_core_journal_journal_paymentstoppedjournalentry(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`journalEntryProperties` STRUCT<`dueDate`:STRING
,`paymentStoppedDate`:STRING
,`annualVerificationPaymentStoppedReason`:STRING
,`type`:STRING>
,`_id` STRUCT<`journalId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`journalEntryProperties`:STRUCT<`dueDate`:STRING
,`paymentStoppedDate`:STRING
,`annualVerificationPaymentStoppedReason`:STRING
,`type`:STRING>
,`_id`:STRUCT<`journalId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/journal';

DROP TABLE IF EXISTS journal_PaymentStoppedJournalEntry;

CREATE TABLE journal_paymentstoppedjournalentry STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`journalEntryProperties`.`dueDate`, `journalEntryProperties`.`dueDate`) as journalEntryProperties_dueDate, 
COALESCE(`_removed`.`journalEntryProperties`.`paymentStoppedDate`, `journalEntryProperties`.`paymentStoppedDate`) as journalEntryProperties_paymentStoppedDate, 
COALESCE(`_removed`.`journalEntryProperties`.`annualVerificationPaymentStoppedReason`, `journalEntryProperties`.`annualVerificationPaymentStoppedReason`) as journalEntryProperties_annualVerificationPaymentStoppedReason, 
COALESCE(`_removed`.`journalEntryProperties`.`type`, `journalEntryProperties`.`type`) as journalEntryProperties_type, 
COALESCE(`_removed`.`_id`.`journalId`, `_id`.`journalId`) as id FROM src_core_journal_journal_paymentstoppedjournalentry
 src_core_journal_journal_paymentstoppedjournalentry 
 where `_removed`.`journalEntryProperties`.`type`='PaymentStoppedJournalEntry' or `journalEntryProperties`.`type`='PaymentStoppedJournalEntry';


!echo ------------------------;
!echo ------------------------ agent_todo_BOOK_APPOINTMENT_WORK_GROUP_CHANGE;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_book_appointment_work_group_change
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_book_appointment_work_group_change(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`currentWorkgroup`:STRING
,`youngestChildAge`:STRING
,`youngestChildName`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`currentWorkgroup`:STRING
,`youngestChildAge`:STRING
,`youngestChildName`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_BOOK_APPOINTMENT_WORK_GROUP_CHANGE;

CREATE TABLE agent_todo_book_appointment_work_group_change STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`currentWorkgroup`, `toDoProperties`.`currentWorkgroup`) as toDoProperties_currentWorkgroup, 
COALESCE(`_removed`.`toDoProperties`.`youngestChildAge`, `toDoProperties`.`youngestChildAge`) as toDoProperties_youngestChildAge, 
COALESCE(`_removed`.`toDoProperties`.`youngestChildName`, `toDoProperties`.`youngestChildName`) as toDoProperties_youngestChildName, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_book_appointment_work_group_change
 src_agent_core_agenttodo_agent_todo_book_appointment_work_group_change 
 where `_removed`.`toDoProperties`.`type`='BOOK_APPOINTMENT_WORK_GROUP_CHANGE' or `toDoProperties`.`type`='BOOK_APPOINTMENT_WORK_GROUP_CHANGE';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_ADD_CHILD;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_add_child
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_add_child(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`dateOfBirth`:STRING
,`fullName`:STRING
,`gender`:STRING
,`message`:STRING
,`placementDate`:STRING
,`primaryCarerId`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`dateOfBirth`:STRING
,`fullName`:STRING
,`gender`:STRING
,`message`:STRING
,`placementDate`:STRING
,`primaryCarerId`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_ADD_CHILD;

CREATE TABLE agent_todo_archive_add_child STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`dateOfBirth`, `toDoProperties`.`dateOfBirth`) as toDoProperties_dateOfBirth, 
COALESCE(`_removed`.`toDoProperties`.`fullName`, `toDoProperties`.`fullName`) as toDoProperties_fullName, 
COALESCE(`_removed`.`toDoProperties`.`gender`, `toDoProperties`.`gender`) as toDoProperties_gender, 
COALESCE(`_removed`.`toDoProperties`.`message`, `toDoProperties`.`message`) as toDoProperties_message, 
COALESCE(`_removed`.`toDoProperties`.`placementDate`, `toDoProperties`.`placementDate`) as toDoProperties_placementDate, 
COALESCE(`_removed`.`toDoProperties`.`primaryCarerId`, `toDoProperties`.`primaryCarerId`) as toDoProperties_primaryCarerId, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_add_child
 src_agent_core_agenttodoarchive_agent_todo_archive_add_child 
 where `_removed`.`toDoProperties`.`type`='ADD_CHILD' or `toDoProperties`.`type`='ADD_CHILD';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_REVIEW_SANCTIONS_TODO;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_review_sanctions_todo
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_review_sanctions_todo(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`reviewEndDate`:STRING
,`reviewStartDate`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`reviewEndDate`:STRING
,`reviewStartDate`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_REVIEW_SANCTIONS_TODO;

CREATE TABLE agent_todo_archive_review_sanctions_todo STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`reviewEndDate`, `toDoProperties`.`reviewEndDate`) as toDoProperties_reviewEndDate, 
COALESCE(`_removed`.`toDoProperties`.`reviewStartDate`, `toDoProperties`.`reviewStartDate`) as toDoProperties_reviewStartDate, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_review_sanctions_todo
 src_agent_core_agenttodoarchive_agent_todo_archive_review_sanctions_todo 
 where `_removed`.`toDoProperties`.`type`='REVIEW_SANCTIONS_TODO' or `toDoProperties`.`type`='REVIEW_SANCTIONS_TODO';


!echo ------------------------;
!echo ------------------------ agent_todo_ENDING_SELF_EMPLOYMENT;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_ending_self_employment
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_ending_self_employment(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`effectiveDate`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`effectiveDate`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_ENDING_SELF_EMPLOYMENT;

CREATE TABLE agent_todo_ending_self_employment STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`effectiveDate`, `toDoProperties`.`effectiveDate`) as toDoProperties_effectiveDate, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_ending_self_employment
 src_agent_core_agenttodo_agent_todo_ending_self_employment 
 where `_removed`.`toDoProperties`.`type`='ENDING_SELF_EMPLOYMENT' or `toDoProperties`.`type`='ENDING_SELF_EMPLOYMENT';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_CONSIDER_CLOSING_CLAIM;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_consider_closing_claim
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_consider_closing_claim(
`toDoProperties` STRUCT<`deferrals`:ARRAY<STRUCT<`agentId`:STRING
,`decisionNotes`:STRING
,`deferredFrom`:STRING
,`deferredTo`:STRING
>>
,`acceptCommitmentToDoDeadline`:STRING
,`acceptCommitmentToDoId`:STRING
,`annualVerificationEligibilityDate`:STRING
,`considerClaimClosureDate`:STRING
,`considerClosingClaimReason`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`deferrals`:ARRAY<STRUCT<`agentId`:STRING
,`decisionNotes`:STRING
,`deferredFrom`:STRING
,`deferredTo`:STRING
>>
,`acceptCommitmentToDoDeadline`:STRING
,`acceptCommitmentToDoId`:STRING
,`annualVerificationEligibilityDate`:STRING
,`considerClaimClosureDate`:STRING
,`considerClosingClaimReason`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_CONSIDER_CLOSING_CLAIM;

CREATE TABLE agent_todo_archive_consider_closing_claim STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`acceptCommitmentToDoDeadline`, `toDoProperties`.`acceptCommitmentToDoDeadline`) as toDoProperties_acceptCommitmentToDoDeadline, 
COALESCE(`_removed`.`toDoProperties`.`acceptCommitmentToDoId`, `toDoProperties`.`acceptCommitmentToDoId`) as toDoProperties_acceptCommitmentToDoId, 
COALESCE(`_removed`.`toDoProperties`.`annualVerificationEligibilityDate`, `toDoProperties`.`annualVerificationEligibilityDate`) as toDoProperties_annualVerificationEligibilityDate, 
COALESCE(`_removed`.`toDoProperties`.`considerClaimClosureDate`, `toDoProperties`.`considerClaimClosureDate`) as toDoProperties_considerClaimClosureDate, 
COALESCE(`_removed`.`toDoProperties`.`considerClosingClaimReason`, `toDoProperties`.`considerClosingClaimReason`) as toDoProperties_considerClosingClaimReason, 
COALESCE(`removed_exploded_todoproperties_deferrals`.`agentId`, `exploded_todoproperties_deferrals`.`agentId`) as toDoProperties_deferrals_agentId, 
COALESCE(`removed_exploded_todoproperties_deferrals`.`decisionNotes`, `exploded_todoproperties_deferrals`.`decisionNotes`) as toDoProperties_deferrals_decisionNotes, 
COALESCE(`removed_exploded_todoproperties_deferrals`.`deferredFrom`, `exploded_todoproperties_deferrals`.`deferredFrom`) as toDoProperties_deferrals_deferredFrom, 
COALESCE(`removed_exploded_todoproperties_deferrals`.`deferredTo`, `exploded_todoproperties_deferrals`.`deferredTo`) as toDoProperties_deferrals_deferredTo, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_consider_closing_claim
 LATERAL VIEW OUTER EXPLODE(`toDoProperties`.`deferrals`) view_exploded_todoproperties_deferrals AS exploded_todoproperties_deferrals 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`toDoProperties`.`deferrals`) view_removed_exploded_todoproperties_deferrals AS removed_exploded_todoproperties_deferrals 
 
 where `_removed`.`toDoProperties`.`type`='CONSIDER_CLOSING_CLAIM' or `toDoProperties`.`type`='CONSIDER_CLOSING_CLAIM';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_UPDATE_CIS_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_update_cis_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_update_cis_properties(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`triggerReason`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`triggerReason`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_UPDATE_CIS_PROPERTIES;

CREATE TABLE agent_todo_archive_update_cis_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`triggerReason`, `toDoProperties`.`triggerReason`) as toDoProperties_triggerReason, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_update_cis_properties
 src_agent_core_agenttodoarchive_agent_todo_archive_update_cis_properties 
 where `_removed`.`toDoProperties`.`type`='UPDATE_CIS_PROPERTIES' or `toDoProperties`.`type`='UPDATE_CIS_PROPERTIES';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_UPDATE_CIS_FROM_TRACE_CIS_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_update_cis_from_trace_cis_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_update_cis_from_trace_cis_properties(
`toDoProperties` STRUCT<`cis500Document`:STRUCT<`updatedAt`:STRUCT<`d_date`:STRING>
,`fileName`:STRING
,`fileSize`:STRING
,`id`:STRING
,`revision`:STRING
,`updatedBy`:STRING>
,`cisMismatchDetails`:STRUCT<`amendAddressLine`:BOOLEAN
,`amendFirstName`:BOOLEAN
,`amendMiddleName`:BOOLEAN
,`amendPostcode`:BOOLEAN>
,`triggerReason`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`cis500Document`:STRUCT<`updatedAt`:STRUCT<`d_date`:STRING>
,`fileName`:STRING
,`fileSize`:STRING
,`id`:STRING
,`revision`:STRING
,`updatedBy`:STRING>
,`cisMismatchDetails`:STRUCT<`amendAddressLine`:BOOLEAN
,`amendFirstName`:BOOLEAN
,`amendMiddleName`:BOOLEAN
,`amendPostcode`:BOOLEAN>
,`triggerReason`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_UPDATE_CIS_FROM_TRACE_CIS_PROPERTIES;

CREATE TABLE agent_todo_archive_update_cis_from_trace_cis_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`cis500Document`.`fileName`, `toDoProperties`.`cis500Document`.`fileName`) as toDoProperties_cis500Document_fileName, 
COALESCE(`_removed`.`toDoProperties`.`cis500Document`.`fileSize`, `toDoProperties`.`cis500Document`.`fileSize`) as toDoProperties_cis500Document_fileSize, 
COALESCE(`_removed`.`toDoProperties`.`cis500Document`.`id`, `toDoProperties`.`cis500Document`.`id`) as toDoProperties_cis500Document_id, 
COALESCE(`_removed`.`toDoProperties`.`cis500Document`.`revision`, `toDoProperties`.`cis500Document`.`revision`) as toDoProperties_cis500Document_revision, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`toDoProperties`.`cis500Document`.`updatedAt`.`d_date`, LENGTH(`_removed`.`toDoProperties`.`cis500Document`.`updatedAt`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`cis500Document`.`updatedAt`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`cis500Document`.`updatedAt`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`cis500Document`.`updatedAt`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`cis500Document`.`updatedAt`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`toDoProperties`.`cis500Document`.`updatedAt`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`toDoProperties`.`cis500Document`.`updatedAt`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`toDoProperties`.`cis500Document`.`updatedAt`.`d_date`, LENGTH(`toDoProperties`.`cis500Document`.`updatedAt`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`toDoProperties`.`cis500Document`.`updatedAt`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`cis500Document`.`updatedAt`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`toDoProperties`.`cis500Document`.`updatedAt`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`cis500Document`.`updatedAt`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`toDoProperties`.`cis500Document`.`updatedAt`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`toDoProperties`.`cis500Document`.`updatedAt`.`d_date`, 21, 3)) AS TIMESTAMP) END) as toDoProperties_cis500Document_updatedAt_d_date, 
COALESCE(`_removed`.`toDoProperties`.`cis500Document`.`updatedBy`, `toDoProperties`.`cis500Document`.`updatedBy`) as toDoProperties_cis500Document_updatedBy, 
COALESCE(CAST(`_removed`.`toDoProperties`.`cisMismatchDetails`.`amendAddressLine` as STRING), CAST(`toDoProperties`.`cisMismatchDetails`.`amendAddressLine` as STRING)) as toDoProperties_cisMismatchDetails_amendAddressLine, 
COALESCE(CAST(`_removed`.`toDoProperties`.`cisMismatchDetails`.`amendFirstName` as STRING), CAST(`toDoProperties`.`cisMismatchDetails`.`amendFirstName` as STRING)) as toDoProperties_cisMismatchDetails_amendFirstName, 
COALESCE(CAST(`_removed`.`toDoProperties`.`cisMismatchDetails`.`amendMiddleName` as STRING), CAST(`toDoProperties`.`cisMismatchDetails`.`amendMiddleName` as STRING)) as toDoProperties_cisMismatchDetails_amendMiddleName, 
COALESCE(CAST(`_removed`.`toDoProperties`.`cisMismatchDetails`.`amendPostcode` as STRING), CAST(`toDoProperties`.`cisMismatchDetails`.`amendPostcode` as STRING)) as toDoProperties_cisMismatchDetails_amendPostcode, 
COALESCE(`_removed`.`toDoProperties`.`triggerReason`, `toDoProperties`.`triggerReason`) as toDoProperties_triggerReason, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_update_cis_from_trace_cis_properties
 src_agent_core_agenttodoarchive_agent_todo_archive_update_cis_from_trace_cis_properties 
 where `_removed`.`toDoProperties`.`type`='UPDATE_CIS_FROM_TRACE_CIS_PROPERTIES' or `toDoProperties`.`type`='UPDATE_CIS_FROM_TRACE_CIS_PROPERTIES';


!echo ------------------------;
!echo ------------------------ claimant_commitment_MEDIUM;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_claimantcommitment_claimant_commitment_medium
;

CREATE EXTERNAL TABLE src_core_claimantcommitment_claimant_commitment_medium(
`properties` STRUCT<`availability`:STRUCT<`friday`:STRUCT<`availableHours`:STRING
,`availableTimes`:STRING>
,`monday`:STRUCT<`availableHours`:STRING
,`availableTimes`:STRING>
,`saturday`:STRUCT<`availableHours`:STRING
,`availableTimes`:STRING>
,`sunday`:STRUCT<`availableHours`:STRING
,`availableTimes`:STRING>
,`thursday`:STRUCT<`availableHours`:STRING
,`availableTimes`:STRING>
,`tuesday`:STRUCT<`availableHours`:STRING
,`availableTimes`:STRING>
,`wednesday`:STRUCT<`availableHours`:STRING
,`availableTimes`:STRING>>
,`activities`:STRING
,`availabilitySectionDisabled`:BOOLEAN
,`circumstancesFollowOnSanction`:STRING
,`circumstancesInitialSanction`:STRING
,`circumstancesLostWorkSanction`:STRING
,`commitment`:STRING
,`followOnSanction`:STRING
,`initialSanction`:STRING
,`timeSpent`:STRING
,`workPlanSectionDisabled`:BOOLEAN
,`claimantCommitmentVersion`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`contractId`:STRING
,`claimantId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`properties`:STRUCT<`availability`:STRUCT<`friday`:STRUCT<`availableHours`:STRING
,`availableTimes`:STRING>
,`monday`:STRUCT<`availableHours`:STRING
,`availableTimes`:STRING>
,`saturday`:STRUCT<`availableHours`:STRING
,`availableTimes`:STRING>
,`sunday`:STRUCT<`availableHours`:STRING
,`availableTimes`:STRING>
,`thursday`:STRUCT<`availableHours`:STRING
,`availableTimes`:STRING>
,`tuesday`:STRUCT<`availableHours`:STRING
,`availableTimes`:STRING>
,`wednesday`:STRUCT<`availableHours`:STRING
,`availableTimes`:STRING>>
,`activities`:STRING
,`availabilitySectionDisabled`:BOOLEAN
,`circumstancesFollowOnSanction`:STRING
,`circumstancesInitialSanction`:STRING
,`circumstancesLostWorkSanction`:STRING
,`commitment`:STRING
,`followOnSanction`:STRING
,`initialSanction`:STRING
,`timeSpent`:STRING
,`workPlanSectionDisabled`:BOOLEAN
,`claimantCommitmentVersion`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`contractId`:STRING
,`claimantId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/claimantCommitment';

DROP TABLE IF EXISTS claimant_commitment_MEDIUM;

CREATE TABLE claimant_commitment_medium STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`properties`.`activities`, `properties`.`activities`) as properties_activities, 
COALESCE(`_removed`.`properties`.`availability`.`friday`.`availableHours`, `properties`.`availability`.`friday`.`availableHours`) as properties_availability_friday_availableHours, 
COALESCE(`_removed`.`properties`.`availability`.`friday`.`availableTimes`, `properties`.`availability`.`friday`.`availableTimes`) as properties_availability_friday_availableTimes, 
COALESCE(`_removed`.`properties`.`availability`.`monday`.`availableHours`, `properties`.`availability`.`monday`.`availableHours`) as properties_availability_monday_availableHours, 
COALESCE(`_removed`.`properties`.`availability`.`monday`.`availableTimes`, `properties`.`availability`.`monday`.`availableTimes`) as properties_availability_monday_availableTimes, 
COALESCE(`_removed`.`properties`.`availability`.`saturday`.`availableHours`, `properties`.`availability`.`saturday`.`availableHours`) as properties_availability_saturday_availableHours, 
COALESCE(`_removed`.`properties`.`availability`.`saturday`.`availableTimes`, `properties`.`availability`.`saturday`.`availableTimes`) as properties_availability_saturday_availableTimes, 
COALESCE(`_removed`.`properties`.`availability`.`sunday`.`availableHours`, `properties`.`availability`.`sunday`.`availableHours`) as properties_availability_sunday_availableHours, 
COALESCE(`_removed`.`properties`.`availability`.`sunday`.`availableTimes`, `properties`.`availability`.`sunday`.`availableTimes`) as properties_availability_sunday_availableTimes, 
COALESCE(`_removed`.`properties`.`availability`.`thursday`.`availableHours`, `properties`.`availability`.`thursday`.`availableHours`) as properties_availability_thursday_availableHours, 
COALESCE(`_removed`.`properties`.`availability`.`thursday`.`availableTimes`, `properties`.`availability`.`thursday`.`availableTimes`) as properties_availability_thursday_availableTimes, 
COALESCE(`_removed`.`properties`.`availability`.`tuesday`.`availableHours`, `properties`.`availability`.`tuesday`.`availableHours`) as properties_availability_tuesday_availableHours, 
COALESCE(`_removed`.`properties`.`availability`.`tuesday`.`availableTimes`, `properties`.`availability`.`tuesday`.`availableTimes`) as properties_availability_tuesday_availableTimes, 
COALESCE(`_removed`.`properties`.`availability`.`wednesday`.`availableHours`, `properties`.`availability`.`wednesday`.`availableHours`) as properties_availability_wednesday_availableHours, 
COALESCE(`_removed`.`properties`.`availability`.`wednesday`.`availableTimes`, `properties`.`availability`.`wednesday`.`availableTimes`) as properties_availability_wednesday_availableTimes, 
COALESCE(CAST(`_removed`.`properties`.`availabilitySectionDisabled` as STRING), CAST(`properties`.`availabilitySectionDisabled` as STRING)) as properties_availabilitySectionDisabled, 
COALESCE(`_removed`.`properties`.`circumstancesFollowOnSanction`, `properties`.`circumstancesFollowOnSanction`) as properties_circumstancesFollowOnSanction, 
COALESCE(`_removed`.`properties`.`circumstancesInitialSanction`, `properties`.`circumstancesInitialSanction`) as properties_circumstancesInitialSanction, 
COALESCE(`_removed`.`properties`.`circumstancesLostWorkSanction`, `properties`.`circumstancesLostWorkSanction`) as properties_circumstancesLostWorkSanction, 
COALESCE(`_removed`.`properties`.`commitment`, `properties`.`commitment`) as properties_commitment, 
COALESCE(`_removed`.`properties`.`followOnSanction`, `properties`.`followOnSanction`) as properties_followOnSanction, 
COALESCE(`_removed`.`properties`.`initialSanction`, `properties`.`initialSanction`) as properties_initialSanction, 
COALESCE(`_removed`.`properties`.`timeSpent`, `properties`.`timeSpent`) as properties_timeSpent, 
COALESCE(CAST(`_removed`.`properties`.`workPlanSectionDisabled` as STRING), CAST(`properties`.`workPlanSectionDisabled` as STRING)) as properties_workPlanSectionDisabled, 
COALESCE(`_removed`.`properties`.`claimantCommitmentVersion`, `properties`.`claimantCommitmentVersion`) as properties_claimantCommitmentVersion, 
COALESCE(`_removed`.`properties`.`type`, `properties`.`type`) as properties_type, 
COALESCE(`_removed`.`_id`.`contractId`, `_id`.`contractId`) as contractId, 
COALESCE(`_removed`.`_id`.`claimantId`, `_id`.`claimantId`) as claimantId FROM src_core_claimantcommitment_claimant_commitment_medium
 src_core_claimantcommitment_claimant_commitment_medium 
 where `_removed`.`properties`.`type`='MEDIUM' or `properties`.`type`='MEDIUM';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_MAKE_A_PAYMENT;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_make_a_payment
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_make_a_payment(
`toDoProperties` STRUCT<`schedulingProperties`:STRUCT<`amount`:STRING
,`netAmount`:STRING
,`orderNumber`:STRING
,`paymentDueDate`:STRING
,`scheduledPaymentsId`:STRING
,`totalPaymentCount`:STRING>
,`assessmentPeriodId`:STRING
,`automatedPaymentRejectionReason`:STRING
,`calculationAttachmentId`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`schedulingProperties`:STRUCT<`amount`:STRING
,`netAmount`:STRING
,`orderNumber`:STRING
,`paymentDueDate`:STRING
,`scheduledPaymentsId`:STRING
,`totalPaymentCount`:STRING>
,`assessmentPeriodId`:STRING
,`automatedPaymentRejectionReason`:STRING
,`calculationAttachmentId`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_MAKE_A_PAYMENT;

CREATE TABLE agent_todo_archive_make_a_payment STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`assessmentPeriodId`, `toDoProperties`.`assessmentPeriodId`) as toDoProperties_assessmentPeriodId, 
COALESCE(`_removed`.`toDoProperties`.`automatedPaymentRejectionReason`, `toDoProperties`.`automatedPaymentRejectionReason`) as toDoProperties_automatedPaymentRejectionReason, 
COALESCE(`_removed`.`toDoProperties`.`calculationAttachmentId`, `toDoProperties`.`calculationAttachmentId`) as toDoProperties_calculationAttachmentId, 
COALESCE(`_removed`.`toDoProperties`.`schedulingProperties`.`amount`, `toDoProperties`.`schedulingProperties`.`amount`) as toDoProperties_schedulingProperties_amount, 
COALESCE(`_removed`.`toDoProperties`.`schedulingProperties`.`netAmount`, `toDoProperties`.`schedulingProperties`.`netAmount`) as toDoProperties_schedulingProperties_netAmount, 
COALESCE(`_removed`.`toDoProperties`.`schedulingProperties`.`orderNumber`, `toDoProperties`.`schedulingProperties`.`orderNumber`) as toDoProperties_schedulingProperties_orderNumber, 
COALESCE(`_removed`.`toDoProperties`.`schedulingProperties`.`paymentDueDate`, `toDoProperties`.`schedulingProperties`.`paymentDueDate`) as toDoProperties_schedulingProperties_paymentDueDate, 
COALESCE(`_removed`.`toDoProperties`.`schedulingProperties`.`scheduledPaymentsId`, `toDoProperties`.`schedulingProperties`.`scheduledPaymentsId`) as toDoProperties_schedulingProperties_scheduledPaymentsId, 
COALESCE(`_removed`.`toDoProperties`.`schedulingProperties`.`totalPaymentCount`, `toDoProperties`.`schedulingProperties`.`totalPaymentCount`) as toDoProperties_schedulingProperties_totalPaymentCount, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_make_a_payment
 src_agent_core_agenttodoarchive_agent_todo_archive_make_a_payment 
 where `_removed`.`toDoProperties`.`type`='MAKE_A_PAYMENT' or `toDoProperties`.`type`='MAKE_A_PAYMENT';


!echo ------------------------;
!echo ------------------------ agent_todo_UPDATE_CIS_AFTER_CHANGE_OF_CIRCS;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_update_cis_after_change_of_circs
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_update_cis_after_change_of_circs(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`createdByMigration`:BOOLEAN
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`createdByMigration`:BOOLEAN
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_UPDATE_CIS_AFTER_CHANGE_OF_CIRCS;

CREATE TABLE agent_todo_update_cis_after_change_of_circs STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(CAST(`_removed`.`toDoProperties`.`createdByMigration` as STRING), CAST(`toDoProperties`.`createdByMigration` as STRING)) as toDoProperties_createdByMigration, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_update_cis_after_change_of_circs
 src_agent_core_agenttodo_agent_todo_update_cis_after_change_of_circs 
 where `_removed`.`toDoProperties`.`type`='UPDATE_CIS_AFTER_CHANGE_OF_CIRCS' or `toDoProperties`.`type`='UPDATE_CIS_AFTER_CHANGE_OF_CIRCS';


!echo ------------------------;
!echo ------------------------ agent_todo_ENTITLEMENT_REVIEW_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_entitlement_review_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_entitlement_review_properties(
`toDoProperties` STRUCT<`entitlementReviewTriggers`:ARRAY<STRING>
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`entitlementReviewTriggers`:ARRAY<STRING>
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_ENTITLEMENT_REVIEW_PROPERTIES;

CREATE TABLE agent_todo_entitlement_review_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`removed_exploded_todoproperties_entitlementreviewtriggers`, `exploded_todoproperties_entitlementreviewtriggers`) as toDoProperties_entitlementReviewTriggers, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_entitlement_review_properties
 LATERAL VIEW OUTER EXPLODE(`toDoProperties`.`entitlementReviewTriggers`) view_exploded_todoproperties_entitlementreviewtriggers AS exploded_todoproperties_entitlementreviewtriggers 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`toDoProperties`.`entitlementReviewTriggers`) view_removed_exploded_todoproperties_entitlementreviewtriggers AS removed_exploded_todoproperties_entitlementreviewtriggers 
 
 where `_removed`.`toDoProperties`.`type`='ENTITLEMENT_REVIEW_PROPERTIES' or `toDoProperties`.`type`='ENTITLEMENT_REVIEW_PROPERTIES';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_WCA_DECISION;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_wca_decision
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_wca_decision(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`message`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`message`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_WCA_DECISION;

CREATE TABLE agent_todo_archive_wca_decision STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`message`, `toDoProperties`.`message`) as toDoProperties_message, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_wca_decision
 src_agent_core_agenttodoarchive_agent_todo_archive_wca_decision 
 where `_removed`.`toDoProperties`.`type`='WCA_DECISION' or `toDoProperties`.`type`='WCA_DECISION';


!echo ------------------------;
!echo ------------------------ journal_ProvideAFitNoteSummaryJournalEntry;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_journal_journal_provideafitnotesummaryjournalentry
;

CREATE EXTERNAL TABLE src_core_journal_journal_provideafitnotesummaryjournalentry(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`journalEntryProperties` STRUCT<`endDate`:STRING
,`evidenceAccepted`:BOOLEAN
,`startDate`:STRING
,`type`:STRING>
,`_id` STRUCT<`journalId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`journalEntryProperties`:STRUCT<`endDate`:STRING
,`evidenceAccepted`:BOOLEAN
,`startDate`:STRING
,`type`:STRING>
,`_id`:STRUCT<`journalId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/journal';

DROP TABLE IF EXISTS journal_ProvideAFitNoteSummaryJournalEntry;

CREATE TABLE journal_provideafitnotesummaryjournalentry STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`journalEntryProperties`.`endDate`, `journalEntryProperties`.`endDate`) as journalEntryProperties_endDate, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`evidenceAccepted` as STRING), CAST(`journalEntryProperties`.`evidenceAccepted` as STRING)) as journalEntryProperties_evidenceAccepted, 
COALESCE(`_removed`.`journalEntryProperties`.`startDate`, `journalEntryProperties`.`startDate`) as journalEntryProperties_startDate, 
COALESCE(`_removed`.`journalEntryProperties`.`type`, `journalEntryProperties`.`type`) as journalEntryProperties_type, 
COALESCE(`_removed`.`_id`.`journalId`, `_id`.`journalId`) as id FROM src_core_journal_journal_provideafitnotesummaryjournalentry
 src_core_journal_journal_provideafitnotesummaryjournalentry 
 where `_removed`.`journalEntryProperties`.`type`='ProvideAFitNoteSummaryJournalEntry' or `journalEntryProperties`.`type`='ProvideAFitNoteSummaryJournalEntry';


!echo ------------------------;
!echo ------------------------ agent_todo_STOPPED_CARING;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_stopped_caring
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_stopped_caring(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`dueToDeath`:BOOLEAN
,`personCaredForName`:STRING
,`stoppedDate`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`dueToDeath`:BOOLEAN
,`personCaredForName`:STRING
,`stoppedDate`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_STOPPED_CARING;

CREATE TABLE agent_todo_stopped_caring STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(CAST(`_removed`.`toDoProperties`.`dueToDeath` as STRING), CAST(`toDoProperties`.`dueToDeath` as STRING)) as toDoProperties_dueToDeath, 
COALESCE(`_removed`.`toDoProperties`.`personCaredForName`, `toDoProperties`.`personCaredForName`) as toDoProperties_personCaredForName, 
COALESCE(`_removed`.`toDoProperties`.`stoppedDate`, `toDoProperties`.`stoppedDate`) as toDoProperties_stoppedDate, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_stopped_caring
 src_agent_core_agenttodo_agent_todo_stopped_caring 
 where `_removed`.`toDoProperties`.`type`='STOPPED_CARING' or `toDoProperties`.`type`='STOPPED_CARING';


!echo ------------------------;
!echo ------------------------ agent_todo_UNMATCHED_CLAIMANT_TO_DO_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_unmatched_claimant_to_do_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_unmatched_claimant_to_do_properties(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`unmatchedDetails`:BOOLEAN
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`unmatchedDetails`:BOOLEAN
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_UNMATCHED_CLAIMANT_TO_DO_PROPERTIES;

CREATE TABLE agent_todo_unmatched_claimant_to_do_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(CAST(`_removed`.`toDoProperties`.`unmatchedDetails` as STRING), CAST(`toDoProperties`.`unmatchedDetails` as STRING)) as toDoProperties_unmatchedDetails, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_unmatched_claimant_to_do_properties
 src_agent_core_agenttodo_agent_todo_unmatched_claimant_to_do_properties 
 where `_removed`.`toDoProperties`.`type`='UNMATCHED_CLAIMANT_TO_DO_PROPERTIES' or `toDoProperties`.`type`='UNMATCHED_CLAIMANT_TO_DO_PROPERTIES';


!echo ------------------------;
!echo ------------------------ todo_ACCEPT_COMMITMENTS_TODO_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_todo_todo_accept_commitments_todo_properties
;

CREATE EXTERNAL TABLE src_core_todo_todo_accept_commitments_todo_properties(
`properties` STRUCT<`claimantCommitmentProperties`:STRUCT<`availability`:STRUCT<`friday`:STRUCT<`availableHours`:STRING
,`availableTimes`:STRING>
,`monday`:STRUCT<`availableHours`:STRING
,`availableTimes`:STRING>
,`saturday`:STRUCT<`availableHours`:STRING
,`availableTimes`:STRING>
,`sunday`:STRUCT<`availableHours`:STRING
,`availableTimes`:STRING>
,`thursday`:STRUCT<`availableHours`:STRING
,`availableTimes`:STRING>
,`tuesday`:STRUCT<`availableHours`:STRING
,`availableTimes`:STRING>
,`wednesday`:STRUCT<`availableHours`:STRING
,`availableTimes`:STRING>>
,`additionalActivities`:ARRAY<STRUCT<`activityDescription`:STRING
,`completedBy`:STRING
,`reviewBy`:STRING
,`formattedCompletedBy`:STRING
,`formattedReviewBy`:STRING
>>
,`regularActivities`:ARRAY<STRUCT<`activityDescription`:STRING
,`frequency`:STRING
>>
,`activities`:ARRAY<STRUCT<`reviewDate`:STRING
,`shortDescription`:STRING
>>
,`jobs`:ARRAY<STRING>
,`claimantCommitmentVersion`:STRING
,`availabilityRequirementsSanction`:STRING
,`availabilitySanction`:STRING
,`availabilitySectionDisabled`:BOOLEAN
,`circumstancesFollowOnSanction`:STRING
,`circumstancesInitialSanction`:STRING
,`circumstancesLostWorkSanction`:STRING
,`commitment`:STRING
,`followOnSanction`:STRING
,`initialSanction`:STRING
,`interviewAvailability`:STRING
,`minimumPay`:STRING
,`numberOfHours`:STRING
,`payPeriod`:STRING
,`restrictedAvailability`:BOOLEAN
,`role`:STRING
,`startWorkAvailability`:STRING
,`timeSpent`:STRING
,`travelTime`:STRING
,`workPlanSectionDisabled`:BOOLEAN
,`workSearchSanction`:STRING
,`type`:STRING
,`customJobInterviewAvailability`:STRING
,`customStartWorkAvailability`:STRING
,`hoursToSpendLookingForWork`:STRING
,`travelToWorkMinutes`:STRING
,`wageAmount`:STRING
,`workHours`:STRING
,`workPaymentFrequency`:STRING
,`workPreparationAndSearchSwitchedOff`:BOOLEAN
,`workSectionSwitchedOff`:BOOLEAN>
,`automaticallyGenerated`:BOOLEAN
,`workGroup`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`properties`:STRUCT<`claimantCommitmentProperties`:STRUCT<`availability`:STRUCT<`friday`:STRUCT<`availableHours`:STRING
,`availableTimes`:STRING>
,`monday`:STRUCT<`availableHours`:STRING
,`availableTimes`:STRING>
,`saturday`:STRUCT<`availableHours`:STRING
,`availableTimes`:STRING>
,`sunday`:STRUCT<`availableHours`:STRING
,`availableTimes`:STRING>
,`thursday`:STRUCT<`availableHours`:STRING
,`availableTimes`:STRING>
,`tuesday`:STRUCT<`availableHours`:STRING
,`availableTimes`:STRING>
,`wednesday`:STRUCT<`availableHours`:STRING
,`availableTimes`:STRING>>
,`additionalActivities`:ARRAY<STRUCT<`activityDescription`:STRING
,`completedBy`:STRING
,`reviewBy`:STRING
,`formattedCompletedBy`:STRING
,`formattedReviewBy`:STRING
>>
,`regularActivities`:ARRAY<STRUCT<`activityDescription`:STRING
,`frequency`:STRING
>>
,`activities`:ARRAY<STRUCT<`reviewDate`:STRING
,`shortDescription`:STRING
>>
,`jobs`:ARRAY<STRING>
,`claimantCommitmentVersion`:STRING
,`availabilityRequirementsSanction`:STRING
,`availabilitySanction`:STRING
,`availabilitySectionDisabled`:BOOLEAN
,`circumstancesFollowOnSanction`:STRING
,`circumstancesInitialSanction`:STRING
,`circumstancesLostWorkSanction`:STRING
,`commitment`:STRING
,`followOnSanction`:STRING
,`initialSanction`:STRING
,`interviewAvailability`:STRING
,`minimumPay`:STRING
,`numberOfHours`:STRING
,`payPeriod`:STRING
,`restrictedAvailability`:BOOLEAN
,`role`:STRING
,`startWorkAvailability`:STRING
,`timeSpent`:STRING
,`travelTime`:STRING
,`workPlanSectionDisabled`:BOOLEAN
,`workSearchSanction`:STRING
,`type`:STRING
,`customJobInterviewAvailability`:STRING
,`customStartWorkAvailability`:STRING
,`hoursToSpendLookingForWork`:STRING
,`travelToWorkMinutes`:STRING
,`wageAmount`:STRING
,`workHours`:STRING
,`workPaymentFrequency`:STRING
,`workPreparationAndSearchSwitchedOff`:BOOLEAN
,`workSectionSwitchedOff`:BOOLEAN>
,`automaticallyGenerated`:BOOLEAN
,`workGroup`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/toDo';

DROP TABLE IF EXISTS todo_ACCEPT_COMMITMENTS_TODO_PROPERTIES;

CREATE TABLE todo_accept_commitments_todo_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(CAST(`_removed`.`properties`.`automaticallyGenerated` as STRING), CAST(`properties`.`automaticallyGenerated` as STRING)) as properties_automaticallyGenerated, 
COALESCE(`_removed`.`properties`.`claimantCommitmentProperties`.`claimantCommitmentVersion`, `properties`.`claimantCommitmentProperties`.`claimantCommitmentVersion`) as properties_claimantCommitmentProperties_claimantCommitmentVersion, 
COALESCE(`_removed`.`properties`.`claimantCommitmentProperties`.`activities`, `properties`.`claimantCommitmentProperties`.`activities`) as properties_claimantCommitmentProperties_activities, 
COALESCE(`removed_exploded_properties_claimantcommitmentproperties_additionalactivities`.`activityDescription`, `exploded_properties_claimantcommitmentproperties_additionalactivities`.`activityDescription`) as properties_claimantCommitmentProperties_additionalActivities_activityDescription, 
COALESCE(`removed_exploded_properties_claimantcommitmentproperties_additionalactivities`.`completedBy`, `exploded_properties_claimantcommitmentproperties_additionalactivities`.`completedBy`) as properties_claimantCommitmentProperties_additionalActivities_completedBy, 
COALESCE(`removed_exploded_properties_claimantcommitmentproperties_additionalactivities`.`reviewBy`, `exploded_properties_claimantcommitmentproperties_additionalactivities`.`reviewBy`) as properties_claimantCommitmentProperties_additionalActivities_reviewBy, 
COALESCE(`removed_exploded_properties_claimantcommitmentproperties_additionalactivities`.`formattedCompletedBy`, `exploded_properties_claimantcommitmentproperties_additionalactivities`.`formattedCompletedBy`) as properties_claimantCommitmentProperties_additionalActivities_formattedCompletedBy, 
COALESCE(`removed_exploded_properties_claimantcommitmentproperties_additionalactivities`.`formattedReviewBy`, `exploded_properties_claimantcommitmentproperties_additionalactivities`.`formattedReviewBy`) as properties_claimantCommitmentProperties_additionalActivities_formattedReviewBy, 
COALESCE(`_removed`.`properties`.`claimantCommitmentProperties`.`availability`.`friday`.`availableHours`, `properties`.`claimantCommitmentProperties`.`availability`.`friday`.`availableHours`) as properties_claimantCommitmentProperties_availability_friday_availableHours, 
COALESCE(`_removed`.`properties`.`claimantCommitmentProperties`.`availability`.`friday`.`availableTimes`, `properties`.`claimantCommitmentProperties`.`availability`.`friday`.`availableTimes`) as properties_claimantCommitmentProperties_availability_friday_availableTimes, 
COALESCE(`_removed`.`properties`.`claimantCommitmentProperties`.`availability`.`monday`.`availableHours`, `properties`.`claimantCommitmentProperties`.`availability`.`monday`.`availableHours`) as properties_claimantCommitmentProperties_availability_monday_availableHours, 
COALESCE(`_removed`.`properties`.`claimantCommitmentProperties`.`availability`.`monday`.`availableTimes`, `properties`.`claimantCommitmentProperties`.`availability`.`monday`.`availableTimes`) as properties_claimantCommitmentProperties_availability_monday_availableTimes, 
COALESCE(`_removed`.`properties`.`claimantCommitmentProperties`.`availability`.`saturday`.`availableHours`, `properties`.`claimantCommitmentProperties`.`availability`.`saturday`.`availableHours`) as properties_claimantCommitmentProperties_availability_saturday_availableHours, 
COALESCE(`_removed`.`properties`.`claimantCommitmentProperties`.`availability`.`saturday`.`availableTimes`, `properties`.`claimantCommitmentProperties`.`availability`.`saturday`.`availableTimes`) as properties_claimantCommitmentProperties_availability_saturday_availableTimes, 
COALESCE(`_removed`.`properties`.`claimantCommitmentProperties`.`availability`.`sunday`.`availableHours`, `properties`.`claimantCommitmentProperties`.`availability`.`sunday`.`availableHours`) as properties_claimantCommitmentProperties_availability_sunday_availableHours, 
COALESCE(`_removed`.`properties`.`claimantCommitmentProperties`.`availability`.`sunday`.`availableTimes`, `properties`.`claimantCommitmentProperties`.`availability`.`sunday`.`availableTimes`) as properties_claimantCommitmentProperties_availability_sunday_availableTimes, 
COALESCE(`_removed`.`properties`.`claimantCommitmentProperties`.`availability`.`thursday`.`availableHours`, `properties`.`claimantCommitmentProperties`.`availability`.`thursday`.`availableHours`) as properties_claimantCommitmentProperties_availability_thursday_availableHours, 
COALESCE(`_removed`.`properties`.`claimantCommitmentProperties`.`availability`.`thursday`.`availableTimes`, `properties`.`claimantCommitmentProperties`.`availability`.`thursday`.`availableTimes`) as properties_claimantCommitmentProperties_availability_thursday_availableTimes, 
COALESCE(`_removed`.`properties`.`claimantCommitmentProperties`.`availability`.`tuesday`.`availableHours`, `properties`.`claimantCommitmentProperties`.`availability`.`tuesday`.`availableHours`) as properties_claimantCommitmentProperties_availability_tuesday_availableHours, 
COALESCE(`_removed`.`properties`.`claimantCommitmentProperties`.`availability`.`tuesday`.`availableTimes`, `properties`.`claimantCommitmentProperties`.`availability`.`tuesday`.`availableTimes`) as properties_claimantCommitmentProperties_availability_tuesday_availableTimes, 
COALESCE(`_removed`.`properties`.`claimantCommitmentProperties`.`availability`.`wednesday`.`availableHours`, `properties`.`claimantCommitmentProperties`.`availability`.`wednesday`.`availableHours`) as properties_claimantCommitmentProperties_availability_wednesday_availableHours, 
COALESCE(`_removed`.`properties`.`claimantCommitmentProperties`.`availability`.`wednesday`.`availableTimes`, `properties`.`claimantCommitmentProperties`.`availability`.`wednesday`.`availableTimes`) as properties_claimantCommitmentProperties_availability_wednesday_availableTimes, 
COALESCE(`_removed`.`properties`.`claimantCommitmentProperties`.`availabilityRequirementsSanction`, `properties`.`claimantCommitmentProperties`.`availabilityRequirementsSanction`) as properties_claimantCommitmentProperties_availabilityRequirementsSanction, 
COALESCE(`_removed`.`properties`.`claimantCommitmentProperties`.`availabilitySanction`, `properties`.`claimantCommitmentProperties`.`availabilitySanction`) as properties_claimantCommitmentProperties_availabilitySanction, 
COALESCE(CAST(`_removed`.`properties`.`claimantCommitmentProperties`.`availabilitySectionDisabled` as STRING), CAST(`properties`.`claimantCommitmentProperties`.`availabilitySectionDisabled` as STRING)) as properties_claimantCommitmentProperties_availabilitySectionDisabled, 
COALESCE(`_removed`.`properties`.`claimantCommitmentProperties`.`circumstancesFollowOnSanction`, `properties`.`claimantCommitmentProperties`.`circumstancesFollowOnSanction`) as properties_claimantCommitmentProperties_circumstancesFollowOnSanction, 
COALESCE(`_removed`.`properties`.`claimantCommitmentProperties`.`circumstancesInitialSanction`, `properties`.`claimantCommitmentProperties`.`circumstancesInitialSanction`) as properties_claimantCommitmentProperties_circumstancesInitialSanction, 
COALESCE(`_removed`.`properties`.`claimantCommitmentProperties`.`circumstancesLostWorkSanction`, `properties`.`claimantCommitmentProperties`.`circumstancesLostWorkSanction`) as properties_claimantCommitmentProperties_circumstancesLostWorkSanction, 
COALESCE(`_removed`.`properties`.`claimantCommitmentProperties`.`commitment`, `properties`.`claimantCommitmentProperties`.`commitment`) as properties_claimantCommitmentProperties_commitment, 
COALESCE(`_removed`.`properties`.`claimantCommitmentProperties`.`followOnSanction`, `properties`.`claimantCommitmentProperties`.`followOnSanction`) as properties_claimantCommitmentProperties_followOnSanction, 
COALESCE(`_removed`.`properties`.`claimantCommitmentProperties`.`initialSanction`, `properties`.`claimantCommitmentProperties`.`initialSanction`) as properties_claimantCommitmentProperties_initialSanction, 
COALESCE(`_removed`.`properties`.`claimantCommitmentProperties`.`interviewAvailability`, `properties`.`claimantCommitmentProperties`.`interviewAvailability`) as properties_claimantCommitmentProperties_interviewAvailability, 
COALESCE(`_removed`.`properties`.`claimantCommitmentProperties`.`minimumPay`, `properties`.`claimantCommitmentProperties`.`minimumPay`) as properties_claimantCommitmentProperties_minimumPay, 
COALESCE(`_removed`.`properties`.`claimantCommitmentProperties`.`numberOfHours`, `properties`.`claimantCommitmentProperties`.`numberOfHours`) as properties_claimantCommitmentProperties_numberOfHours, 
COALESCE(`_removed`.`properties`.`claimantCommitmentProperties`.`payPeriod`, `properties`.`claimantCommitmentProperties`.`payPeriod`) as properties_claimantCommitmentProperties_payPeriod, 
COALESCE(`removed_exploded_properties_claimantcommitmentproperties_regularactivities`.`activityDescription`, `exploded_properties_claimantcommitmentproperties_regularactivities`.`activityDescription`) as properties_claimantCommitmentProperties_regularActivities_activityDescription, 
COALESCE(`removed_exploded_properties_claimantcommitmentproperties_regularactivities`.`frequency`, `exploded_properties_claimantcommitmentproperties_regularactivities`.`frequency`) as properties_claimantCommitmentProperties_regularActivities_frequency, 
COALESCE(CAST(`_removed`.`properties`.`claimantCommitmentProperties`.`restrictedAvailability` as STRING), CAST(`properties`.`claimantCommitmentProperties`.`restrictedAvailability` as STRING)) as properties_claimantCommitmentProperties_restrictedAvailability, 
COALESCE(`_removed`.`properties`.`claimantCommitmentProperties`.`role`, `properties`.`claimantCommitmentProperties`.`role`) as properties_claimantCommitmentProperties_role, 
COALESCE(`_removed`.`properties`.`claimantCommitmentProperties`.`startWorkAvailability`, `properties`.`claimantCommitmentProperties`.`startWorkAvailability`) as properties_claimantCommitmentProperties_startWorkAvailability, 
COALESCE(`_removed`.`properties`.`claimantCommitmentProperties`.`timeSpent`, `properties`.`claimantCommitmentProperties`.`timeSpent`) as properties_claimantCommitmentProperties_timeSpent, 
COALESCE(`_removed`.`properties`.`claimantCommitmentProperties`.`travelTime`, `properties`.`claimantCommitmentProperties`.`travelTime`) as properties_claimantCommitmentProperties_travelTime, 
COALESCE(CAST(`_removed`.`properties`.`claimantCommitmentProperties`.`workPlanSectionDisabled` as STRING), CAST(`properties`.`claimantCommitmentProperties`.`workPlanSectionDisabled` as STRING)) as properties_claimantCommitmentProperties_workPlanSectionDisabled, 
COALESCE(`_removed`.`properties`.`claimantCommitmentProperties`.`workSearchSanction`, `properties`.`claimantCommitmentProperties`.`workSearchSanction`) as properties_claimantCommitmentProperties_workSearchSanction, 
COALESCE(`_removed`.`properties`.`claimantCommitmentProperties`.`type`, `properties`.`claimantCommitmentProperties`.`type`) as properties_claimantCommitmentProperties_type, 
COALESCE(`removed_exploded_properties_claimantcommitmentproperties_activities`.`reviewDate`, `exploded_properties_claimantcommitmentproperties_activities`.`reviewDate`) as properties_claimantCommitmentProperties_activities_reviewDate, 
COALESCE(`removed_exploded_properties_claimantcommitmentproperties_activities`.`shortDescription`, `exploded_properties_claimantcommitmentproperties_activities`.`shortDescription`) as properties_claimantCommitmentProperties_activities_shortDescription, 
COALESCE(`_removed`.`properties`.`claimantCommitmentProperties`.`customJobInterviewAvailability`, `properties`.`claimantCommitmentProperties`.`customJobInterviewAvailability`) as properties_claimantCommitmentProperties_customJobInterviewAvailability, 
COALESCE(`_removed`.`properties`.`claimantCommitmentProperties`.`customStartWorkAvailability`, `properties`.`claimantCommitmentProperties`.`customStartWorkAvailability`) as properties_claimantCommitmentProperties_customStartWorkAvailability, 
COALESCE(`_removed`.`properties`.`claimantCommitmentProperties`.`hoursToSpendLookingForWork`, `properties`.`claimantCommitmentProperties`.`hoursToSpendLookingForWork`) as properties_claimantCommitmentProperties_hoursToSpendLookingForWork, 
COALESCE(`removed_exploded_properties_claimantcommitmentproperties_jobs`, `exploded_properties_claimantcommitmentproperties_jobs`) as properties_claimantCommitmentProperties_jobs, 
COALESCE(`_removed`.`properties`.`claimantCommitmentProperties`.`travelToWorkMinutes`, `properties`.`claimantCommitmentProperties`.`travelToWorkMinutes`) as properties_claimantCommitmentProperties_travelToWorkMinutes, 
COALESCE(`_removed`.`properties`.`claimantCommitmentProperties`.`wageAmount`, `properties`.`claimantCommitmentProperties`.`wageAmount`) as properties_claimantCommitmentProperties_wageAmount, 
COALESCE(`_removed`.`properties`.`claimantCommitmentProperties`.`workHours`, `properties`.`claimantCommitmentProperties`.`workHours`) as properties_claimantCommitmentProperties_workHours, 
COALESCE(`_removed`.`properties`.`claimantCommitmentProperties`.`workPaymentFrequency`, `properties`.`claimantCommitmentProperties`.`workPaymentFrequency`) as properties_claimantCommitmentProperties_workPaymentFrequency, 
COALESCE(CAST(`_removed`.`properties`.`claimantCommitmentProperties`.`workPreparationAndSearchSwitchedOff` as STRING), CAST(`properties`.`claimantCommitmentProperties`.`workPreparationAndSearchSwitchedOff` as STRING)) as properties_claimantCommitmentProperties_workPreparationAndSearchSwitchedOff, 
COALESCE(CAST(`_removed`.`properties`.`claimantCommitmentProperties`.`workSectionSwitchedOff` as STRING), CAST(`properties`.`claimantCommitmentProperties`.`workSectionSwitchedOff` as STRING)) as properties_claimantCommitmentProperties_workSectionSwitchedOff, 
COALESCE(`_removed`.`properties`.`workGroup`, `properties`.`workGroup`) as properties_workGroup, 
COALESCE(`_removed`.`properties`.`type`, `properties`.`type`) as properties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_core_todo_todo_accept_commitments_todo_properties
 LATERAL VIEW OUTER EXPLODE(`properties`.`claimantCommitmentProperties`.`additionalActivities`) view_exploded_properties_claimantcommitmentproperties_additionalactivities AS exploded_properties_claimantcommitmentproperties_additionalactivities 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`properties`.`claimantCommitmentProperties`.`additionalActivities`) view_removed_exploded_properties_claimantcommitmentproperties_additionalactivities AS removed_exploded_properties_claimantcommitmentproperties_additionalactivities 
 LATERAL VIEW OUTER EXPLODE(`properties`.`claimantCommitmentProperties`.`regularActivities`) view_exploded_properties_claimantcommitmentproperties_regularactivities AS exploded_properties_claimantcommitmentproperties_regularactivities 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`properties`.`claimantCommitmentProperties`.`regularActivities`) view_removed_exploded_properties_claimantcommitmentproperties_regularactivities AS removed_exploded_properties_claimantcommitmentproperties_regularactivities 
 LATERAL VIEW OUTER EXPLODE(`properties`.`claimantCommitmentProperties`.`activities`) view_exploded_properties_claimantcommitmentproperties_activities AS exploded_properties_claimantcommitmentproperties_activities 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`properties`.`claimantCommitmentProperties`.`activities`) view_removed_exploded_properties_claimantcommitmentproperties_activities AS removed_exploded_properties_claimantcommitmentproperties_activities 
 LATERAL VIEW OUTER EXPLODE(`properties`.`claimantCommitmentProperties`.`jobs`) view_exploded_properties_claimantcommitmentproperties_jobs AS exploded_properties_claimantcommitmentproperties_jobs 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`properties`.`claimantCommitmentProperties`.`jobs`) view_removed_exploded_properties_claimantcommitmentproperties_jobs AS removed_exploded_properties_claimantcommitmentproperties_jobs 
 
 where `_removed`.`properties`.`type`='ACCEPT_COMMITMENTS_TODO_PROPERTIES' or `properties`.`type`='ACCEPT_COMMITMENTS_TODO_PROPERTIES';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_OVERDUE_TO_DOS_FOR_CALCULATION;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_overdue_to_dos_for_calculation
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_overdue_to_dos_for_calculation(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`assessmentPeriodId`:STRING
,`source`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`assessmentPeriodId`:STRING
,`source`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_OVERDUE_TO_DOS_FOR_CALCULATION;

CREATE TABLE agent_todo_archive_overdue_to_dos_for_calculation STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`assessmentPeriodId`, `toDoProperties`.`assessmentPeriodId`) as toDoProperties_assessmentPeriodId, 
COALESCE(`_removed`.`toDoProperties`.`source`, `toDoProperties`.`source`) as toDoProperties_source, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_overdue_to_dos_for_calculation
 src_agent_core_agenttodoarchive_agent_todo_archive_overdue_to_dos_for_calculation 
 where `_removed`.`toDoProperties`.`type`='OVERDUE_TO_DOS_FOR_CALCULATION' or `toDoProperties`.`type`='OVERDUE_TO_DOS_FOR_CALCULATION';


!echo ------------------------;
!echo ------------------------ claimant_commitment_HIGH;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_claimantcommitment_claimant_commitment_high
;

CREATE EXTERNAL TABLE src_core_claimantcommitment_claimant_commitment_high(
`properties` STRUCT<`availability`:STRUCT<`friday`:STRUCT<`availableHours`:STRING
,`availableTimes`:STRING>
,`monday`:STRUCT<`availableHours`:STRING
,`availableTimes`:STRING>
,`saturday`:STRUCT<`availableHours`:STRING
,`availableTimes`:STRING>
,`sunday`:STRUCT<`availableHours`:STRING
,`availableTimes`:STRING>
,`thursday`:STRUCT<`availableHours`:STRING
,`availableTimes`:STRING>
,`tuesday`:STRUCT<`availableHours`:STRING
,`availableTimes`:STRING>
,`wednesday`:STRUCT<`availableHours`:STRING
,`availableTimes`:STRING>>
,`additionalActivities`:ARRAY<STRUCT<`activityDescription`:STRING
,`completedBy`:STRING
,`reviewBy`:STRING
,`formattedCompletedBy`:STRING
,`formattedReviewBy`:STRING
>>
,`regularActivities`:ARRAY<STRUCT<`activityDescription`:STRING
,`frequency`:STRING
>>
,`activities`:STRING
,`availabilityRequirementsSanction`:STRING
,`availabilitySanction`:STRING
,`availabilitySectionDisabled`:BOOLEAN
,`circumstancesFollowOnSanction`:STRING
,`circumstancesInitialSanction`:STRING
,`circumstancesLostWorkSanction`:STRING
,`commitment`:STRING
,`followOnSanction`:STRING
,`initialSanction`:STRING
,`interviewAvailability`:STRING
,`minimumPay`:STRING
,`numberOfHours`:STRING
,`payPeriod`:STRING
,`restrictedAvailability`:BOOLEAN
,`role`:STRING
,`startWorkAvailability`:STRING
,`timeSpent`:STRING
,`travelTime`:STRING
,`workPlanSectionDisabled`:BOOLEAN
,`workSearchSanction`:STRING
,`claimantCommitmentVersion`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`contractId`:STRING
,`claimantId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`properties`:STRUCT<`availability`:STRUCT<`friday`:STRUCT<`availableHours`:STRING
,`availableTimes`:STRING>
,`monday`:STRUCT<`availableHours`:STRING
,`availableTimes`:STRING>
,`saturday`:STRUCT<`availableHours`:STRING
,`availableTimes`:STRING>
,`sunday`:STRUCT<`availableHours`:STRING
,`availableTimes`:STRING>
,`thursday`:STRUCT<`availableHours`:STRING
,`availableTimes`:STRING>
,`tuesday`:STRUCT<`availableHours`:STRING
,`availableTimes`:STRING>
,`wednesday`:STRUCT<`availableHours`:STRING
,`availableTimes`:STRING>>
,`additionalActivities`:ARRAY<STRUCT<`activityDescription`:STRING
,`completedBy`:STRING
,`reviewBy`:STRING
,`formattedCompletedBy`:STRING
,`formattedReviewBy`:STRING
>>
,`regularActivities`:ARRAY<STRUCT<`activityDescription`:STRING
,`frequency`:STRING
>>
,`activities`:STRING
,`availabilityRequirementsSanction`:STRING
,`availabilitySanction`:STRING
,`availabilitySectionDisabled`:BOOLEAN
,`circumstancesFollowOnSanction`:STRING
,`circumstancesInitialSanction`:STRING
,`circumstancesLostWorkSanction`:STRING
,`commitment`:STRING
,`followOnSanction`:STRING
,`initialSanction`:STRING
,`interviewAvailability`:STRING
,`minimumPay`:STRING
,`numberOfHours`:STRING
,`payPeriod`:STRING
,`restrictedAvailability`:BOOLEAN
,`role`:STRING
,`startWorkAvailability`:STRING
,`timeSpent`:STRING
,`travelTime`:STRING
,`workPlanSectionDisabled`:BOOLEAN
,`workSearchSanction`:STRING
,`claimantCommitmentVersion`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`contractId`:STRING
,`claimantId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/claimantCommitment';

DROP TABLE IF EXISTS claimant_commitment_HIGH;

CREATE TABLE claimant_commitment_high STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`properties`.`activities`, `properties`.`activities`) as properties_activities, 
COALESCE(`removed_exploded_properties_additionalactivities`.`activityDescription`, `exploded_properties_additionalactivities`.`activityDescription`) as properties_additionalActivities_activityDescription, 
COALESCE(`removed_exploded_properties_additionalactivities`.`completedBy`, `exploded_properties_additionalactivities`.`completedBy`) as properties_additionalActivities_completedBy, 
COALESCE(`removed_exploded_properties_additionalactivities`.`reviewBy`, `exploded_properties_additionalactivities`.`reviewBy`) as properties_additionalActivities_reviewBy, 
COALESCE(`removed_exploded_properties_additionalactivities`.`formattedCompletedBy`, `exploded_properties_additionalactivities`.`formattedCompletedBy`) as properties_additionalActivities_formattedCompletedBy, 
COALESCE(`removed_exploded_properties_additionalactivities`.`formattedReviewBy`, `exploded_properties_additionalactivities`.`formattedReviewBy`) as properties_additionalActivities_formattedReviewBy, 
COALESCE(`_removed`.`properties`.`availability`.`friday`.`availableHours`, `properties`.`availability`.`friday`.`availableHours`) as properties_availability_friday_availableHours, 
COALESCE(`_removed`.`properties`.`availability`.`friday`.`availableTimes`, `properties`.`availability`.`friday`.`availableTimes`) as properties_availability_friday_availableTimes, 
COALESCE(`_removed`.`properties`.`availability`.`monday`.`availableHours`, `properties`.`availability`.`monday`.`availableHours`) as properties_availability_monday_availableHours, 
COALESCE(`_removed`.`properties`.`availability`.`monday`.`availableTimes`, `properties`.`availability`.`monday`.`availableTimes`) as properties_availability_monday_availableTimes, 
COALESCE(`_removed`.`properties`.`availability`.`saturday`.`availableHours`, `properties`.`availability`.`saturday`.`availableHours`) as properties_availability_saturday_availableHours, 
COALESCE(`_removed`.`properties`.`availability`.`saturday`.`availableTimes`, `properties`.`availability`.`saturday`.`availableTimes`) as properties_availability_saturday_availableTimes, 
COALESCE(`_removed`.`properties`.`availability`.`sunday`.`availableHours`, `properties`.`availability`.`sunday`.`availableHours`) as properties_availability_sunday_availableHours, 
COALESCE(`_removed`.`properties`.`availability`.`sunday`.`availableTimes`, `properties`.`availability`.`sunday`.`availableTimes`) as properties_availability_sunday_availableTimes, 
COALESCE(`_removed`.`properties`.`availability`.`thursday`.`availableHours`, `properties`.`availability`.`thursday`.`availableHours`) as properties_availability_thursday_availableHours, 
COALESCE(`_removed`.`properties`.`availability`.`thursday`.`availableTimes`, `properties`.`availability`.`thursday`.`availableTimes`) as properties_availability_thursday_availableTimes, 
COALESCE(`_removed`.`properties`.`availability`.`tuesday`.`availableHours`, `properties`.`availability`.`tuesday`.`availableHours`) as properties_availability_tuesday_availableHours, 
COALESCE(`_removed`.`properties`.`availability`.`tuesday`.`availableTimes`, `properties`.`availability`.`tuesday`.`availableTimes`) as properties_availability_tuesday_availableTimes, 
COALESCE(`_removed`.`properties`.`availability`.`wednesday`.`availableHours`, `properties`.`availability`.`wednesday`.`availableHours`) as properties_availability_wednesday_availableHours, 
COALESCE(`_removed`.`properties`.`availability`.`wednesday`.`availableTimes`, `properties`.`availability`.`wednesday`.`availableTimes`) as properties_availability_wednesday_availableTimes, 
COALESCE(`_removed`.`properties`.`availabilityRequirementsSanction`, `properties`.`availabilityRequirementsSanction`) as properties_availabilityRequirementsSanction, 
COALESCE(`_removed`.`properties`.`availabilitySanction`, `properties`.`availabilitySanction`) as properties_availabilitySanction, 
COALESCE(CAST(`_removed`.`properties`.`availabilitySectionDisabled` as STRING), CAST(`properties`.`availabilitySectionDisabled` as STRING)) as properties_availabilitySectionDisabled, 
COALESCE(`_removed`.`properties`.`circumstancesFollowOnSanction`, `properties`.`circumstancesFollowOnSanction`) as properties_circumstancesFollowOnSanction, 
COALESCE(`_removed`.`properties`.`circumstancesInitialSanction`, `properties`.`circumstancesInitialSanction`) as properties_circumstancesInitialSanction, 
COALESCE(`_removed`.`properties`.`circumstancesLostWorkSanction`, `properties`.`circumstancesLostWorkSanction`) as properties_circumstancesLostWorkSanction, 
COALESCE(`_removed`.`properties`.`commitment`, `properties`.`commitment`) as properties_commitment, 
COALESCE(`_removed`.`properties`.`followOnSanction`, `properties`.`followOnSanction`) as properties_followOnSanction, 
COALESCE(`_removed`.`properties`.`initialSanction`, `properties`.`initialSanction`) as properties_initialSanction, 
COALESCE(`_removed`.`properties`.`interviewAvailability`, `properties`.`interviewAvailability`) as properties_interviewAvailability, 
COALESCE(`_removed`.`properties`.`minimumPay`, `properties`.`minimumPay`) as properties_minimumPay, 
COALESCE(`_removed`.`properties`.`numberOfHours`, `properties`.`numberOfHours`) as properties_numberOfHours, 
COALESCE(`_removed`.`properties`.`payPeriod`, `properties`.`payPeriod`) as properties_payPeriod, 
COALESCE(`removed_exploded_properties_regularactivities`.`activityDescription`, `exploded_properties_regularactivities`.`activityDescription`) as properties_regularActivities_activityDescription, 
COALESCE(`removed_exploded_properties_regularactivities`.`frequency`, `exploded_properties_regularactivities`.`frequency`) as properties_regularActivities_frequency, 
COALESCE(CAST(`_removed`.`properties`.`restrictedAvailability` as STRING), CAST(`properties`.`restrictedAvailability` as STRING)) as properties_restrictedAvailability, 
COALESCE(`_removed`.`properties`.`role`, `properties`.`role`) as properties_role, 
COALESCE(`_removed`.`properties`.`startWorkAvailability`, `properties`.`startWorkAvailability`) as properties_startWorkAvailability, 
COALESCE(`_removed`.`properties`.`timeSpent`, `properties`.`timeSpent`) as properties_timeSpent, 
COALESCE(`_removed`.`properties`.`travelTime`, `properties`.`travelTime`) as properties_travelTime, 
COALESCE(CAST(`_removed`.`properties`.`workPlanSectionDisabled` as STRING), CAST(`properties`.`workPlanSectionDisabled` as STRING)) as properties_workPlanSectionDisabled, 
COALESCE(`_removed`.`properties`.`workSearchSanction`, `properties`.`workSearchSanction`) as properties_workSearchSanction, 
COALESCE(`_removed`.`properties`.`claimantCommitmentVersion`, `properties`.`claimantCommitmentVersion`) as properties_claimantCommitmentVersion, 
COALESCE(`_removed`.`properties`.`type`, `properties`.`type`) as properties_type, 
COALESCE(`_removed`.`_id`.`contractId`, `_id`.`contractId`) as contractId, 
COALESCE(`_removed`.`_id`.`claimantId`, `_id`.`claimantId`) as claimantId FROM src_core_claimantcommitment_claimant_commitment_high
 LATERAL VIEW OUTER EXPLODE(`properties`.`additionalActivities`) view_exploded_properties_additionalactivities AS exploded_properties_additionalactivities 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`properties`.`additionalActivities`) view_removed_exploded_properties_additionalactivities AS removed_exploded_properties_additionalactivities 
 LATERAL VIEW OUTER EXPLODE(`properties`.`regularActivities`) view_exploded_properties_regularactivities AS exploded_properties_regularactivities 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`properties`.`regularActivities`) view_removed_exploded_properties_regularactivities AS removed_exploded_properties_regularactivities 
 
 where `_removed`.`properties`.`type`='HIGH' or `properties`.`type`='HIGH';


!echo ------------------------;
!echo ------------------------ journal_ClaimantNotificationJournalEntry;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_journal_journal_claimantnotificationjournalentry
;

CREATE EXTERNAL TABLE src_core_journal_journal_claimantnotificationjournalentry(
`journalEntryProperties` STRUCT<`notificationProperties`:STRUCT<`additionalSuspensionDetails`:STRUCT<`fraudOfficerContractNumber`:STRING
,`fraudOfficerName`:STRING
,`type`:STRING>
,`apaTypes`:ARRAY<STRING>
,`benefits`:ARRAY<STRING>
,`advanceAmount`:STRING
,`advanceApprovalDate`:STRING
,`advanceType`:STRING
,`type`:STRING
,`apaAmount`:STRING
,`paymentDate`:STRING
,`affectedClaimantId`:STRING
,`affectedClaimantName`:STRING
,`notifiedClaimantId`:STRING
,`notifiedClaimantName`:STRING
,`dateSuspended`:STRING
,`suspensionType`:STRING
,`dateOfConviction`:STRING
,`determinationDate`:STRING
,`durationInDays`:STRING
,`originalBenefitType`:STRING
,`failureDate`:STRING
,`sanctionId`:STRING
,`dateOfFailure`:STRING
,`failureType`:STRING>
,`notificationType`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`journalId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`journalEntryProperties`:STRUCT<`notificationProperties`:STRUCT<`additionalSuspensionDetails`:STRUCT<`fraudOfficerContractNumber`:STRING
,`fraudOfficerName`:STRING
,`type`:STRING>
,`apaTypes`:ARRAY<STRING>
,`benefits`:ARRAY<STRING>
,`advanceAmount`:STRING
,`advanceApprovalDate`:STRING
,`advanceType`:STRING
,`type`:STRING
,`apaAmount`:STRING
,`paymentDate`:STRING
,`affectedClaimantId`:STRING
,`affectedClaimantName`:STRING
,`notifiedClaimantId`:STRING
,`notifiedClaimantName`:STRING
,`dateSuspended`:STRING
,`suspensionType`:STRING
,`dateOfConviction`:STRING
,`determinationDate`:STRING
,`durationInDays`:STRING
,`originalBenefitType`:STRING
,`failureDate`:STRING
,`sanctionId`:STRING
,`dateOfFailure`:STRING
,`failureType`:STRING>
,`notificationType`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`journalId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/journal';

DROP TABLE IF EXISTS journal_ClaimantNotificationJournalEntry;

CREATE TABLE journal_claimantnotificationjournalentry STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`journalEntryProperties`.`notificationProperties`.`advanceAmount`, `journalEntryProperties`.`notificationProperties`.`advanceAmount`) as journalEntryProperties_notificationProperties_advanceAmount, 
COALESCE(`_removed`.`journalEntryProperties`.`notificationProperties`.`advanceApprovalDate`, `journalEntryProperties`.`notificationProperties`.`advanceApprovalDate`) as journalEntryProperties_notificationProperties_advanceApprovalDate, 
COALESCE(`_removed`.`journalEntryProperties`.`notificationProperties`.`advanceType`, `journalEntryProperties`.`notificationProperties`.`advanceType`) as journalEntryProperties_notificationProperties_advanceType, 
COALESCE(`_removed`.`journalEntryProperties`.`notificationProperties`.`type`, `journalEntryProperties`.`notificationProperties`.`type`) as journalEntryProperties_notificationProperties_type, 
COALESCE(`_removed`.`journalEntryProperties`.`notificationProperties`.`apaAmount`, `journalEntryProperties`.`notificationProperties`.`apaAmount`) as journalEntryProperties_notificationProperties_apaAmount, 
COALESCE(`removed_exploded_journalentryproperties_notificationproperties_apatypes`, `exploded_journalentryproperties_notificationproperties_apatypes`) as journalEntryProperties_notificationProperties_apaTypes, 
COALESCE(`_removed`.`journalEntryProperties`.`notificationProperties`.`paymentDate`, `journalEntryProperties`.`notificationProperties`.`paymentDate`) as journalEntryProperties_notificationProperties_paymentDate, 
COALESCE(`_removed`.`journalEntryProperties`.`notificationProperties`.`affectedClaimantId`, `journalEntryProperties`.`notificationProperties`.`affectedClaimantId`) as journalEntryProperties_notificationProperties_affectedClaimantId, 
COALESCE(`_removed`.`journalEntryProperties`.`notificationProperties`.`affectedClaimantName`, `journalEntryProperties`.`notificationProperties`.`affectedClaimantName`) as journalEntryProperties_notificationProperties_affectedClaimantName, 
COALESCE(`removed_exploded_journalentryproperties_notificationproperties_benefits`, `exploded_journalentryproperties_notificationproperties_benefits`) as journalEntryProperties_notificationProperties_benefits, 
COALESCE(`_removed`.`journalEntryProperties`.`notificationProperties`.`notifiedClaimantId`, `journalEntryProperties`.`notificationProperties`.`notifiedClaimantId`) as journalEntryProperties_notificationProperties_notifiedClaimantId, 
COALESCE(`_removed`.`journalEntryProperties`.`notificationProperties`.`notifiedClaimantName`, `journalEntryProperties`.`notificationProperties`.`notifiedClaimantName`) as journalEntryProperties_notificationProperties_notifiedClaimantName, 
COALESCE(`_removed`.`journalEntryProperties`.`notificationProperties`.`additionalSuspensionDetails`.`fraudOfficerContractNumber`, `journalEntryProperties`.`notificationProperties`.`additionalSuspensionDetails`.`fraudOfficerContractNumber`) as journalEntryProperties_notificationProperties_additionalSuspensionDetails_fraudOfficerContractNumber, 
COALESCE(`_removed`.`journalEntryProperties`.`notificationProperties`.`additionalSuspensionDetails`.`fraudOfficerName`, `journalEntryProperties`.`notificationProperties`.`additionalSuspensionDetails`.`fraudOfficerName`) as journalEntryProperties_notificationProperties_additionalSuspensionDetails_fraudOfficerName, 
COALESCE(`_removed`.`journalEntryProperties`.`notificationProperties`.`additionalSuspensionDetails`.`type`, `journalEntryProperties`.`notificationProperties`.`additionalSuspensionDetails`.`type`) as journalEntryProperties_notificationProperties_additionalSuspensionDetails_type, 
COALESCE(`_removed`.`journalEntryProperties`.`notificationProperties`.`dateSuspended`, `journalEntryProperties`.`notificationProperties`.`dateSuspended`) as journalEntryProperties_notificationProperties_dateSuspended, 
COALESCE(`_removed`.`journalEntryProperties`.`notificationProperties`.`suspensionType`, `journalEntryProperties`.`notificationProperties`.`suspensionType`) as journalEntryProperties_notificationProperties_suspensionType, 
COALESCE(`_removed`.`journalEntryProperties`.`notificationProperties`.`dateOfConviction`, `journalEntryProperties`.`notificationProperties`.`dateOfConviction`) as journalEntryProperties_notificationProperties_dateOfConviction, 
COALESCE(`_removed`.`journalEntryProperties`.`notificationProperties`.`determinationDate`, `journalEntryProperties`.`notificationProperties`.`determinationDate`) as journalEntryProperties_notificationProperties_determinationDate, 
COALESCE(`_removed`.`journalEntryProperties`.`notificationProperties`.`durationInDays`, `journalEntryProperties`.`notificationProperties`.`durationInDays`) as journalEntryProperties_notificationProperties_durationInDays, 
COALESCE(`_removed`.`journalEntryProperties`.`notificationProperties`.`originalBenefitType`, `journalEntryProperties`.`notificationProperties`.`originalBenefitType`) as journalEntryProperties_notificationProperties_originalBenefitType, 
COALESCE(`_removed`.`journalEntryProperties`.`notificationProperties`.`failureDate`, `journalEntryProperties`.`notificationProperties`.`failureDate`) as journalEntryProperties_notificationProperties_failureDate, 
COALESCE(`_removed`.`journalEntryProperties`.`notificationProperties`.`sanctionId`, `journalEntryProperties`.`notificationProperties`.`sanctionId`) as journalEntryProperties_notificationProperties_sanctionId, 
COALESCE(`_removed`.`journalEntryProperties`.`notificationProperties`.`dateOfFailure`, `journalEntryProperties`.`notificationProperties`.`dateOfFailure`) as journalEntryProperties_notificationProperties_dateOfFailure, 
COALESCE(`_removed`.`journalEntryProperties`.`notificationProperties`.`failureType`, `journalEntryProperties`.`notificationProperties`.`failureType`) as journalEntryProperties_notificationProperties_failureType, 
COALESCE(`_removed`.`journalEntryProperties`.`notificationType`, `journalEntryProperties`.`notificationType`) as journalEntryProperties_notificationType, 
COALESCE(`_removed`.`journalEntryProperties`.`type`, `journalEntryProperties`.`type`) as journalEntryProperties_type, 
COALESCE(`_removed`.`_id`.`journalId`, `_id`.`journalId`) as id FROM src_core_journal_journal_claimantnotificationjournalentry
 LATERAL VIEW OUTER EXPLODE(`journalEntryProperties`.`notificationProperties`.`apaTypes`) view_exploded_journalentryproperties_notificationproperties_apatypes AS exploded_journalentryproperties_notificationproperties_apatypes 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`journalEntryProperties`.`notificationProperties`.`apaTypes`) view_removed_exploded_journalentryproperties_notificationproperties_apatypes AS removed_exploded_journalentryproperties_notificationproperties_apatypes 
 LATERAL VIEW OUTER EXPLODE(`journalEntryProperties`.`notificationProperties`.`benefits`) view_exploded_journalentryproperties_notificationproperties_benefits AS exploded_journalentryproperties_notificationproperties_benefits 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`journalEntryProperties`.`notificationProperties`.`benefits`) view_removed_exploded_journalentryproperties_notificationproperties_benefits AS removed_exploded_journalentryproperties_notificationproperties_benefits 
 
 where `_removed`.`journalEntryProperties`.`type`='ClaimantNotificationJournalEntry' or `journalEntryProperties`.`type`='ClaimantNotificationJournalEntry';


!echo ------------------------;
!echo ------------------------ todo_CHILDCARE_PROVIDER_PROVIDE_PROOF;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_todo_todo_childcare_provider_provide_proof
;

CREATE EXTERNAL TABLE src_core_todo_todo_childcare_provider_provide_proof(
`properties` STRUCT<`childcareProviders`:ARRAY<STRING>
,`childcareCostClaimantUploadDetailsId`:STRING
,`claimantUploadDetailsId`:STRING
,`declarationId`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`properties`:STRUCT<`childcareProviders`:ARRAY<STRING>
,`childcareCostClaimantUploadDetailsId`:STRING
,`claimantUploadDetailsId`:STRING
,`declarationId`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/toDo';

DROP TABLE IF EXISTS todo_CHILDCARE_PROVIDER_PROVIDE_PROOF;

CREATE TABLE todo_childcare_provider_provide_proof STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`properties`.`childcareCostClaimantUploadDetailsId`, `properties`.`childcareCostClaimantUploadDetailsId`) as properties_childcareCostClaimantUploadDetailsId, 
COALESCE(`removed_exploded_properties_childcareproviders`, `exploded_properties_childcareproviders`) as properties_childcareProviders, 
COALESCE(`_removed`.`properties`.`claimantUploadDetailsId`, `properties`.`claimantUploadDetailsId`) as properties_claimantUploadDetailsId, 
COALESCE(`_removed`.`properties`.`declarationId`, `properties`.`declarationId`) as properties_declarationId, 
COALESCE(`_removed`.`properties`.`type`, `properties`.`type`) as properties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_core_todo_todo_childcare_provider_provide_proof
 LATERAL VIEW OUTER EXPLODE(`properties`.`childcareProviders`) view_exploded_properties_childcareproviders AS exploded_properties_childcareproviders 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`properties`.`childcareProviders`) view_removed_exploded_properties_childcareproviders AS removed_exploded_properties_childcareproviders 
 
 where `_removed`.`properties`.`type`='CHILDCARE_PROVIDER_PROVIDE_PROOF' or `properties`.`type`='CHILDCARE_PROVIDER_PROVIDE_PROOF';


!echo ------------------------;
!echo ------------------------ agent_todo_HOUSING_DECLARATION_TO_DO_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_housing_declaration_to_do_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_housing_declaration_to_do_properties(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`housingDeclarationId`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`housingDeclarationId`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_HOUSING_DECLARATION_TO_DO_PROPERTIES;

CREATE TABLE agent_todo_housing_declaration_to_do_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`housingDeclarationId`, `toDoProperties`.`housingDeclarationId`) as toDoProperties_housingDeclarationId, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_housing_declaration_to_do_properties
 src_agent_core_agenttodo_agent_todo_housing_declaration_to_do_properties 
 where `_removed`.`toDoProperties`.`type`='HOUSING_DECLARATION_TO_DO_PROPERTIES' or `toDoProperties`.`type`='HOUSING_DECLARATION_TO_DO_PROPERTIES';


!echo ------------------------;
!echo ------------------------ journal_legacyFraudPenaltyRemovedJournalEntry;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_journal_journal_legacyfraudpenaltyremovedjournalentry
;

CREATE EXTERNAL TABLE src_core_journal_journal_legacyfraudpenaltyremovedjournalentry(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`journalEntryProperties` STRUCT<`convictionDate`:STRING
,`determinationDate`:STRING
,`durationInDays`:STRING
,`originalBenefitType`:STRING
,`type`:STRING>
,`_id` STRUCT<`journalId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`journalEntryProperties`:STRUCT<`convictionDate`:STRING
,`determinationDate`:STRING
,`durationInDays`:STRING
,`originalBenefitType`:STRING
,`type`:STRING>
,`_id`:STRUCT<`journalId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/journal';

DROP TABLE IF EXISTS journal_legacyFraudPenaltyRemovedJournalEntry;

CREATE TABLE journal_legacyfraudpenaltyremovedjournalentry STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`journalEntryProperties`.`convictionDate`, `journalEntryProperties`.`convictionDate`) as journalEntryProperties_convictionDate, 
COALESCE(`_removed`.`journalEntryProperties`.`determinationDate`, `journalEntryProperties`.`determinationDate`) as journalEntryProperties_determinationDate, 
COALESCE(`_removed`.`journalEntryProperties`.`durationInDays`, `journalEntryProperties`.`durationInDays`) as journalEntryProperties_durationInDays, 
COALESCE(`_removed`.`journalEntryProperties`.`originalBenefitType`, `journalEntryProperties`.`originalBenefitType`) as journalEntryProperties_originalBenefitType, 
COALESCE(`_removed`.`journalEntryProperties`.`type`, `journalEntryProperties`.`type`) as journalEntryProperties_type, 
COALESCE(`_removed`.`_id`.`journalId`, `_id`.`journalId`) as id FROM src_core_journal_journal_legacyfraudpenaltyremovedjournalentry
 src_core_journal_journal_legacyfraudpenaltyremovedjournalentry 
 where `_removed`.`journalEntryProperties`.`type`='legacyFraudPenaltyRemovedJournalEntry' or `journalEntryProperties`.`type`='legacyFraudPenaltyRemovedJournalEntry';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_HRT_ENTITLEMENT_DECISION;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_hrt_entitlement_decision
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_hrt_entitlement_decision(
`toDoProperties` STRUCT<`attachmentSummary`:STRUCT<`updatedAt`:STRUCT<`d_date`:STRING>
,`fileName`:STRING
,`fileSize`:STRING
,`id`:STRING
,`revision`:STRING
,`updatedBy`:STRING>
,`person`:STRUCT<`declaredDateTime`:STRUCT<`d_date`:STRING>
,`effectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`citizenId`:STRING
,`contactPreference`:STRING
,`contractId`:STRING
,`email`:STRING
,`firstName`:STRING
,`gender`:STRING
,`lastName`:STRING
,`middleName`:STRING
,`mobileNumber`:STRING
,`sanitisedFirstName`:STRING
,`sanitisedLastName`:STRING
,`sanitisedMiddleName`:STRING
,`verifiedUsingBioQuestionsOrThirdParty`:BOOLEAN
,`verifiedWithNameDateOfBirthOrAddressChange`:BOOLEAN
,`type`:STRING>
,`notUkNational`:BOOLEAN
,`returnAfterAbsence`:BOOLEAN
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`attachmentSummary`:STRUCT<`updatedAt`:STRUCT<`d_date`:STRING>
,`fileName`:STRING
,`fileSize`:STRING
,`id`:STRING
,`revision`:STRING
,`updatedBy`:STRING>
,`person`:STRUCT<`declaredDateTime`:STRUCT<`d_date`:STRING>
,`effectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`citizenId`:STRING
,`contactPreference`:STRING
,`contractId`:STRING
,`email`:STRING
,`firstName`:STRING
,`gender`:STRING
,`lastName`:STRING
,`middleName`:STRING
,`mobileNumber`:STRING
,`sanitisedFirstName`:STRING
,`sanitisedLastName`:STRING
,`sanitisedMiddleName`:STRING
,`verifiedUsingBioQuestionsOrThirdParty`:BOOLEAN
,`verifiedWithNameDateOfBirthOrAddressChange`:BOOLEAN
,`type`:STRING>
,`notUkNational`:BOOLEAN
,`returnAfterAbsence`:BOOLEAN
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_HRT_ENTITLEMENT_DECISION;

CREATE TABLE agent_todo_archive_hrt_entitlement_decision STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`attachmentSummary`.`fileName`, `toDoProperties`.`attachmentSummary`.`fileName`) as toDoProperties_attachmentSummary_fileName, 
COALESCE(`_removed`.`toDoProperties`.`attachmentSummary`.`fileSize`, `toDoProperties`.`attachmentSummary`.`fileSize`) as toDoProperties_attachmentSummary_fileSize, 
COALESCE(`_removed`.`toDoProperties`.`attachmentSummary`.`id`, `toDoProperties`.`attachmentSummary`.`id`) as toDoProperties_attachmentSummary_id, 
COALESCE(`_removed`.`toDoProperties`.`attachmentSummary`.`revision`, `toDoProperties`.`attachmentSummary`.`revision`) as toDoProperties_attachmentSummary_revision, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, LENGTH(`_removed`.`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, LENGTH(`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 21, 3)) AS TIMESTAMP) END) as toDoProperties_attachmentSummary_updatedAt_d_date, 
COALESCE(`_removed`.`toDoProperties`.`attachmentSummary`.`updatedBy`, `toDoProperties`.`attachmentSummary`.`updatedBy`) as toDoProperties_attachmentSummary_updatedBy, 
COALESCE(CAST(`_removed`.`toDoProperties`.`notUkNational` as STRING), CAST(`toDoProperties`.`notUkNational` as STRING)) as toDoProperties_notUkNational, 
COALESCE(`_removed`.`toDoProperties`.`person`.`citizenId`, `toDoProperties`.`person`.`citizenId`) as toDoProperties_person_citizenId, 
COALESCE(`_removed`.`toDoProperties`.`person`.`contactPreference`, `toDoProperties`.`person`.`contactPreference`) as toDoProperties_person_contactPreference, 
COALESCE(`_removed`.`toDoProperties`.`person`.`contractId`, `toDoProperties`.`person`.`contractId`) as toDoProperties_person_contractId, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`toDoProperties`.`person`.`declaredDateTime`.`d_date`, LENGTH(`_removed`.`toDoProperties`.`person`.`declaredDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`person`.`declaredDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`person`.`declaredDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`person`.`declaredDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`person`.`declaredDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`toDoProperties`.`person`.`declaredDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`toDoProperties`.`person`.`declaredDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`toDoProperties`.`person`.`declaredDateTime`.`d_date`, LENGTH(`toDoProperties`.`person`.`declaredDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`toDoProperties`.`person`.`declaredDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`person`.`declaredDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`toDoProperties`.`person`.`declaredDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`person`.`declaredDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`toDoProperties`.`person`.`declaredDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`toDoProperties`.`person`.`declaredDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as toDoProperties_person_declaredDateTime_d_date, 
COALESCE(CAST(`_removed`.`toDoProperties`.`person`.`effectiveDate`.`hasDate` as STRING), CAST(`toDoProperties`.`person`.`effectiveDate`.`hasDate` as STRING)) as toDoProperties_person_effectiveDate_hasDate, 
COALESCE(`_removed`.`toDoProperties`.`person`.`effectiveDate`.`knownDate`, `toDoProperties`.`person`.`effectiveDate`.`knownDate`) as toDoProperties_person_effectiveDate_knownDate, 
COALESCE(`_removed`.`toDoProperties`.`person`.`effectiveDate`.`type`, `toDoProperties`.`person`.`effectiveDate`.`type`) as toDoProperties_person_effectiveDate_type, 
COALESCE(`_removed`.`toDoProperties`.`person`.`effectiveDate`.`date`, `toDoProperties`.`person`.`effectiveDate`.`date`) as toDoProperties_person_effectiveDate_date, 
COALESCE(`_removed`.`toDoProperties`.`person`.`email`, `toDoProperties`.`person`.`email`) as toDoProperties_person_email, 
COALESCE(`_removed`.`toDoProperties`.`person`.`firstName`, `toDoProperties`.`person`.`firstName`) as toDoProperties_person_firstName, 
COALESCE(`_removed`.`toDoProperties`.`person`.`gender`, `toDoProperties`.`person`.`gender`) as toDoProperties_person_gender, 
COALESCE(`_removed`.`toDoProperties`.`person`.`lastName`, `toDoProperties`.`person`.`lastName`) as toDoProperties_person_lastName, 
COALESCE(`_removed`.`toDoProperties`.`person`.`middleName`, `toDoProperties`.`person`.`middleName`) as toDoProperties_person_middleName, 
COALESCE(`_removed`.`toDoProperties`.`person`.`mobileNumber`, `toDoProperties`.`person`.`mobileNumber`) as toDoProperties_person_mobileNumber, 
COALESCE(CAST(`_removed`.`toDoProperties`.`person`.`paymentEffectiveDate`.`hasDate` as STRING), CAST(`toDoProperties`.`person`.`paymentEffectiveDate`.`hasDate` as STRING)) as toDoProperties_person_paymentEffectiveDate_hasDate, 
COALESCE(`_removed`.`toDoProperties`.`person`.`paymentEffectiveDate`.`knownDate`, `toDoProperties`.`person`.`paymentEffectiveDate`.`knownDate`) as toDoProperties_person_paymentEffectiveDate_knownDate, 
COALESCE(`_removed`.`toDoProperties`.`person`.`paymentEffectiveDate`.`type`, `toDoProperties`.`person`.`paymentEffectiveDate`.`type`) as toDoProperties_person_paymentEffectiveDate_type, 
COALESCE(`_removed`.`toDoProperties`.`person`.`paymentEffectiveDate`.`date`, `toDoProperties`.`person`.`paymentEffectiveDate`.`date`) as toDoProperties_person_paymentEffectiveDate_date, 
COALESCE(`_removed`.`toDoProperties`.`person`.`sanitisedFirstName`, `toDoProperties`.`person`.`sanitisedFirstName`) as toDoProperties_person_sanitisedFirstName, 
COALESCE(`_removed`.`toDoProperties`.`person`.`sanitisedLastName`, `toDoProperties`.`person`.`sanitisedLastName`) as toDoProperties_person_sanitisedLastName, 
COALESCE(`_removed`.`toDoProperties`.`person`.`sanitisedMiddleName`, `toDoProperties`.`person`.`sanitisedMiddleName`) as toDoProperties_person_sanitisedMiddleName, 
COALESCE(CAST(`_removed`.`toDoProperties`.`person`.`verifiedUsingBioQuestionsOrThirdParty` as STRING), CAST(`toDoProperties`.`person`.`verifiedUsingBioQuestionsOrThirdParty` as STRING)) as toDoProperties_person_verifiedUsingBioQuestionsOrThirdParty, 
COALESCE(CAST(`_removed`.`toDoProperties`.`person`.`verifiedWithNameDateOfBirthOrAddressChange` as STRING), CAST(`toDoProperties`.`person`.`verifiedWithNameDateOfBirthOrAddressChange` as STRING)) as toDoProperties_person_verifiedWithNameDateOfBirthOrAddressChange, 
COALESCE(`_removed`.`toDoProperties`.`person`.`type`, `toDoProperties`.`person`.`type`) as toDoProperties_person_type, 
COALESCE(CAST(`_removed`.`toDoProperties`.`returnAfterAbsence` as STRING), CAST(`toDoProperties`.`returnAfterAbsence` as STRING)) as toDoProperties_returnAfterAbsence, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_hrt_entitlement_decision
 src_agent_core_agenttodoarchive_agent_todo_archive_hrt_entitlement_decision 
 where `_removed`.`toDoProperties`.`type`='HRT_ENTITLEMENT_DECISION' or `toDoProperties`.`type`='HRT_ENTITLEMENT_DECISION';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_AGENT_GENERATED_TO_DO_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_agent_generated_to_do_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_agent_generated_to_do_properties(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`assessmentPeriodId`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`assessmentPeriodId`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_AGENT_GENERATED_TO_DO_PROPERTIES;

CREATE TABLE agent_todo_archive_agent_generated_to_do_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`assessmentPeriodId`, `toDoProperties`.`assessmentPeriodId`) as toDoProperties_assessmentPeriodId, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_agent_generated_to_do_properties
 src_agent_core_agenttodoarchive_agent_todo_archive_agent_generated_to_do_properties 
 where `_removed`.`toDoProperties`.`type`='AGENT_GENERATED_TO_DO_PROPERTIES' or `toDoProperties`.`type`='AGENT_GENERATED_TO_DO_PROPERTIES';


!echo ------------------------;
!echo ------------------------ journal_ucOpenEndedSanctionAddedJournalEntry;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_journal_journal_ucopenendedsanctionaddedjournalentry
;

CREATE EXTERNAL TABLE src_core_journal_journal_ucopenendedsanctionaddedjournalentry(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`journalEntryProperties` STRUCT<`complianceRequirement`:STRING
,`dateOfFailure`:STRING
,`ended`:BOOLEAN
,`failureType`:STRING
,`remainingDuration`:STRING
,`type`:STRING>
,`_id` STRUCT<`journalId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`journalEntryProperties`:STRUCT<`complianceRequirement`:STRING
,`dateOfFailure`:STRING
,`ended`:BOOLEAN
,`failureType`:STRING
,`remainingDuration`:STRING
,`type`:STRING>
,`_id`:STRUCT<`journalId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/journal';

DROP TABLE IF EXISTS journal_ucOpenEndedSanctionAddedJournalEntry;

CREATE TABLE journal_ucopenendedsanctionaddedjournalentry STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`journalEntryProperties`.`complianceRequirement`, `journalEntryProperties`.`complianceRequirement`) as journalEntryProperties_complianceRequirement, 
COALESCE(`_removed`.`journalEntryProperties`.`dateOfFailure`, `journalEntryProperties`.`dateOfFailure`) as journalEntryProperties_dateOfFailure, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`ended` as STRING), CAST(`journalEntryProperties`.`ended` as STRING)) as journalEntryProperties_ended, 
COALESCE(`_removed`.`journalEntryProperties`.`failureType`, `journalEntryProperties`.`failureType`) as journalEntryProperties_failureType, 
COALESCE(`_removed`.`journalEntryProperties`.`remainingDuration`, `journalEntryProperties`.`remainingDuration`) as journalEntryProperties_remainingDuration, 
COALESCE(`_removed`.`journalEntryProperties`.`type`, `journalEntryProperties`.`type`) as journalEntryProperties_type, 
COALESCE(`_removed`.`_id`.`journalId`, `_id`.`journalId`) as id FROM src_core_journal_journal_ucopenendedsanctionaddedjournalentry
 src_core_journal_journal_ucopenendedsanctionaddedjournalentry 
 where `_removed`.`journalEntryProperties`.`type`='ucOpenEndedSanctionAddedJournalEntry' or `journalEntryProperties`.`type`='ucOpenEndedSanctionAddedJournalEntry';


!echo ------------------------;
!echo ------------------------ agent_todo_WCA_DECISION;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_wca_decision
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_wca_decision(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`message`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`message`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_WCA_DECISION;

CREATE TABLE agent_todo_wca_decision STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`message`, `toDoProperties`.`message`) as toDoProperties_message, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_wca_decision
 src_agent_core_agenttodo_agent_todo_wca_decision 
 where `_removed`.`toDoProperties`.`type`='WCA_DECISION' or `toDoProperties`.`type`='WCA_DECISION';


!echo ------------------------;
!echo ------------------------ journal_WordyJournalEntry;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_journal_journal_wordyjournalentry
;

CREATE EXTERNAL TABLE src_core_journal_journal_wordyjournalentry(
`journalEntryProperties` STRUCT<`paragraphsWithHeadingList`:ARRAY<STRUCT<`paragraphs`:ARRAY<STRUCT<`words`:ARRAY<STRUCT<`args`:ARRAY<STRUCT<`arg`:STRING
>>
,`bold`:BOOLEAN
,`key`:STRING
,`link`:BOOLEAN
,`linkHref`:STRING
>>
,`list`:BOOLEAN
,`notification`:BOOLEAN
>>
,`heading`:STRING
>>
,`title`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`journalId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`journalEntryProperties`:STRUCT<`paragraphsWithHeadingList`:ARRAY<STRUCT<`paragraphs`:ARRAY<STRUCT<`words`:ARRAY<STRUCT<`args`:ARRAY<STRUCT<`arg`:STRING
>>
,`bold`:BOOLEAN
,`key`:STRING
,`link`:BOOLEAN
,`linkHref`:STRING
>>
,`list`:BOOLEAN
,`notification`:BOOLEAN
>>
,`heading`:STRING
>>
,`title`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`journalId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/journal';

DROP TABLE IF EXISTS journal_WordyJournalEntry;

CREATE TABLE journal_wordyjournalentry STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`removed_exploded_journalentryproperties_paragraphswithheadinglist`.`heading`, `exploded_journalentryproperties_paragraphswithheadinglist`.`heading`) as journalEntryProperties_paragraphsWithHeadingList_heading, 
COALESCE(CAST(`removed_exploded_journalentryproperties_paragraphswithheadinglist_exploded_paragraphs`.`list` as STRING), CAST(`exploded_journalentryproperties_paragraphswithheadinglist_exploded_paragraphs`.`list` as STRING)) as journalEntryProperties_paragraphsWithHeadingList_paragraphs_list, 
COALESCE(CAST(`removed_exploded_journalentryproperties_paragraphswithheadinglist_exploded_paragraphs`.`notification` as STRING), CAST(`exploded_journalentryproperties_paragraphswithheadinglist_exploded_paragraphs`.`notification` as STRING)) as journalEntryProperties_paragraphsWithHeadingList_paragraphs_notification, 
COALESCE(`removed_exploded_journalentryproperties_paragraphswithheadinglist_exploded_paragraphs_exploded_words_exploded_args`.`arg`, `exploded_journalentryproperties_paragraphswithheadinglist_exploded_paragraphs_exploded_words_exploded_args`.`arg`) as journalEntryProperties_paragraphsWithHeadingList_paragraphs_words_args_arg, 
COALESCE(CAST(`removed_exploded_journalentryproperties_paragraphswithheadinglist_exploded_paragraphs_exploded_words`.`bold` as STRING), CAST(`exploded_journalentryproperties_paragraphswithheadinglist_exploded_paragraphs_exploded_words`.`bold` as STRING)) as journalEntryProperties_paragraphsWithHeadingList_paragraphs_words_bold, 
COALESCE(`removed_exploded_journalentryproperties_paragraphswithheadinglist_exploded_paragraphs_exploded_words`.`key`, `exploded_journalentryproperties_paragraphswithheadinglist_exploded_paragraphs_exploded_words`.`key`) as journalEntryProperties_paragraphsWithHeadingList_paragraphs_words_key, 
COALESCE(CAST(`removed_exploded_journalentryproperties_paragraphswithheadinglist_exploded_paragraphs_exploded_words`.`link` as STRING), CAST(`exploded_journalentryproperties_paragraphswithheadinglist_exploded_paragraphs_exploded_words`.`link` as STRING)) as journalEntryProperties_paragraphsWithHeadingList_paragraphs_words_link, 
COALESCE(`removed_exploded_journalentryproperties_paragraphswithheadinglist_exploded_paragraphs_exploded_words`.`linkHref`, `exploded_journalentryproperties_paragraphswithheadinglist_exploded_paragraphs_exploded_words`.`linkHref`) as journalEntryProperties_paragraphsWithHeadingList_paragraphs_words_linkHref, 
COALESCE(`_removed`.`journalEntryProperties`.`title`, `journalEntryProperties`.`title`) as journalEntryProperties_title, 
COALESCE(`_removed`.`journalEntryProperties`.`type`, `journalEntryProperties`.`type`) as journalEntryProperties_type, 
COALESCE(`_removed`.`_id`.`journalId`, `_id`.`journalId`) as id FROM src_core_journal_journal_wordyjournalentry
 LATERAL VIEW OUTER EXPLODE(`journalEntryProperties`.`paragraphsWithHeadingList`) view_exploded_journalentryproperties_paragraphswithheadinglist AS exploded_journalentryproperties_paragraphswithheadinglist 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`journalEntryProperties`.`paragraphsWithHeadingList`) view_removed_exploded_journalentryproperties_paragraphswithheadinglist AS removed_exploded_journalentryproperties_paragraphswithheadinglist 
 LATERAL VIEW OUTER EXPLODE(`exploded_journalentryproperties_paragraphswithheadinglist`.`paragraphs`) view_exploded_journalentryproperties_paragraphswithheadinglist_exploded_paragraphs AS exploded_journalentryproperties_paragraphswithheadinglist_exploded_paragraphs 
 LATERAL VIEW OUTER EXPLODE(`removed_exploded_journalentryproperties_paragraphswithheadinglist`.`paragraphs`) view_removed_exploded_journalentryproperties_paragraphswithheadinglist_exploded_paragraphs AS removed_exploded_journalentryproperties_paragraphswithheadinglist_exploded_paragraphs 
 LATERAL VIEW OUTER EXPLODE(`exploded_journalentryproperties_paragraphswithheadinglist_exploded_paragraphs`.`words`) view_exploded_journalentryproperties_paragraphswithheadinglist_exploded_paragraphs_exploded_words AS exploded_journalentryproperties_paragraphswithheadinglist_exploded_paragraphs_exploded_words 
 LATERAL VIEW OUTER EXPLODE(`exploded_journalentryproperties_paragraphswithheadinglist_exploded_paragraphs_exploded_words`.`args`) view_exploded_journalentryproperties_paragraphswithheadinglist_exploded_paragraphs_exploded_words_exploded_args AS exploded_journalentryproperties_paragraphswithheadinglist_exploded_paragraphs_exploded_words_exploded_args 
 LATERAL VIEW OUTER EXPLODE(`removed_exploded_journalentryproperties_paragraphswithheadinglist_exploded_paragraphs`.`words`) view_removed_exploded_journalentryproperties_paragraphswithheadinglist_exploded_paragraphs_exploded_words AS removed_exploded_journalentryproperties_paragraphswithheadinglist_exploded_paragraphs_exploded_words 
 LATERAL VIEW OUTER EXPLODE(`removed_exploded_journalentryproperties_paragraphswithheadinglist_exploded_paragraphs_exploded_words`.`args`) view_removed_exploded_journalentryproperties_paragraphswithheadinglist_exploded_paragraphs_exploded_words_exploded_args AS removed_exploded_journalentryproperties_paragraphswithheadinglist_exploded_paragraphs_exploded_words_exploded_args 
 
 where `_removed`.`journalEntryProperties`.`type`='WordyJournalEntry' or `journalEntryProperties`.`type`='WordyJournalEntry';


!echo ------------------------;
!echo ------------------------ journal_HousingSummaryJournalEntry;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_journal_journal_housingsummaryjournalentry
;

CREATE EXTERNAL TABLE src_core_journal_journal_housingsummaryjournalentry(
`journalEntryProperties` STRUCT<`housingSummary`:STRUCT<`rentalSummary`:STRUCT<`jointTenancySummary`:STRUCT<`totalRent`:STRUCT<`monthlyAmount`:STRING
,`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`totalServiceChargePayment`:STRUCT<`monthlyAmount`:STRING
,`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`numberLivingWith`:STRING>
,`socialRentalSummary`:STRUCT<`serviceChargePayment`:STRUCT<`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`rentFreeWeeks`:STRING>
,`privateRentalSummary`:STRUCT<`financialInterest`:BOOLEAN
,`landlordLivesWithYou`:BOOLEAN
,`landlordRelative`:BOOLEAN>
,`rentalPayment`:STRUCT<`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`tenancyAgreementSummary`:STRUCT<`bothYouAndPartnerNamedOnTenancyOrRentalAgreement`:BOOLEAN
,`jointTenancyWithSomeoneOtherThanPartner`:BOOLEAN>
,`dateMovedToAddress`:STRING
,`landlordName`:STRING
,`numberBedrooms`:STRING>
,`ownHomeSummary`:STRUCT<`mortgageDetailsList`:ARRAY<STRUCT<`amount`:STRING
,`forDisabilityAdaptation`:BOOLEAN
,`lender`:STRING
,`lenderCode`:STRING
,`loanReferenceNumber`:STRING
,`mortgageDetailsId`:STRING
>>
,`serviceChargeDetails`:STRUCT<`amount`:STRING
,`frequency`:STRING>
,`hasMortgage`:BOOLEAN
,`paysServiceCharges`:BOOLEAN>
,`councilTax`:STRUCT<`appliedToCouncilTaxReduction`:STRING
,`councilTaxInClaimantName`:BOOLEAN>
,`dateOfChange`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`noApplicableHousingCostsSummary`:STRUCT<`noApplicableHousingCostsType`:STRING>
,`otherHousingTypeSummary`:STRUCT<`otherAccommodationType`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`councilTaxSummary`:STRUCT<`appliedToCouncilTaxReduction`:STRING
,`councilTaxInClaimantName`:BOOLEAN>
,`contractId`:STRING
,`housingTypeMessagePostfix`:STRING
,`processId`:STRING
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`journalId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`journalEntryProperties`:STRUCT<`housingSummary`:STRUCT<`rentalSummary`:STRUCT<`jointTenancySummary`:STRUCT<`totalRent`:STRUCT<`monthlyAmount`:STRING
,`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`totalServiceChargePayment`:STRUCT<`monthlyAmount`:STRING
,`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`numberLivingWith`:STRING>
,`socialRentalSummary`:STRUCT<`serviceChargePayment`:STRUCT<`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`rentFreeWeeks`:STRING>
,`privateRentalSummary`:STRUCT<`financialInterest`:BOOLEAN
,`landlordLivesWithYou`:BOOLEAN
,`landlordRelative`:BOOLEAN>
,`rentalPayment`:STRUCT<`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`tenancyAgreementSummary`:STRUCT<`bothYouAndPartnerNamedOnTenancyOrRentalAgreement`:BOOLEAN
,`jointTenancyWithSomeoneOtherThanPartner`:BOOLEAN>
,`dateMovedToAddress`:STRING
,`landlordName`:STRING
,`numberBedrooms`:STRING>
,`ownHomeSummary`:STRUCT<`mortgageDetailsList`:ARRAY<STRUCT<`amount`:STRING
,`forDisabilityAdaptation`:BOOLEAN
,`lender`:STRING
,`lenderCode`:STRING
,`loanReferenceNumber`:STRING
,`mortgageDetailsId`:STRING
>>
,`serviceChargeDetails`:STRUCT<`amount`:STRING
,`frequency`:STRING>
,`hasMortgage`:BOOLEAN
,`paysServiceCharges`:BOOLEAN>
,`councilTax`:STRUCT<`appliedToCouncilTaxReduction`:STRING
,`councilTaxInClaimantName`:BOOLEAN>
,`dateOfChange`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`noApplicableHousingCostsSummary`:STRUCT<`noApplicableHousingCostsType`:STRING>
,`otherHousingTypeSummary`:STRUCT<`otherAccommodationType`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`councilTaxSummary`:STRUCT<`appliedToCouncilTaxReduction`:STRING
,`councilTaxInClaimantName`:BOOLEAN>
,`contractId`:STRING
,`housingTypeMessagePostfix`:STRING
,`processId`:STRING
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`journalId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/journal';

DROP TABLE IF EXISTS journal_HousingSummaryJournalEntry;

CREATE TABLE journal_housingsummaryjournalentry STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`journalEntryProperties`.`housingSummary`.`contractId`, `journalEntryProperties`.`housingSummary`.`contractId`) as journalEntryProperties_housingSummary_contractId, 
COALESCE(`_removed`.`journalEntryProperties`.`housingSummary`.`councilTax`.`appliedToCouncilTaxReduction`, `journalEntryProperties`.`housingSummary`.`councilTax`.`appliedToCouncilTaxReduction`) as journalEntryProperties_housingSummary_councilTax_appliedToCouncilTaxReduction, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`housingSummary`.`councilTax`.`councilTaxInClaimantName` as STRING), CAST(`journalEntryProperties`.`housingSummary`.`councilTax`.`councilTaxInClaimantName` as STRING)) as journalEntryProperties_housingSummary_councilTax_councilTaxInClaimantName, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`housingSummary`.`dateOfChange`.`hasDate` as STRING), CAST(`journalEntryProperties`.`housingSummary`.`dateOfChange`.`hasDate` as STRING)) as journalEntryProperties_housingSummary_dateOfChange_hasDate, 
COALESCE(`_removed`.`journalEntryProperties`.`housingSummary`.`dateOfChange`.`knownDate`, `journalEntryProperties`.`housingSummary`.`dateOfChange`.`knownDate`) as journalEntryProperties_housingSummary_dateOfChange_knownDate, 
COALESCE(`_removed`.`journalEntryProperties`.`housingSummary`.`dateOfChange`.`type`, `journalEntryProperties`.`housingSummary`.`dateOfChange`.`type`) as journalEntryProperties_housingSummary_dateOfChange_type, 
COALESCE(`_removed`.`journalEntryProperties`.`housingSummary`.`dateOfChange`.`date`, `journalEntryProperties`.`housingSummary`.`dateOfChange`.`date`) as journalEntryProperties_housingSummary_dateOfChange_date, 
COALESCE(`_removed`.`journalEntryProperties`.`housingSummary`.`housingTypeMessagePostfix`, `journalEntryProperties`.`housingSummary`.`housingTypeMessagePostfix`) as journalEntryProperties_housingSummary_housingTypeMessagePostfix, 
COALESCE(`_removed`.`journalEntryProperties`.`housingSummary`.`noApplicableHousingCostsSummary`.`noApplicableHousingCostsType`, `journalEntryProperties`.`housingSummary`.`noApplicableHousingCostsSummary`.`noApplicableHousingCostsType`) as journalEntryProperties_housingSummary_noApplicableHousingCostsSummary_noApplicableHousingCostsType, 
COALESCE(`_removed`.`journalEntryProperties`.`housingSummary`.`otherHousingTypeSummary`.`otherAccommodationType`, `journalEntryProperties`.`housingSummary`.`otherHousingTypeSummary`.`otherAccommodationType`) as journalEntryProperties_housingSummary_otherHousingTypeSummary_otherAccommodationType, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`housingSummary`.`ownHomeSummary`.`hasMortgage` as STRING), CAST(`journalEntryProperties`.`housingSummary`.`ownHomeSummary`.`hasMortgage` as STRING)) as journalEntryProperties_housingSummary_ownHomeSummary_hasMortgage, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`housingSummary`.`ownHomeSummary`.`paysServiceCharges` as STRING), CAST(`journalEntryProperties`.`housingSummary`.`ownHomeSummary`.`paysServiceCharges` as STRING)) as journalEntryProperties_housingSummary_ownHomeSummary_paysServiceCharges, 
COALESCE(`removed_exploded_journalentryproperties_housingsummary_ownhomesummary_mortgagedetailslist`.`amount`, `exploded_journalentryproperties_housingsummary_ownhomesummary_mortgagedetailslist`.`amount`) as journalEntryProperties_housingSummary_ownHomeSummary_mortgageDetailsList_amount, 
COALESCE(CAST(`removed_exploded_journalentryproperties_housingsummary_ownhomesummary_mortgagedetailslist`.`forDisabilityAdaptation` as STRING), CAST(`exploded_journalentryproperties_housingsummary_ownhomesummary_mortgagedetailslist`.`forDisabilityAdaptation` as STRING)) as journalEntryProperties_housingSummary_ownHomeSummary_mortgageDetailsList_forDisabilityAdaptation, 
COALESCE(`removed_exploded_journalentryproperties_housingsummary_ownhomesummary_mortgagedetailslist`.`lender`, `exploded_journalentryproperties_housingsummary_ownhomesummary_mortgagedetailslist`.`lender`) as journalEntryProperties_housingSummary_ownHomeSummary_mortgageDetailsList_lender, 
COALESCE(`removed_exploded_journalentryproperties_housingsummary_ownhomesummary_mortgagedetailslist`.`lenderCode`, `exploded_journalentryproperties_housingsummary_ownhomesummary_mortgagedetailslist`.`lenderCode`) as journalEntryProperties_housingSummary_ownHomeSummary_mortgageDetailsList_lenderCode, 
COALESCE(`removed_exploded_journalentryproperties_housingsummary_ownhomesummary_mortgagedetailslist`.`loanReferenceNumber`, `exploded_journalentryproperties_housingsummary_ownhomesummary_mortgagedetailslist`.`loanReferenceNumber`) as journalEntryProperties_housingSummary_ownHomeSummary_mortgageDetailsList_loanReferenceNumber, 
COALESCE(`removed_exploded_journalentryproperties_housingsummary_ownhomesummary_mortgagedetailslist`.`mortgageDetailsId`, `exploded_journalentryproperties_housingsummary_ownhomesummary_mortgagedetailslist`.`mortgageDetailsId`) as journalEntryProperties_housingSummary_ownHomeSummary_mortgageDetailsList_mortgageDetailsId, 
COALESCE(`_removed`.`journalEntryProperties`.`housingSummary`.`ownHomeSummary`.`serviceChargeDetails`.`amount`, `journalEntryProperties`.`housingSummary`.`ownHomeSummary`.`serviceChargeDetails`.`amount`) as journalEntryProperties_housingSummary_ownHomeSummary_serviceChargeDetails_amount, 
COALESCE(`_removed`.`journalEntryProperties`.`housingSummary`.`ownHomeSummary`.`serviceChargeDetails`.`frequency`, `journalEntryProperties`.`housingSummary`.`ownHomeSummary`.`serviceChargeDetails`.`frequency`) as journalEntryProperties_housingSummary_ownHomeSummary_serviceChargeDetails_frequency, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`housingSummary`.`paymentEffectiveDate`.`hasDate` as STRING), CAST(`journalEntryProperties`.`housingSummary`.`paymentEffectiveDate`.`hasDate` as STRING)) as journalEntryProperties_housingSummary_paymentEffectiveDate_hasDate, 
COALESCE(`_removed`.`journalEntryProperties`.`housingSummary`.`paymentEffectiveDate`.`knownDate`, `journalEntryProperties`.`housingSummary`.`paymentEffectiveDate`.`knownDate`) as journalEntryProperties_housingSummary_paymentEffectiveDate_knownDate, 
COALESCE(`_removed`.`journalEntryProperties`.`housingSummary`.`paymentEffectiveDate`.`type`, `journalEntryProperties`.`housingSummary`.`paymentEffectiveDate`.`type`) as journalEntryProperties_housingSummary_paymentEffectiveDate_type, 
COALESCE(`_removed`.`journalEntryProperties`.`housingSummary`.`paymentEffectiveDate`.`date`, `journalEntryProperties`.`housingSummary`.`paymentEffectiveDate`.`date`) as journalEntryProperties_housingSummary_paymentEffectiveDate_date, 
COALESCE(`_removed`.`journalEntryProperties`.`housingSummary`.`processId`, `journalEntryProperties`.`housingSummary`.`processId`) as journalEntryProperties_housingSummary_processId, 
COALESCE(`_removed`.`journalEntryProperties`.`housingSummary`.`rentalSummary`.`dateMovedToAddress`, `journalEntryProperties`.`housingSummary`.`rentalSummary`.`dateMovedToAddress`) as journalEntryProperties_housingSummary_rentalSummary_dateMovedToAddress, 
COALESCE(`_removed`.`journalEntryProperties`.`housingSummary`.`rentalSummary`.`jointTenancySummary`.`numberLivingWith`, `journalEntryProperties`.`housingSummary`.`rentalSummary`.`jointTenancySummary`.`numberLivingWith`) as journalEntryProperties_housingSummary_rentalSummary_jointTenancySummary_numberLivingWith, 
COALESCE(`_removed`.`journalEntryProperties`.`housingSummary`.`rentalSummary`.`jointTenancySummary`.`totalRent`.`monthlyAmount`, `journalEntryProperties`.`housingSummary`.`rentalSummary`.`jointTenancySummary`.`totalRent`.`monthlyAmount`) as journalEntryProperties_housingSummary_rentalSummary_jointTenancySummary_totalRent_monthlyAmount, 
COALESCE(`_removed`.`journalEntryProperties`.`housingSummary`.`rentalSummary`.`jointTenancySummary`.`totalRent`.`amount`, `journalEntryProperties`.`housingSummary`.`rentalSummary`.`jointTenancySummary`.`totalRent`.`amount`) as journalEntryProperties_housingSummary_rentalSummary_jointTenancySummary_totalRent_amount, 
COALESCE(`_removed`.`journalEntryProperties`.`housingSummary`.`rentalSummary`.`jointTenancySummary`.`totalRent`.`paymentFrequency`, `journalEntryProperties`.`housingSummary`.`rentalSummary`.`jointTenancySummary`.`totalRent`.`paymentFrequency`) as journalEntryProperties_housingSummary_rentalSummary_jointTenancySummary_totalRent_paymentFrequency, 
COALESCE(`_removed`.`journalEntryProperties`.`housingSummary`.`rentalSummary`.`jointTenancySummary`.`totalRent`.`type`, `journalEntryProperties`.`housingSummary`.`rentalSummary`.`jointTenancySummary`.`totalRent`.`type`) as journalEntryProperties_housingSummary_rentalSummary_jointTenancySummary_totalRent_type, 
COALESCE(`_removed`.`journalEntryProperties`.`housingSummary`.`rentalSummary`.`jointTenancySummary`.`totalServiceChargePayment`.`monthlyAmount`, `journalEntryProperties`.`housingSummary`.`rentalSummary`.`jointTenancySummary`.`totalServiceChargePayment`.`monthlyAmount`) as journalEntryProperties_housingSummary_rentalSummary_jointTenancySummary_totalServiceChargePayment_monthlyAmount, 
COALESCE(`_removed`.`journalEntryProperties`.`housingSummary`.`rentalSummary`.`jointTenancySummary`.`totalServiceChargePayment`.`amount`, `journalEntryProperties`.`housingSummary`.`rentalSummary`.`jointTenancySummary`.`totalServiceChargePayment`.`amount`) as journalEntryProperties_housingSummary_rentalSummary_jointTenancySummary_totalServiceChargePayment_amount, 
COALESCE(`_removed`.`journalEntryProperties`.`housingSummary`.`rentalSummary`.`jointTenancySummary`.`totalServiceChargePayment`.`paymentFrequency`, `journalEntryProperties`.`housingSummary`.`rentalSummary`.`jointTenancySummary`.`totalServiceChargePayment`.`paymentFrequency`) as journalEntryProperties_housingSummary_rentalSummary_jointTenancySummary_totalServiceChargePayment_paymentFrequency, 
COALESCE(`_removed`.`journalEntryProperties`.`housingSummary`.`rentalSummary`.`jointTenancySummary`.`totalServiceChargePayment`.`type`, `journalEntryProperties`.`housingSummary`.`rentalSummary`.`jointTenancySummary`.`totalServiceChargePayment`.`type`) as journalEntryProperties_housingSummary_rentalSummary_jointTenancySummary_totalServiceChargePayment_type, 
COALESCE(`_removed`.`journalEntryProperties`.`housingSummary`.`rentalSummary`.`landlordName`, `journalEntryProperties`.`housingSummary`.`rentalSummary`.`landlordName`) as journalEntryProperties_housingSummary_rentalSummary_landlordName, 
COALESCE(`_removed`.`journalEntryProperties`.`housingSummary`.`rentalSummary`.`numberBedrooms`, `journalEntryProperties`.`housingSummary`.`rentalSummary`.`numberBedrooms`) as journalEntryProperties_housingSummary_rentalSummary_numberBedrooms, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`housingSummary`.`rentalSummary`.`privateRentalSummary`.`financialInterest` as STRING), CAST(`journalEntryProperties`.`housingSummary`.`rentalSummary`.`privateRentalSummary`.`financialInterest` as STRING)) as journalEntryProperties_housingSummary_rentalSummary_privateRentalSummary_financialInterest, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`housingSummary`.`rentalSummary`.`privateRentalSummary`.`landlordLivesWithYou` as STRING), CAST(`journalEntryProperties`.`housingSummary`.`rentalSummary`.`privateRentalSummary`.`landlordLivesWithYou` as STRING)) as journalEntryProperties_housingSummary_rentalSummary_privateRentalSummary_landlordLivesWithYou, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`housingSummary`.`rentalSummary`.`privateRentalSummary`.`landlordRelative` as STRING), CAST(`journalEntryProperties`.`housingSummary`.`rentalSummary`.`privateRentalSummary`.`landlordRelative` as STRING)) as journalEntryProperties_housingSummary_rentalSummary_privateRentalSummary_landlordRelative, 
COALESCE(`_removed`.`journalEntryProperties`.`housingSummary`.`rentalSummary`.`rentalPayment`.`amount`, `journalEntryProperties`.`housingSummary`.`rentalSummary`.`rentalPayment`.`amount`) as journalEntryProperties_housingSummary_rentalSummary_rentalPayment_amount, 
COALESCE(`_removed`.`journalEntryProperties`.`housingSummary`.`rentalSummary`.`rentalPayment`.`paymentFrequency`, `journalEntryProperties`.`housingSummary`.`rentalSummary`.`rentalPayment`.`paymentFrequency`) as journalEntryProperties_housingSummary_rentalSummary_rentalPayment_paymentFrequency, 
COALESCE(`_removed`.`journalEntryProperties`.`housingSummary`.`rentalSummary`.`rentalPayment`.`type`, `journalEntryProperties`.`housingSummary`.`rentalSummary`.`rentalPayment`.`type`) as journalEntryProperties_housingSummary_rentalSummary_rentalPayment_type, 
COALESCE(`_removed`.`journalEntryProperties`.`housingSummary`.`rentalSummary`.`socialRentalSummary`.`rentFreeWeeks`, `journalEntryProperties`.`housingSummary`.`rentalSummary`.`socialRentalSummary`.`rentFreeWeeks`) as journalEntryProperties_housingSummary_rentalSummary_socialRentalSummary_rentFreeWeeks, 
COALESCE(`_removed`.`journalEntryProperties`.`housingSummary`.`rentalSummary`.`socialRentalSummary`.`serviceChargePayment`.`amount`, `journalEntryProperties`.`housingSummary`.`rentalSummary`.`socialRentalSummary`.`serviceChargePayment`.`amount`) as journalEntryProperties_housingSummary_rentalSummary_socialRentalSummary_serviceChargePayment_amount, 
COALESCE(`_removed`.`journalEntryProperties`.`housingSummary`.`rentalSummary`.`socialRentalSummary`.`serviceChargePayment`.`paymentFrequency`, `journalEntryProperties`.`housingSummary`.`rentalSummary`.`socialRentalSummary`.`serviceChargePayment`.`paymentFrequency`) as journalEntryProperties_housingSummary_rentalSummary_socialRentalSummary_serviceChargePayment_paymentFrequency, 
COALESCE(`_removed`.`journalEntryProperties`.`housingSummary`.`rentalSummary`.`socialRentalSummary`.`serviceChargePayment`.`type`, `journalEntryProperties`.`housingSummary`.`rentalSummary`.`socialRentalSummary`.`serviceChargePayment`.`type`) as journalEntryProperties_housingSummary_rentalSummary_socialRentalSummary_serviceChargePayment_type, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`housingSummary`.`rentalSummary`.`tenancyAgreementSummary`.`bothYouAndPartnerNamedOnTenancyOrRentalAgreement` as STRING), CAST(`journalEntryProperties`.`housingSummary`.`rentalSummary`.`tenancyAgreementSummary`.`bothYouAndPartnerNamedOnTenancyOrRentalAgreement` as STRING)) as journalEntryProperties_housingSummary_rentalSummary_tenancyAgreementSummary_bothYouAndPartnerNamedOnTenancyOrRentalAgreement, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`housingSummary`.`rentalSummary`.`tenancyAgreementSummary`.`jointTenancyWithSomeoneOtherThanPartner` as STRING), CAST(`journalEntryProperties`.`housingSummary`.`rentalSummary`.`tenancyAgreementSummary`.`jointTenancyWithSomeoneOtherThanPartner` as STRING)) as journalEntryProperties_housingSummary_rentalSummary_tenancyAgreementSummary_jointTenancyWithSomeoneOtherThanPartner, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`housingSummary`.`confirmationRequired` as STRING), CAST(`journalEntryProperties`.`housingSummary`.`confirmationRequired` as STRING)) as journalEntryProperties_housingSummary_confirmationRequired, 
COALESCE(`_removed`.`journalEntryProperties`.`housingSummary`.`councilTaxSummary`.`appliedToCouncilTaxReduction`, `journalEntryProperties`.`housingSummary`.`councilTaxSummary`.`appliedToCouncilTaxReduction`) as journalEntryProperties_housingSummary_councilTaxSummary_appliedToCouncilTaxReduction, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`housingSummary`.`councilTaxSummary`.`councilTaxInClaimantName` as STRING), CAST(`journalEntryProperties`.`housingSummary`.`councilTaxSummary`.`councilTaxInClaimantName` as STRING)) as journalEntryProperties_housingSummary_councilTaxSummary_councilTaxInClaimantName, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`housingSummary`.`hideDetailsForPartnerDeclaration` as STRING), CAST(`journalEntryProperties`.`housingSummary`.`hideDetailsForPartnerDeclaration` as STRING)) as journalEntryProperties_housingSummary_hideDetailsForPartnerDeclaration, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`housingSummary`.`perClaimant` as STRING), CAST(`journalEntryProperties`.`housingSummary`.`perClaimant` as STRING)) as journalEntryProperties_housingSummary_perClaimant, 
COALESCE(`_removed`.`journalEntryProperties`.`housingSummary`.`type`, `journalEntryProperties`.`housingSummary`.`type`) as journalEntryProperties_housingSummary_type, 
COALESCE(`_removed`.`journalEntryProperties`.`type`, `journalEntryProperties`.`type`) as journalEntryProperties_type, 
COALESCE(`_removed`.`_id`.`journalId`, `_id`.`journalId`) as id FROM src_core_journal_journal_housingsummaryjournalentry
 LATERAL VIEW OUTER EXPLODE(`journalEntryProperties`.`housingSummary`.`ownHomeSummary`.`mortgageDetailsList`) view_exploded_journalentryproperties_housingsummary_ownhomesummary_mortgagedetailslist AS exploded_journalentryproperties_housingsummary_ownhomesummary_mortgagedetailslist 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`journalEntryProperties`.`housingSummary`.`ownHomeSummary`.`mortgageDetailsList`) view_removed_exploded_journalentryproperties_housingsummary_ownhomesummary_mortgagedetailslist AS removed_exploded_journalentryproperties_housingsummary_ownhomesummary_mortgagedetailslist 
 
 where `_removed`.`journalEntryProperties`.`type`='HousingSummaryJournalEntry' or `journalEntryProperties`.`type`='HousingSummaryJournalEntry';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_ASSESSMENT_PERIOD;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_assessment_period
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_assessment_period(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`assessmentPeriodId`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`assessmentPeriodId`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_ASSESSMENT_PERIOD;

CREATE TABLE agent_todo_archive_assessment_period STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`assessmentPeriodId`, `toDoProperties`.`assessmentPeriodId`) as toDoProperties_assessmentPeriodId, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_assessment_period
 src_agent_core_agenttodoarchive_agent_todo_archive_assessment_period 
 where `_removed`.`toDoProperties`.`type`='ASSESSMENT_PERIOD' or `toDoProperties`.`type`='ASSESSMENT_PERIOD';


!echo ------------------------;
!echo ------------------------ journal_ucSanctionRemovedJournalEntry;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_journal_journal_ucsanctionremovedjournalentry
;

CREATE EXTERNAL TABLE src_core_journal_journal_ucsanctionremovedjournalentry(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`journalEntryProperties` STRUCT<`dateOfFailure`:STRING
,`failureType`:STRING
,`type`:STRING>
,`_id` STRUCT<`journalId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`journalEntryProperties`:STRUCT<`dateOfFailure`:STRING
,`failureType`:STRING
,`type`:STRING>
,`_id`:STRUCT<`journalId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/journal';

DROP TABLE IF EXISTS journal_ucSanctionRemovedJournalEntry;

CREATE TABLE journal_ucsanctionremovedjournalentry STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`journalEntryProperties`.`dateOfFailure`, `journalEntryProperties`.`dateOfFailure`) as journalEntryProperties_dateOfFailure, 
COALESCE(`_removed`.`journalEntryProperties`.`failureType`, `journalEntryProperties`.`failureType`) as journalEntryProperties_failureType, 
COALESCE(`_removed`.`journalEntryProperties`.`type`, `journalEntryProperties`.`type`) as journalEntryProperties_type, 
COALESCE(`_removed`.`_id`.`journalId`, `_id`.`journalId`) as id FROM src_core_journal_journal_ucsanctionremovedjournalentry
 src_core_journal_journal_ucsanctionremovedjournalentry 
 where `_removed`.`journalEntryProperties`.`type`='ucSanctionRemovedJournalEntry' or `journalEntryProperties`.`type`='ucSanctionRemovedJournalEntry';


!echo ------------------------;
!echo ------------------------ agent_todo_CHECK_PERSONAL_DETAILS;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_check_personal_details
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_check_personal_details(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`addressMismatch`:BOOLEAN
,`dateOfBirthMismatch`:BOOLEAN
,`dobStatusMistmatch`:BOOLEAN
,`firstNameMismatch`:BOOLEAN
,`lastNameMismatch`:BOOLEAN
,`middleNameMismatch`:BOOLEAN
,`phoneNumberMismatch`:BOOLEAN
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`addressMismatch`:BOOLEAN
,`dateOfBirthMismatch`:BOOLEAN
,`dobStatusMistmatch`:BOOLEAN
,`firstNameMismatch`:BOOLEAN
,`lastNameMismatch`:BOOLEAN
,`middleNameMismatch`:BOOLEAN
,`phoneNumberMismatch`:BOOLEAN
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_CHECK_PERSONAL_DETAILS;

CREATE TABLE agent_todo_check_personal_details STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(CAST(`_removed`.`toDoProperties`.`addressMismatch` as STRING), CAST(`toDoProperties`.`addressMismatch` as STRING)) as toDoProperties_addressMismatch, 
COALESCE(CAST(`_removed`.`toDoProperties`.`dateOfBirthMismatch` as STRING), CAST(`toDoProperties`.`dateOfBirthMismatch` as STRING)) as toDoProperties_dateOfBirthMismatch, 
COALESCE(CAST(`_removed`.`toDoProperties`.`dobStatusMistmatch` as STRING), CAST(`toDoProperties`.`dobStatusMistmatch` as STRING)) as toDoProperties_dobStatusMistmatch, 
COALESCE(CAST(`_removed`.`toDoProperties`.`firstNameMismatch` as STRING), CAST(`toDoProperties`.`firstNameMismatch` as STRING)) as toDoProperties_firstNameMismatch, 
COALESCE(CAST(`_removed`.`toDoProperties`.`lastNameMismatch` as STRING), CAST(`toDoProperties`.`lastNameMismatch` as STRING)) as toDoProperties_lastNameMismatch, 
COALESCE(CAST(`_removed`.`toDoProperties`.`middleNameMismatch` as STRING), CAST(`toDoProperties`.`middleNameMismatch` as STRING)) as toDoProperties_middleNameMismatch, 
COALESCE(CAST(`_removed`.`toDoProperties`.`phoneNumberMismatch` as STRING), CAST(`toDoProperties`.`phoneNumberMismatch` as STRING)) as toDoProperties_phoneNumberMismatch, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_check_personal_details
 src_agent_core_agenttodo_agent_todo_check_personal_details 
 where `_removed`.`toDoProperties`.`type`='CHECK_PERSONAL_DETAILS' or `toDoProperties`.`type`='CHECK_PERSONAL_DETAILS';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_VERIFY_SOCIAL_HOUSING_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_verify_social_housing_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_verify_social_housing_properties(
`toDoProperties` STRUCT<`agreeAndUpdateChangesProcessContext`:STRUCT<`updatedHousingSummary`:STRUCT<`rentalSummary`:STRUCT<`jointTenancySummary`:STRUCT<`totalRent`:STRUCT<`monthlyAmount`:STRING
,`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`totalServiceChargePayment`:STRUCT<`monthlyAmount`:STRING
,`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`numberLivingWith`:STRING>
,`socialRentalSummary`:STRUCT<`serviceChargePayment`:STRUCT<`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`rentFreeWeeks`:STRING>
,`privateRentalSummary`:STRUCT<`financialInterest`:BOOLEAN
,`landlordLivesWithYou`:BOOLEAN
,`landlordRelative`:BOOLEAN>
,`rentalPayment`:STRUCT<`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`tenancyAgreementSummary`:STRUCT<`bothYouAndPartnerNamedOnTenancyOrRentalAgreement`:BOOLEAN
,`jointTenancyWithSomeoneOtherThanPartner`:BOOLEAN>
,`dateMovedToAddress`:STRING
,`landlordName`:STRING
,`numberBedrooms`:STRING>
,`ownHomeSummary`:STRUCT<`mortgageDetailsList`:ARRAY<STRUCT<`amount`:STRING
,`forDisabilityAdaptation`:BOOLEAN
,`lender`:STRING
,`lenderCode`:STRING
,`loanReferenceNumber`:STRING
,`mortgageDetailsId`:STRING
>>
,`serviceChargeDetails`:STRUCT<`amount`:STRING
,`frequency`:STRING>
,`hasMortgage`:BOOLEAN
,`paysServiceCharges`:BOOLEAN>
,`councilTax`:STRUCT<`appliedToCouncilTaxReduction`:STRING
,`councilTaxInClaimantName`:BOOLEAN>
,`dateOfChange`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`noApplicableHousingCostsSummary`:STRUCT<`noApplicableHousingCostsType`:STRING>
,`otherHousingTypeSummary`:STRUCT<`otherAccommodationType`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`councilTaxSummary`:STRUCT<`appliedToCouncilTaxReduction`:STRING
,`councilTaxInClaimantName`:BOOLEAN>
,`contractId`:STRING
,`housingTypeMessagePostfix`:STRING
,`processId`:STRING
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`differencesSummary`:STRUCT<`originalDeclarationSummary`:STRUCT<`rent`:STRUCT<`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`serviceCharges`:STRUCT<`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`bothNamedOnTheTenancyAgreement`:BOOLEAN
,`jointTenancy`:BOOLEAN
,`numberOfBedrooms`:STRING
,`numberOfPeopleInJointTenancy`:STRING
,`rentFreeWeeks`:STRING
,`temporaryAccommodation`:BOOLEAN>
,`updatedDeclarationSummary`:STRUCT<`rent`:STRUCT<`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`serviceCharges`:STRUCT<`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`bothNamedOnTheTenancyAgreement`:BOOLEAN
,`jointTenancy`:BOOLEAN
,`numberOfBedrooms`:STRING
,`numberOfPeopleInJointTenancy`:STRING
,`rentFreeWeeks`:STRING
,`temporaryAccommodation`:BOOLEAN>
,`numberOfBedroomsUpdated`:BOOLEAN
,`rentFreeWeeksUpdated`:BOOLEAN
,`rentUpdated`:BOOLEAN
,`serviceChargesUpdated`:BOOLEAN
,`anyChanges`:BOOLEAN
,`bothNamedOnTheTenancyAgreementUpdated`:BOOLEAN
,`jointTenancyUpdated`:BOOLEAN
,`nowTemporaryAccommodation`:BOOLEAN
,`numberOfPeopleInJointTenancyUpdated`:BOOLEAN
,`temporaryAccommodationUpdated`:BOOLEAN>
,`history`:ARRAY<STRUCT<`eventTime`:STRUCT<`d_date`:STRING>
,`processState`:STRING
>>
,`lastEvent`:STRUCT<`eventTime`:STRUCT<`d_date`:STRING>
,`processState`:STRING>
,`agreeAndUpdateChangesToDoId`:STRING
,`contactLandlordToUpdateChangesToDoId`:STRING
,`currentState`:STRING>
,`thirdPartyPortalProcessContext`:STRUCT<`tenancyDetailsResponse`:STRUCT<`tenancyDetailsDeclaration`:STRUCT<`tenancyDetails`:STRUCT<`eligibleServiceCharges`:STRUCT<`amount`:STRING
,`paymentFrequency`:STRING>
,`ineligibleServiceCharges`:STRUCT<`amount`:STRING
,`paymentFrequency`:STRING>
,`rent`:STRUCT<`amount`:STRING
,`paymentFrequency`:STRING>
,`bothClaimantsOnTenancy`:BOOLEAN
,`effectiveAtDate`:STRING
,`jointTenancy`:BOOLEAN
,`numberOfBedrooms`:STRING
,`numberOfJointTenants`:STRING
,`numberOfRentFreeWeeks`:STRING
,`rentReference`:STRING
,`temporaryAccommodation`:BOOLEAN>
,`declaredDateTime`:STRUCT<`d_date`:STRING>
,`aTenant`:BOOLEAN
,`declaredByUserEmail`:STRING
,`declaredByUserId`:STRING
,`declaredByUserName`:STRING
,`notATenantButAcceptingOtherCharges`:BOOLEAN
,`notATenantDetails`:STRING
,`thirdPartyId`:STRING>
,`requestId`:STRING
,`tenancyAgreementId`:STRING
,`thirdPartyId`:STRING>
,`history`:ARRAY<STRUCT<`eventTime`:STRUCT<`d_date`:STRING>
,`processState`:STRING
>>
,`lastEvent`:STRUCT<`eventTime`:STRUCT<`d_date`:STRING>
,`processState`:STRING>
,`provideTenancyDetailsRequestId`:STRING
,`thirdPartyCreditorId`:STRING
,`thirdPartyName`:STRING
,`currentState`:STRING>
,`dateOfSummaryChange`:STRUCT<`d_date`:STRING>
,`apaOrRentDeductionAppliedFor`:BOOLEAN
,`costsOnlyVerification`:BOOLEAN
,`declarationId`:STRING
,`processId`:STRING
,`summaryUpdatedBy`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`agreeAndUpdateChangesProcessContext`:STRUCT<`updatedHousingSummary`:STRUCT<`rentalSummary`:STRUCT<`jointTenancySummary`:STRUCT<`totalRent`:STRUCT<`monthlyAmount`:STRING
,`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`totalServiceChargePayment`:STRUCT<`monthlyAmount`:STRING
,`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`numberLivingWith`:STRING>
,`socialRentalSummary`:STRUCT<`serviceChargePayment`:STRUCT<`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`rentFreeWeeks`:STRING>
,`privateRentalSummary`:STRUCT<`financialInterest`:BOOLEAN
,`landlordLivesWithYou`:BOOLEAN
,`landlordRelative`:BOOLEAN>
,`rentalPayment`:STRUCT<`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`tenancyAgreementSummary`:STRUCT<`bothYouAndPartnerNamedOnTenancyOrRentalAgreement`:BOOLEAN
,`jointTenancyWithSomeoneOtherThanPartner`:BOOLEAN>
,`dateMovedToAddress`:STRING
,`landlordName`:STRING
,`numberBedrooms`:STRING>
,`ownHomeSummary`:STRUCT<`mortgageDetailsList`:ARRAY<STRUCT<`amount`:STRING
,`forDisabilityAdaptation`:BOOLEAN
,`lender`:STRING
,`lenderCode`:STRING
,`loanReferenceNumber`:STRING
,`mortgageDetailsId`:STRING
>>
,`serviceChargeDetails`:STRUCT<`amount`:STRING
,`frequency`:STRING>
,`hasMortgage`:BOOLEAN
,`paysServiceCharges`:BOOLEAN>
,`councilTax`:STRUCT<`appliedToCouncilTaxReduction`:STRING
,`councilTaxInClaimantName`:BOOLEAN>
,`dateOfChange`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`noApplicableHousingCostsSummary`:STRUCT<`noApplicableHousingCostsType`:STRING>
,`otherHousingTypeSummary`:STRUCT<`otherAccommodationType`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`councilTaxSummary`:STRUCT<`appliedToCouncilTaxReduction`:STRING
,`councilTaxInClaimantName`:BOOLEAN>
,`contractId`:STRING
,`housingTypeMessagePostfix`:STRING
,`processId`:STRING
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`differencesSummary`:STRUCT<`originalDeclarationSummary`:STRUCT<`rent`:STRUCT<`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`serviceCharges`:STRUCT<`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`bothNamedOnTheTenancyAgreement`:BOOLEAN
,`jointTenancy`:BOOLEAN
,`numberOfBedrooms`:STRING
,`numberOfPeopleInJointTenancy`:STRING
,`rentFreeWeeks`:STRING
,`temporaryAccommodation`:BOOLEAN>
,`updatedDeclarationSummary`:STRUCT<`rent`:STRUCT<`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`serviceCharges`:STRUCT<`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`bothNamedOnTheTenancyAgreement`:BOOLEAN
,`jointTenancy`:BOOLEAN
,`numberOfBedrooms`:STRING
,`numberOfPeopleInJointTenancy`:STRING
,`rentFreeWeeks`:STRING
,`temporaryAccommodation`:BOOLEAN>
,`numberOfBedroomsUpdated`:BOOLEAN
,`rentFreeWeeksUpdated`:BOOLEAN
,`rentUpdated`:BOOLEAN
,`serviceChargesUpdated`:BOOLEAN
,`anyChanges`:BOOLEAN
,`bothNamedOnTheTenancyAgreementUpdated`:BOOLEAN
,`jointTenancyUpdated`:BOOLEAN
,`nowTemporaryAccommodation`:BOOLEAN
,`numberOfPeopleInJointTenancyUpdated`:BOOLEAN
,`temporaryAccommodationUpdated`:BOOLEAN>
,`history`:ARRAY<STRUCT<`eventTime`:STRUCT<`d_date`:STRING>
,`processState`:STRING
>>
,`lastEvent`:STRUCT<`eventTime`:STRUCT<`d_date`:STRING>
,`processState`:STRING>
,`agreeAndUpdateChangesToDoId`:STRING
,`contactLandlordToUpdateChangesToDoId`:STRING
,`currentState`:STRING>
,`thirdPartyPortalProcessContext`:STRUCT<`tenancyDetailsResponse`:STRUCT<`tenancyDetailsDeclaration`:STRUCT<`tenancyDetails`:STRUCT<`eligibleServiceCharges`:STRUCT<`amount`:STRING
,`paymentFrequency`:STRING>
,`ineligibleServiceCharges`:STRUCT<`amount`:STRING
,`paymentFrequency`:STRING>
,`rent`:STRUCT<`amount`:STRING
,`paymentFrequency`:STRING>
,`bothClaimantsOnTenancy`:BOOLEAN
,`effectiveAtDate`:STRING
,`jointTenancy`:BOOLEAN
,`numberOfBedrooms`:STRING
,`numberOfJointTenants`:STRING
,`numberOfRentFreeWeeks`:STRING
,`rentReference`:STRING
,`temporaryAccommodation`:BOOLEAN>
,`declaredDateTime`:STRUCT<`d_date`:STRING>
,`aTenant`:BOOLEAN
,`declaredByUserEmail`:STRING
,`declaredByUserId`:STRING
,`declaredByUserName`:STRING
,`notATenantButAcceptingOtherCharges`:BOOLEAN
,`notATenantDetails`:STRING
,`thirdPartyId`:STRING>
,`requestId`:STRING
,`tenancyAgreementId`:STRING
,`thirdPartyId`:STRING>
,`history`:ARRAY<STRUCT<`eventTime`:STRUCT<`d_date`:STRING>
,`processState`:STRING
>>
,`lastEvent`:STRUCT<`eventTime`:STRUCT<`d_date`:STRING>
,`processState`:STRING>
,`provideTenancyDetailsRequestId`:STRING
,`thirdPartyCreditorId`:STRING
,`thirdPartyName`:STRING
,`currentState`:STRING>
,`dateOfSummaryChange`:STRUCT<`d_date`:STRING>
,`apaOrRentDeductionAppliedFor`:BOOLEAN
,`costsOnlyVerification`:BOOLEAN
,`declarationId`:STRING
,`processId`:STRING
,`summaryUpdatedBy`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_VERIFY_SOCIAL_HOUSING_PROPERTIES;

CREATE TABLE agent_todo_archive_verify_social_housing_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`agreeAndUpdateChangesToDoId`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`agreeAndUpdateChangesToDoId`) as toDoProperties_agreeAndUpdateChangesProcessContext_agreeAndUpdateChangesToDoId, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`contactLandlordToUpdateChangesToDoId`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`contactLandlordToUpdateChangesToDoId`) as toDoProperties_agreeAndUpdateChangesProcessContext_contactLandlordToUpdateChangesToDoId, 
COALESCE(CAST(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`numberOfBedroomsUpdated` as STRING), CAST(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`numberOfBedroomsUpdated` as STRING)) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_numberOfBedroomsUpdated, 
COALESCE(CAST(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`originalDeclarationSummary`.`bothNamedOnTheTenancyAgreement` as STRING), CAST(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`originalDeclarationSummary`.`bothNamedOnTheTenancyAgreement` as STRING)) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_originalDeclarationSummary_bothNamedOnTheTenancyAgreement, 
COALESCE(CAST(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`originalDeclarationSummary`.`jointTenancy` as STRING), CAST(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`originalDeclarationSummary`.`jointTenancy` as STRING)) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_originalDeclarationSummary_jointTenancy, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`originalDeclarationSummary`.`numberOfBedrooms`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`originalDeclarationSummary`.`numberOfBedrooms`) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_originalDeclarationSummary_numberOfBedrooms, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`originalDeclarationSummary`.`numberOfPeopleInJointTenancy`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`originalDeclarationSummary`.`numberOfPeopleInJointTenancy`) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_originalDeclarationSummary_numberOfPeopleInJointTenancy, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`originalDeclarationSummary`.`rent`.`amount`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`originalDeclarationSummary`.`rent`.`amount`) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_originalDeclarationSummary_rent_amount, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`originalDeclarationSummary`.`rent`.`paymentFrequency`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`originalDeclarationSummary`.`rent`.`paymentFrequency`) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_originalDeclarationSummary_rent_paymentFrequency, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`originalDeclarationSummary`.`rent`.`type`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`originalDeclarationSummary`.`rent`.`type`) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_originalDeclarationSummary_rent_type, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`originalDeclarationSummary`.`rentFreeWeeks`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`originalDeclarationSummary`.`rentFreeWeeks`) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_originalDeclarationSummary_rentFreeWeeks, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`originalDeclarationSummary`.`serviceCharges`.`amount`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`originalDeclarationSummary`.`serviceCharges`.`amount`) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_originalDeclarationSummary_serviceCharges_amount, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`originalDeclarationSummary`.`serviceCharges`.`paymentFrequency`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`originalDeclarationSummary`.`serviceCharges`.`paymentFrequency`) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_originalDeclarationSummary_serviceCharges_paymentFrequency, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`originalDeclarationSummary`.`serviceCharges`.`type`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`originalDeclarationSummary`.`serviceCharges`.`type`) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_originalDeclarationSummary_serviceCharges_type, 
COALESCE(CAST(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`originalDeclarationSummary`.`temporaryAccommodation` as STRING), CAST(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`originalDeclarationSummary`.`temporaryAccommodation` as STRING)) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_originalDeclarationSummary_temporaryAccommodation, 
COALESCE(CAST(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`rentFreeWeeksUpdated` as STRING), CAST(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`rentFreeWeeksUpdated` as STRING)) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_rentFreeWeeksUpdated, 
COALESCE(CAST(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`rentUpdated` as STRING), CAST(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`rentUpdated` as STRING)) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_rentUpdated, 
COALESCE(CAST(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`serviceChargesUpdated` as STRING), CAST(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`serviceChargesUpdated` as STRING)) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_serviceChargesUpdated, 
COALESCE(CAST(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`updatedDeclarationSummary`.`bothNamedOnTheTenancyAgreement` as STRING), CAST(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`updatedDeclarationSummary`.`bothNamedOnTheTenancyAgreement` as STRING)) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_updatedDeclarationSummary_bothNamedOnTheTenancyAgreement, 
COALESCE(CAST(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`updatedDeclarationSummary`.`jointTenancy` as STRING), CAST(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`updatedDeclarationSummary`.`jointTenancy` as STRING)) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_updatedDeclarationSummary_jointTenancy, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`updatedDeclarationSummary`.`numberOfBedrooms`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`updatedDeclarationSummary`.`numberOfBedrooms`) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_updatedDeclarationSummary_numberOfBedrooms, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`updatedDeclarationSummary`.`numberOfPeopleInJointTenancy`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`updatedDeclarationSummary`.`numberOfPeopleInJointTenancy`) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_updatedDeclarationSummary_numberOfPeopleInJointTenancy, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`updatedDeclarationSummary`.`rent`.`amount`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`updatedDeclarationSummary`.`rent`.`amount`) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_updatedDeclarationSummary_rent_amount, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`updatedDeclarationSummary`.`rent`.`paymentFrequency`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`updatedDeclarationSummary`.`rent`.`paymentFrequency`) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_updatedDeclarationSummary_rent_paymentFrequency, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`updatedDeclarationSummary`.`rent`.`type`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`updatedDeclarationSummary`.`rent`.`type`) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_updatedDeclarationSummary_rent_type, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`updatedDeclarationSummary`.`rentFreeWeeks`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`updatedDeclarationSummary`.`rentFreeWeeks`) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_updatedDeclarationSummary_rentFreeWeeks, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`updatedDeclarationSummary`.`serviceCharges`.`amount`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`updatedDeclarationSummary`.`serviceCharges`.`amount`) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_updatedDeclarationSummary_serviceCharges_amount, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`updatedDeclarationSummary`.`serviceCharges`.`paymentFrequency`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`updatedDeclarationSummary`.`serviceCharges`.`paymentFrequency`) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_updatedDeclarationSummary_serviceCharges_paymentFrequency, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`updatedDeclarationSummary`.`serviceCharges`.`type`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`updatedDeclarationSummary`.`serviceCharges`.`type`) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_updatedDeclarationSummary_serviceCharges_type, 
COALESCE(CAST(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`updatedDeclarationSummary`.`temporaryAccommodation` as STRING), CAST(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`updatedDeclarationSummary`.`temporaryAccommodation` as STRING)) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_updatedDeclarationSummary_temporaryAccommodation, 
COALESCE(CAST(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`anyChanges` as STRING), CAST(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`anyChanges` as STRING)) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_anyChanges, 
COALESCE(CAST(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`bothNamedOnTheTenancyAgreementUpdated` as STRING), CAST(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`bothNamedOnTheTenancyAgreementUpdated` as STRING)) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_bothNamedOnTheTenancyAgreementUpdated, 
COALESCE(CAST(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`jointTenancyUpdated` as STRING), CAST(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`jointTenancyUpdated` as STRING)) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_jointTenancyUpdated, 
COALESCE(CAST(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`nowTemporaryAccommodation` as STRING), CAST(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`nowTemporaryAccommodation` as STRING)) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_nowTemporaryAccommodation, 
COALESCE(CAST(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`numberOfPeopleInJointTenancyUpdated` as STRING), CAST(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`numberOfPeopleInJointTenancyUpdated` as STRING)) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_numberOfPeopleInJointTenancyUpdated, 
COALESCE(CAST(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`temporaryAccommodationUpdated` as STRING), CAST(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`temporaryAccommodationUpdated` as STRING)) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_temporaryAccommodationUpdated, 
COALESCE(CASE WHEN SUBSTRING(`removed_exploded_todoproperties_agreeandupdatechangesprocesscontext_history`.`eventTime`.`d_date`, LENGTH(`removed_exploded_todoproperties_agreeandupdatechangesprocesscontext_history`.`eventTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`removed_exploded_todoproperties_agreeandupdatechangesprocesscontext_history`.`eventTime`.`d_date`, 1, 10), ' ', SUBSTR(`removed_exploded_todoproperties_agreeandupdatechangesprocesscontext_history`.`eventTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`removed_exploded_todoproperties_agreeandupdatechangesprocesscontext_history`.`eventTime`.`d_date`, 1, 10), ' ', SUBSTR(`removed_exploded_todoproperties_agreeandupdatechangesprocesscontext_history`.`eventTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`removed_exploded_todoproperties_agreeandupdatechangesprocesscontext_history`.`eventTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`removed_exploded_todoproperties_agreeandupdatechangesprocesscontext_history`.`eventTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`exploded_todoproperties_agreeandupdatechangesprocesscontext_history`.`eventTime`.`d_date`, LENGTH(`exploded_todoproperties_agreeandupdatechangesprocesscontext_history`.`eventTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`exploded_todoproperties_agreeandupdatechangesprocesscontext_history`.`eventTime`.`d_date`, 1, 10), ' ', SUBSTR(`exploded_todoproperties_agreeandupdatechangesprocesscontext_history`.`eventTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`exploded_todoproperties_agreeandupdatechangesprocesscontext_history`.`eventTime`.`d_date`, 1, 10), ' ', SUBSTR(`exploded_todoproperties_agreeandupdatechangesprocesscontext_history`.`eventTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`exploded_todoproperties_agreeandupdatechangesprocesscontext_history`.`eventTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`exploded_todoproperties_agreeandupdatechangesprocesscontext_history`.`eventTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as toDoProperties_agreeAndUpdateChangesProcessContext_history_eventTime_d_date, 
COALESCE(`removed_exploded_todoproperties_agreeandupdatechangesprocesscontext_history`.`processState`, `exploded_todoproperties_agreeandupdatechangesprocesscontext_history`.`processState`) as toDoProperties_agreeAndUpdateChangesProcessContext_history_processState, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`contractId`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`contractId`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_contractId, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`councilTax`.`appliedToCouncilTaxReduction`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`councilTax`.`appliedToCouncilTaxReduction`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_councilTax_appliedToCouncilTaxReduction, 
COALESCE(CAST(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`councilTax`.`councilTaxInClaimantName` as STRING), CAST(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`councilTax`.`councilTaxInClaimantName` as STRING)) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_councilTax_councilTaxInClaimantName, 
COALESCE(CAST(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`dateOfChange`.`hasDate` as STRING), CAST(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`dateOfChange`.`hasDate` as STRING)) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_dateOfChange_hasDate, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`dateOfChange`.`knownDate`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`dateOfChange`.`knownDate`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_dateOfChange_knownDate, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`dateOfChange`.`type`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`dateOfChange`.`type`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_dateOfChange_type, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`dateOfChange`.`date`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`dateOfChange`.`date`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_dateOfChange_date, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`housingTypeMessagePostfix`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`housingTypeMessagePostfix`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_housingTypeMessagePostfix, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`noApplicableHousingCostsSummary`.`noApplicableHousingCostsType`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`noApplicableHousingCostsSummary`.`noApplicableHousingCostsType`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_noApplicableHousingCostsSummary_noApplicableHousingCostsType, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`otherHousingTypeSummary`.`otherAccommodationType`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`otherHousingTypeSummary`.`otherAccommodationType`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_otherHousingTypeSummary_otherAccommodationType, 
COALESCE(CAST(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`ownHomeSummary`.`hasMortgage` as STRING), CAST(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`ownHomeSummary`.`hasMortgage` as STRING)) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_ownHomeSummary_hasMortgage, 
COALESCE(CAST(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`ownHomeSummary`.`paysServiceCharges` as STRING), CAST(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`ownHomeSummary`.`paysServiceCharges` as STRING)) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_ownHomeSummary_paysServiceCharges, 
COALESCE(`removed_exploded_todoproperties_agreeandupdatechangesprocesscontext_updatedhousingsummary_ownhomesummary_mortgagedetailslist`.`amount`, `exploded_todoproperties_agreeandupdatechangesprocesscontext_updatedhousingsummary_ownhomesummary_mortgagedetailslist`.`amount`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_ownHomeSummary_mortgageDetailsList_amount, 
COALESCE(CAST(`removed_exploded_todoproperties_agreeandupdatechangesprocesscontext_updatedhousingsummary_ownhomesummary_mortgagedetailslist`.`forDisabilityAdaptation` as STRING), CAST(`exploded_todoproperties_agreeandupdatechangesprocesscontext_updatedhousingsummary_ownhomesummary_mortgagedetailslist`.`forDisabilityAdaptation` as STRING)) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_ownHomeSummary_mortgageDetailsList_forDisabilityAdaptation, 
COALESCE(`removed_exploded_todoproperties_agreeandupdatechangesprocesscontext_updatedhousingsummary_ownhomesummary_mortgagedetailslist`.`lender`, `exploded_todoproperties_agreeandupdatechangesprocesscontext_updatedhousingsummary_ownhomesummary_mortgagedetailslist`.`lender`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_ownHomeSummary_mortgageDetailsList_lender, 
COALESCE(`removed_exploded_todoproperties_agreeandupdatechangesprocesscontext_updatedhousingsummary_ownhomesummary_mortgagedetailslist`.`lenderCode`, `exploded_todoproperties_agreeandupdatechangesprocesscontext_updatedhousingsummary_ownhomesummary_mortgagedetailslist`.`lenderCode`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_ownHomeSummary_mortgageDetailsList_lenderCode, 
COALESCE(`removed_exploded_todoproperties_agreeandupdatechangesprocesscontext_updatedhousingsummary_ownhomesummary_mortgagedetailslist`.`loanReferenceNumber`, `exploded_todoproperties_agreeandupdatechangesprocesscontext_updatedhousingsummary_ownhomesummary_mortgagedetailslist`.`loanReferenceNumber`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_ownHomeSummary_mortgageDetailsList_loanReferenceNumber, 
COALESCE(`removed_exploded_todoproperties_agreeandupdatechangesprocesscontext_updatedhousingsummary_ownhomesummary_mortgagedetailslist`.`mortgageDetailsId`, `exploded_todoproperties_agreeandupdatechangesprocesscontext_updatedhousingsummary_ownhomesummary_mortgagedetailslist`.`mortgageDetailsId`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_ownHomeSummary_mortgageDetailsList_mortgageDetailsId, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`ownHomeSummary`.`serviceChargeDetails`.`amount`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`ownHomeSummary`.`serviceChargeDetails`.`amount`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_ownHomeSummary_serviceChargeDetails_amount, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`ownHomeSummary`.`serviceChargeDetails`.`frequency`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`ownHomeSummary`.`serviceChargeDetails`.`frequency`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_ownHomeSummary_serviceChargeDetails_frequency, 
COALESCE(CAST(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`paymentEffectiveDate`.`hasDate` as STRING), CAST(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`paymentEffectiveDate`.`hasDate` as STRING)) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_paymentEffectiveDate_hasDate, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`paymentEffectiveDate`.`knownDate`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`paymentEffectiveDate`.`knownDate`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_paymentEffectiveDate_knownDate, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`paymentEffectiveDate`.`type`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`paymentEffectiveDate`.`type`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_paymentEffectiveDate_type, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`paymentEffectiveDate`.`date`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`paymentEffectiveDate`.`date`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_paymentEffectiveDate_date, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`processId`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`processId`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_processId, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`dateMovedToAddress`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`dateMovedToAddress`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_rentalSummary_dateMovedToAddress, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`jointTenancySummary`.`numberLivingWith`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`jointTenancySummary`.`numberLivingWith`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_rentalSummary_jointTenancySummary_numberLivingWith, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`jointTenancySummary`.`totalRent`.`monthlyAmount`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`jointTenancySummary`.`totalRent`.`monthlyAmount`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_rentalSummary_jointTenancySummary_totalRent_monthlyAmount, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`jointTenancySummary`.`totalRent`.`amount`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`jointTenancySummary`.`totalRent`.`amount`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_rentalSummary_jointTenancySummary_totalRent_amount, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`jointTenancySummary`.`totalRent`.`paymentFrequency`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`jointTenancySummary`.`totalRent`.`paymentFrequency`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_rentalSummary_jointTenancySummary_totalRent_paymentFrequency, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`jointTenancySummary`.`totalRent`.`type`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`jointTenancySummary`.`totalRent`.`type`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_rentalSummary_jointTenancySummary_totalRent_type, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`jointTenancySummary`.`totalServiceChargePayment`.`monthlyAmount`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`jointTenancySummary`.`totalServiceChargePayment`.`monthlyAmount`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_rentalSummary_jointTenancySummary_totalServiceChargePayment_monthlyAmount, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`jointTenancySummary`.`totalServiceChargePayment`.`amount`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`jointTenancySummary`.`totalServiceChargePayment`.`amount`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_rentalSummary_jointTenancySummary_totalServiceChargePayment_amount, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`jointTenancySummary`.`totalServiceChargePayment`.`paymentFrequency`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`jointTenancySummary`.`totalServiceChargePayment`.`paymentFrequency`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_rentalSummary_jointTenancySummary_totalServiceChargePayment_paymentFrequency, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`jointTenancySummary`.`totalServiceChargePayment`.`type`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`jointTenancySummary`.`totalServiceChargePayment`.`type`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_rentalSummary_jointTenancySummary_totalServiceChargePayment_type, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`landlordName`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`landlordName`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_rentalSummary_landlordName, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`numberBedrooms`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`numberBedrooms`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_rentalSummary_numberBedrooms, 
COALESCE(CAST(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`privateRentalSummary`.`financialInterest` as STRING), CAST(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`privateRentalSummary`.`financialInterest` as STRING)) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_rentalSummary_privateRentalSummary_financialInterest, 
COALESCE(CAST(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`privateRentalSummary`.`landlordLivesWithYou` as STRING), CAST(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`privateRentalSummary`.`landlordLivesWithYou` as STRING)) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_rentalSummary_privateRentalSummary_landlordLivesWithYou, 
COALESCE(CAST(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`privateRentalSummary`.`landlordRelative` as STRING), CAST(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`privateRentalSummary`.`landlordRelative` as STRING)) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_rentalSummary_privateRentalSummary_landlordRelative, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`rentalPayment`.`amount`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`rentalPayment`.`amount`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_rentalSummary_rentalPayment_amount, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`rentalPayment`.`paymentFrequency`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`rentalPayment`.`paymentFrequency`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_rentalSummary_rentalPayment_paymentFrequency, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`rentalPayment`.`type`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`rentalPayment`.`type`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_rentalSummary_rentalPayment_type, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`socialRentalSummary`.`rentFreeWeeks`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`socialRentalSummary`.`rentFreeWeeks`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_rentalSummary_socialRentalSummary_rentFreeWeeks, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`socialRentalSummary`.`serviceChargePayment`.`amount`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`socialRentalSummary`.`serviceChargePayment`.`amount`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_rentalSummary_socialRentalSummary_serviceChargePayment_amount, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`socialRentalSummary`.`serviceChargePayment`.`paymentFrequency`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`socialRentalSummary`.`serviceChargePayment`.`paymentFrequency`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_rentalSummary_socialRentalSummary_serviceChargePayment_paymentFrequency, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`socialRentalSummary`.`serviceChargePayment`.`type`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`socialRentalSummary`.`serviceChargePayment`.`type`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_rentalSummary_socialRentalSummary_serviceChargePayment_type, 
COALESCE(CAST(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`tenancyAgreementSummary`.`bothYouAndPartnerNamedOnTenancyOrRentalAgreement` as STRING), CAST(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`tenancyAgreementSummary`.`bothYouAndPartnerNamedOnTenancyOrRentalAgreement` as STRING)) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_rentalSummary_tenancyAgreementSummary_bothYouAndPartnerNamedOnTenancyOrRentalAgreement, 
COALESCE(CAST(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`tenancyAgreementSummary`.`jointTenancyWithSomeoneOtherThanPartner` as STRING), CAST(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`tenancyAgreementSummary`.`jointTenancyWithSomeoneOtherThanPartner` as STRING)) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_rentalSummary_tenancyAgreementSummary_jointTenancyWithSomeoneOtherThanPartner, 
COALESCE(CAST(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`confirmationRequired` as STRING), CAST(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`confirmationRequired` as STRING)) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_confirmationRequired, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`councilTaxSummary`.`appliedToCouncilTaxReduction`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`councilTaxSummary`.`appliedToCouncilTaxReduction`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_councilTaxSummary_appliedToCouncilTaxReduction, 
COALESCE(CAST(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`councilTaxSummary`.`councilTaxInClaimantName` as STRING), CAST(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`councilTaxSummary`.`councilTaxInClaimantName` as STRING)) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_councilTaxSummary_councilTaxInClaimantName, 
COALESCE(CAST(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`hideDetailsForPartnerDeclaration` as STRING), CAST(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`hideDetailsForPartnerDeclaration` as STRING)) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_hideDetailsForPartnerDeclaration, 
COALESCE(CAST(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`perClaimant` as STRING), CAST(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`perClaimant` as STRING)) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_perClaimant, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`type`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`type`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_type, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`currentState`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`currentState`) as toDoProperties_agreeAndUpdateChangesProcessContext_currentState, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`lastEvent`.`eventTime`.`d_date`, LENGTH(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`lastEvent`.`eventTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`lastEvent`.`eventTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`lastEvent`.`eventTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`lastEvent`.`eventTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`lastEvent`.`eventTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`lastEvent`.`eventTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`lastEvent`.`eventTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`lastEvent`.`eventTime`.`d_date`, LENGTH(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`lastEvent`.`eventTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`lastEvent`.`eventTime`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`lastEvent`.`eventTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`lastEvent`.`eventTime`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`lastEvent`.`eventTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`lastEvent`.`eventTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`lastEvent`.`eventTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as toDoProperties_agreeAndUpdateChangesProcessContext_lastEvent_eventTime_d_date, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`lastEvent`.`processState`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`lastEvent`.`processState`) as toDoProperties_agreeAndUpdateChangesProcessContext_lastEvent_processState, 
COALESCE(CAST(`_removed`.`toDoProperties`.`apaOrRentDeductionAppliedFor` as STRING), CAST(`toDoProperties`.`apaOrRentDeductionAppliedFor` as STRING)) as toDoProperties_apaOrRentDeductionAppliedFor, 
COALESCE(CAST(`_removed`.`toDoProperties`.`costsOnlyVerification` as STRING), CAST(`toDoProperties`.`costsOnlyVerification` as STRING)) as toDoProperties_costsOnlyVerification, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, LENGTH(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`toDoProperties`.`dateOfSummaryChange`.`d_date`, LENGTH(`toDoProperties`.`dateOfSummaryChange`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`toDoProperties`.`dateOfSummaryChange`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`dateOfSummaryChange`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`toDoProperties`.`dateOfSummaryChange`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`dateOfSummaryChange`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`toDoProperties`.`dateOfSummaryChange`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`toDoProperties`.`dateOfSummaryChange`.`d_date`, 21, 3)) AS TIMESTAMP) END) as toDoProperties_dateOfSummaryChange_d_date, 
COALESCE(`_removed`.`toDoProperties`.`declarationId`, `toDoProperties`.`declarationId`) as toDoProperties_declarationId, 
COALESCE(`_removed`.`toDoProperties`.`processId`, `toDoProperties`.`processId`) as toDoProperties_processId, 
COALESCE(`_removed`.`toDoProperties`.`summaryUpdatedBy`, `toDoProperties`.`summaryUpdatedBy`) as toDoProperties_summaryUpdatedBy, 
COALESCE(CASE WHEN SUBSTRING(`removed_exploded_todoproperties_thirdpartyportalprocesscontext_history`.`eventTime`.`d_date`, LENGTH(`removed_exploded_todoproperties_thirdpartyportalprocesscontext_history`.`eventTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`removed_exploded_todoproperties_thirdpartyportalprocesscontext_history`.`eventTime`.`d_date`, 1, 10), ' ', SUBSTR(`removed_exploded_todoproperties_thirdpartyportalprocesscontext_history`.`eventTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`removed_exploded_todoproperties_thirdpartyportalprocesscontext_history`.`eventTime`.`d_date`, 1, 10), ' ', SUBSTR(`removed_exploded_todoproperties_thirdpartyportalprocesscontext_history`.`eventTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`removed_exploded_todoproperties_thirdpartyportalprocesscontext_history`.`eventTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`removed_exploded_todoproperties_thirdpartyportalprocesscontext_history`.`eventTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`exploded_todoproperties_thirdpartyportalprocesscontext_history`.`eventTime`.`d_date`, LENGTH(`exploded_todoproperties_thirdpartyportalprocesscontext_history`.`eventTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`exploded_todoproperties_thirdpartyportalprocesscontext_history`.`eventTime`.`d_date`, 1, 10), ' ', SUBSTR(`exploded_todoproperties_thirdpartyportalprocesscontext_history`.`eventTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`exploded_todoproperties_thirdpartyportalprocesscontext_history`.`eventTime`.`d_date`, 1, 10), ' ', SUBSTR(`exploded_todoproperties_thirdpartyportalprocesscontext_history`.`eventTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`exploded_todoproperties_thirdpartyportalprocesscontext_history`.`eventTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`exploded_todoproperties_thirdpartyportalprocesscontext_history`.`eventTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as toDoProperties_thirdPartyPortalProcessContext_history_eventTime_d_date, 
COALESCE(`removed_exploded_todoproperties_thirdpartyportalprocesscontext_history`.`processState`, `exploded_todoproperties_thirdpartyportalprocesscontext_history`.`processState`) as toDoProperties_thirdPartyPortalProcessContext_history_processState, 
COALESCE(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`provideTenancyDetailsRequestId`, `toDoProperties`.`thirdPartyPortalProcessContext`.`provideTenancyDetailsRequestId`) as toDoProperties_thirdPartyPortalProcessContext_provideTenancyDetailsRequestId, 
COALESCE(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`requestId`, `toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`requestId`) as toDoProperties_thirdPartyPortalProcessContext_tenancyDetailsResponse_requestId, 
COALESCE(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyAgreementId`, `toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyAgreementId`) as toDoProperties_thirdPartyPortalProcessContext_tenancyDetailsResponse_tenancyAgreementId, 
COALESCE(CAST(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`aTenant` as STRING), CAST(`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`aTenant` as STRING)) as toDoProperties_thirdPartyPortalProcessContext_tenancyDetailsResponse_tenancyDetailsDeclaration_aTenant, 
COALESCE(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`declaredByUserEmail`, `toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`declaredByUserEmail`) as toDoProperties_thirdPartyPortalProcessContext_tenancyDetailsResponse_tenancyDetailsDeclaration_declaredByUserEmail, 
COALESCE(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`declaredByUserId`, `toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`declaredByUserId`) as toDoProperties_thirdPartyPortalProcessContext_tenancyDetailsResponse_tenancyDetailsDeclaration_declaredByUserId, 
COALESCE(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`declaredByUserName`, `toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`declaredByUserName`) as toDoProperties_thirdPartyPortalProcessContext_tenancyDetailsResponse_tenancyDetailsDeclaration_declaredByUserName, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`declaredDateTime`.`d_date`, LENGTH(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`declaredDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`declaredDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`declaredDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`declaredDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`declaredDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`declaredDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`declaredDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`declaredDateTime`.`d_date`, LENGTH(`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`declaredDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`declaredDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`declaredDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`declaredDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`declaredDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`declaredDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`declaredDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as toDoProperties_thirdPartyPortalProcessContext_tenancyDetailsResponse_tenancyDetailsDeclaration_declaredDateTime_d_date, 
COALESCE(CAST(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`notATenantButAcceptingOtherCharges` as STRING), CAST(`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`notATenantButAcceptingOtherCharges` as STRING)) as toDoProperties_thirdPartyPortalProcessContext_tenancyDetailsResponse_tenancyDetailsDeclaration_notATenantButAcceptingOtherCharges, 
COALESCE(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`notATenantDetails`, `toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`notATenantDetails`) as toDoProperties_thirdPartyPortalProcessContext_tenancyDetailsResponse_tenancyDetailsDeclaration_notATenantDetails, 
COALESCE(CAST(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`tenancyDetails`.`bothClaimantsOnTenancy` as STRING), CAST(`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`tenancyDetails`.`bothClaimantsOnTenancy` as STRING)) as toDoProperties_thirdPartyPortalProcessContext_tenancyDetailsResponse_tenancyDetailsDeclaration_tenancyDetails_bothClaimantsOnTenancy, 
COALESCE(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`tenancyDetails`.`effectiveAtDate`, `toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`tenancyDetails`.`effectiveAtDate`) as toDoProperties_thirdPartyPortalProcessContext_tenancyDetailsResponse_tenancyDetailsDeclaration_tenancyDetails_effectiveAtDate, 
COALESCE(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`tenancyDetails`.`eligibleServiceCharges`.`amount`, `toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`tenancyDetails`.`eligibleServiceCharges`.`amount`) as toDoProperties_thirdPartyPortalProcessContext_tenancyDetailsResponse_tenancyDetailsDeclaration_tenancyDetails_eligibleServiceCharges_amount, 
COALESCE(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`tenancyDetails`.`eligibleServiceCharges`.`paymentFrequency`, `toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`tenancyDetails`.`eligibleServiceCharges`.`paymentFrequency`) as toDoProperties_thirdPartyPortalProcessContext_tenancyDetailsResponse_tenancyDetailsDeclaration_tenancyDetails_eligibleServiceCharges_paymentFrequency, 
COALESCE(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`tenancyDetails`.`ineligibleServiceCharges`.`amount`, `toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`tenancyDetails`.`ineligibleServiceCharges`.`amount`) as toDoProperties_thirdPartyPortalProcessContext_tenancyDetailsResponse_tenancyDetailsDeclaration_tenancyDetails_ineligibleServiceCharges_amount, 
COALESCE(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`tenancyDetails`.`ineligibleServiceCharges`.`paymentFrequency`, `toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`tenancyDetails`.`ineligibleServiceCharges`.`paymentFrequency`) as toDoProperties_thirdPartyPortalProcessContext_tenancyDetailsResponse_tenancyDetailsDeclaration_tenancyDetails_ineligibleServiceCharges_paymentFrequency, 
COALESCE(CAST(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`tenancyDetails`.`jointTenancy` as STRING), CAST(`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`tenancyDetails`.`jointTenancy` as STRING)) as toDoProperties_thirdPartyPortalProcessContext_tenancyDetailsResponse_tenancyDetailsDeclaration_tenancyDetails_jointTenancy, 
COALESCE(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`tenancyDetails`.`numberOfBedrooms`, `toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`tenancyDetails`.`numberOfBedrooms`) as toDoProperties_thirdPartyPortalProcessContext_tenancyDetailsResponse_tenancyDetailsDeclaration_tenancyDetails_numberOfBedrooms, 
COALESCE(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`tenancyDetails`.`numberOfJointTenants`, `toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`tenancyDetails`.`numberOfJointTenants`) as toDoProperties_thirdPartyPortalProcessContext_tenancyDetailsResponse_tenancyDetailsDeclaration_tenancyDetails_numberOfJointTenants, 
COALESCE(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`tenancyDetails`.`numberOfRentFreeWeeks`, `toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`tenancyDetails`.`numberOfRentFreeWeeks`) as toDoProperties_thirdPartyPortalProcessContext_tenancyDetailsResponse_tenancyDetailsDeclaration_tenancyDetails_numberOfRentFreeWeeks, 
COALESCE(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`tenancyDetails`.`rent`.`amount`, `toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`tenancyDetails`.`rent`.`amount`) as toDoProperties_thirdPartyPortalProcessContext_tenancyDetailsResponse_tenancyDetailsDeclaration_tenancyDetails_rent_amount, 
COALESCE(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`tenancyDetails`.`rent`.`paymentFrequency`, `toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`tenancyDetails`.`rent`.`paymentFrequency`) as toDoProperties_thirdPartyPortalProcessContext_tenancyDetailsResponse_tenancyDetailsDeclaration_tenancyDetails_rent_paymentFrequency, 
COALESCE(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`tenancyDetails`.`rentReference`, `toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`tenancyDetails`.`rentReference`) as toDoProperties_thirdPartyPortalProcessContext_tenancyDetailsResponse_tenancyDetailsDeclaration_tenancyDetails_rentReference, 
COALESCE(CAST(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`tenancyDetails`.`temporaryAccommodation` as STRING), CAST(`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`tenancyDetails`.`temporaryAccommodation` as STRING)) as toDoProperties_thirdPartyPortalProcessContext_tenancyDetailsResponse_tenancyDetailsDeclaration_tenancyDetails_temporaryAccommodation, 
COALESCE(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`thirdPartyId`, `toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`thirdPartyId`) as toDoProperties_thirdPartyPortalProcessContext_tenancyDetailsResponse_tenancyDetailsDeclaration_thirdPartyId, 
COALESCE(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`thirdPartyId`, `toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`thirdPartyId`) as toDoProperties_thirdPartyPortalProcessContext_tenancyDetailsResponse_thirdPartyId, 
COALESCE(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`thirdPartyCreditorId`, `toDoProperties`.`thirdPartyPortalProcessContext`.`thirdPartyCreditorId`) as toDoProperties_thirdPartyPortalProcessContext_thirdPartyCreditorId, 
COALESCE(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`thirdPartyName`, `toDoProperties`.`thirdPartyPortalProcessContext`.`thirdPartyName`) as toDoProperties_thirdPartyPortalProcessContext_thirdPartyName, 
COALESCE(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`currentState`, `toDoProperties`.`thirdPartyPortalProcessContext`.`currentState`) as toDoProperties_thirdPartyPortalProcessContext_currentState, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`lastEvent`.`eventTime`.`d_date`, LENGTH(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`lastEvent`.`eventTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`lastEvent`.`eventTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`lastEvent`.`eventTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`lastEvent`.`eventTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`lastEvent`.`eventTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`lastEvent`.`eventTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`lastEvent`.`eventTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`toDoProperties`.`thirdPartyPortalProcessContext`.`lastEvent`.`eventTime`.`d_date`, LENGTH(`toDoProperties`.`thirdPartyPortalProcessContext`.`lastEvent`.`eventTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`toDoProperties`.`thirdPartyPortalProcessContext`.`lastEvent`.`eventTime`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`thirdPartyPortalProcessContext`.`lastEvent`.`eventTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`toDoProperties`.`thirdPartyPortalProcessContext`.`lastEvent`.`eventTime`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`thirdPartyPortalProcessContext`.`lastEvent`.`eventTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`toDoProperties`.`thirdPartyPortalProcessContext`.`lastEvent`.`eventTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`toDoProperties`.`thirdPartyPortalProcessContext`.`lastEvent`.`eventTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as toDoProperties_thirdPartyPortalProcessContext_lastEvent_eventTime_d_date, 
COALESCE(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`lastEvent`.`processState`, `toDoProperties`.`thirdPartyPortalProcessContext`.`lastEvent`.`processState`) as toDoProperties_thirdPartyPortalProcessContext_lastEvent_processState, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_verify_social_housing_properties
 LATERAL VIEW OUTER EXPLODE(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`history`) view_exploded_todoproperties_agreeandupdatechangesprocesscontext_history AS exploded_todoproperties_agreeandupdatechangesprocesscontext_history 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`history`) view_removed_exploded_todoproperties_agreeandupdatechangesprocesscontext_history AS removed_exploded_todoproperties_agreeandupdatechangesprocesscontext_history 
 LATERAL VIEW OUTER EXPLODE(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`ownHomeSummary`.`mortgageDetailsList`) view_exploded_todoproperties_agreeandupdatechangesprocesscontext_updatedhousingsummary_ownhomesummary_mortgagedetailslist AS exploded_todoproperties_agreeandupdatechangesprocesscontext_updatedhousingsummary_ownhomesummary_mortgagedetailslist 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`ownHomeSummary`.`mortgageDetailsList`) view_removed_exploded_todoproperties_agreeandupdatechangesprocesscontext_updatedhousingsummary_ownhomesummary_mortgagedetailslist AS removed_exploded_todoproperties_agreeandupdatechangesprocesscontext_updatedhousingsummary_ownhomesummary_mortgagedetailslist 
 LATERAL VIEW OUTER EXPLODE(`toDoProperties`.`thirdPartyPortalProcessContext`.`history`) view_exploded_todoproperties_thirdpartyportalprocesscontext_history AS exploded_todoproperties_thirdpartyportalprocesscontext_history 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`history`) view_removed_exploded_todoproperties_thirdpartyportalprocesscontext_history AS removed_exploded_todoproperties_thirdpartyportalprocesscontext_history 
 
 where `_removed`.`toDoProperties`.`type`='VERIFY_SOCIAL_HOUSING_PROPERTIES' or `toDoProperties`.`type`='VERIFY_SOCIAL_HOUSING_PROPERTIES';


!echo ------------------------;
!echo ------------------------ todo_UPLOAD_DOCUMENTS_TODO;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_todo_todo_upload_documents_todo
;

CREATE EXTERNAL TABLE src_core_todo_todo_upload_documents_todo(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`properties` STRUCT<`claimantUploadDetailsId`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`properties`:STRUCT<`claimantUploadDetailsId`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/toDo';

DROP TABLE IF EXISTS todo_UPLOAD_DOCUMENTS_TODO;

CREATE TABLE todo_upload_documents_todo STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`properties`.`claimantUploadDetailsId`, `properties`.`claimantUploadDetailsId`) as properties_claimantUploadDetailsId, 
COALESCE(`_removed`.`properties`.`type`, `properties`.`type`) as properties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_core_todo_todo_upload_documents_todo
 src_core_todo_todo_upload_documents_todo 
 where `_removed`.`properties`.`type`='UPLOAD_DOCUMENTS_TODO' or `properties`.`type`='UPLOAD_DOCUMENTS_TODO';


!echo ------------------------;
!echo ------------------------ journal_legacySanctionAddedJournalEntry;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_journal_journal_legacysanctionaddedjournalentry
;

CREATE EXTERNAL TABLE src_core_journal_journal_legacysanctionaddedjournalentry(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`journalEntryProperties` STRUCT<`durationInDays`:STRING
,`failureDate`:STRING
,`originalBenefitType`:STRING
,`type`:STRING>
,`_id` STRUCT<`journalId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`journalEntryProperties`:STRUCT<`durationInDays`:STRING
,`failureDate`:STRING
,`originalBenefitType`:STRING
,`type`:STRING>
,`_id`:STRUCT<`journalId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/journal';

DROP TABLE IF EXISTS journal_legacySanctionAddedJournalEntry;

CREATE TABLE journal_legacysanctionaddedjournalentry STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`journalEntryProperties`.`durationInDays`, `journalEntryProperties`.`durationInDays`) as journalEntryProperties_durationInDays, 
COALESCE(`_removed`.`journalEntryProperties`.`failureDate`, `journalEntryProperties`.`failureDate`) as journalEntryProperties_failureDate, 
COALESCE(`_removed`.`journalEntryProperties`.`originalBenefitType`, `journalEntryProperties`.`originalBenefitType`) as journalEntryProperties_originalBenefitType, 
COALESCE(`_removed`.`journalEntryProperties`.`type`, `journalEntryProperties`.`type`) as journalEntryProperties_type, 
COALESCE(`_removed`.`_id`.`journalId`, `_id`.`journalId`) as id FROM src_core_journal_journal_legacysanctionaddedjournalentry
 src_core_journal_journal_legacysanctionaddedjournalentry 
 where `_removed`.`journalEntryProperties`.`type`='legacySanctionAddedJournalEntry' or `journalEntryProperties`.`type`='legacySanctionAddedJournalEntry';


!echo ------------------------;
!echo ------------------------ agent_todo_REPORT_THIS_SELF_EMPLOYMENT;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_report_this_self_employment
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_report_this_self_employment(
`toDoProperties` STRUCT<`workAndEarningsDeclaration`:STRUCT<`childTaxCredit`:STRUCT<`dateStopped`:STRING
,`receivedInLast5Weeks`:BOOLEAN>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`earnings`:STRUCT<`amount`:STRING
,`hoursPerWeek`:STRING
,`paymentFrequency`:STRING>
,`effectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`employerAndMaternityAllowance`:STRUCT<`maternityAllowance`:BOOLEAN
,`maternityAllowanceAmount`:STRING
,`maternityAllowancePaymentFrequency`:STRING
,`otherEmployerPaymentFrequency`:STRING
,`otherPayFromEmployer`:BOOLEAN
,`otherPayFromEmployerAmount`:STRING>
,`futureEmployment`:STRUCT<`expectedEarnings`:STRING
,`hoursPerWeek`:STRING
,`paymentFrequency`:STRING
,`startDate`:STRING
,`startingEmployment`:BOOLEAN>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`workHistory`:STRUCT<`dateStoppedWorking`:STRING
,`stoppedWorkingInLast9Months`:BOOLEAN>
,`workingTaxCredit`:STRUCT<`dateStopped`:STRING
,`receivedInLast5Weeks`:BOOLEAN>
,`_version`:STRING
,`citizenId`:STRING
,`contractId`:STRING
,`declarationId`:STRING
,`employmentStatus`:STRING
,`expectedPreviousEarnings`:STRING
,`processId`:STRING
,`startingSelfEmployment`:BOOLEAN
,`working`:BOOLEAN
,`type`:STRING>
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`workAndEarningsDeclaration`:STRUCT<`childTaxCredit`:STRUCT<`dateStopped`:STRING
,`receivedInLast5Weeks`:BOOLEAN>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`earnings`:STRUCT<`amount`:STRING
,`hoursPerWeek`:STRING
,`paymentFrequency`:STRING>
,`effectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`employerAndMaternityAllowance`:STRUCT<`maternityAllowance`:BOOLEAN
,`maternityAllowanceAmount`:STRING
,`maternityAllowancePaymentFrequency`:STRING
,`otherEmployerPaymentFrequency`:STRING
,`otherPayFromEmployer`:BOOLEAN
,`otherPayFromEmployerAmount`:STRING>
,`futureEmployment`:STRUCT<`expectedEarnings`:STRING
,`hoursPerWeek`:STRING
,`paymentFrequency`:STRING
,`startDate`:STRING
,`startingEmployment`:BOOLEAN>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`workHistory`:STRUCT<`dateStoppedWorking`:STRING
,`stoppedWorkingInLast9Months`:BOOLEAN>
,`workingTaxCredit`:STRUCT<`dateStopped`:STRING
,`receivedInLast5Weeks`:BOOLEAN>
,`_version`:STRING
,`citizenId`:STRING
,`contractId`:STRING
,`declarationId`:STRING
,`employmentStatus`:STRING
,`expectedPreviousEarnings`:STRING
,`processId`:STRING
,`startingSelfEmployment`:BOOLEAN
,`working`:BOOLEAN
,`type`:STRING>
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_REPORT_THIS_SELF_EMPLOYMENT;

CREATE TABLE agent_todo_report_this_self_employment STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`_version`, `toDoProperties`.`workAndEarningsDeclaration`.`_version`) as toDoProperties_workAndEarningsDeclaration__version, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`childTaxCredit`.`dateStopped`, `toDoProperties`.`workAndEarningsDeclaration`.`childTaxCredit`.`dateStopped`) as toDoProperties_workAndEarningsDeclaration_childTaxCredit_dateStopped, 
COALESCE(CAST(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`childTaxCredit`.`receivedInLast5Weeks` as STRING), CAST(`toDoProperties`.`workAndEarningsDeclaration`.`childTaxCredit`.`receivedInLast5Weeks` as STRING)) as toDoProperties_workAndEarningsDeclaration_childTaxCredit_receivedInLast5Weeks, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`citizenId`, `toDoProperties`.`workAndEarningsDeclaration`.`citizenId`) as toDoProperties_workAndEarningsDeclaration_citizenId, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`contractId`, `toDoProperties`.`workAndEarningsDeclaration`.`contractId`) as toDoProperties_workAndEarningsDeclaration_contractId, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`toDoProperties`.`workAndEarningsDeclaration`.`createdDateTime`.`d_date`, LENGTH(`toDoProperties`.`workAndEarningsDeclaration`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`toDoProperties`.`workAndEarningsDeclaration`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`workAndEarningsDeclaration`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`toDoProperties`.`workAndEarningsDeclaration`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`workAndEarningsDeclaration`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`toDoProperties`.`workAndEarningsDeclaration`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`toDoProperties`.`workAndEarningsDeclaration`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as toDoProperties_workAndEarningsDeclaration_createdDateTime_d_date, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`declarationId`, `toDoProperties`.`workAndEarningsDeclaration`.`declarationId`) as toDoProperties_workAndEarningsDeclaration_declarationId, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`earnings`.`amount`, `toDoProperties`.`workAndEarningsDeclaration`.`earnings`.`amount`) as toDoProperties_workAndEarningsDeclaration_earnings_amount, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`earnings`.`hoursPerWeek`, `toDoProperties`.`workAndEarningsDeclaration`.`earnings`.`hoursPerWeek`) as toDoProperties_workAndEarningsDeclaration_earnings_hoursPerWeek, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`earnings`.`paymentFrequency`, `toDoProperties`.`workAndEarningsDeclaration`.`earnings`.`paymentFrequency`) as toDoProperties_workAndEarningsDeclaration_earnings_paymentFrequency, 
COALESCE(CAST(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`effectiveDate`.`hasDate` as STRING), CAST(`toDoProperties`.`workAndEarningsDeclaration`.`effectiveDate`.`hasDate` as STRING)) as toDoProperties_workAndEarningsDeclaration_effectiveDate_hasDate, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`effectiveDate`.`knownDate`, `toDoProperties`.`workAndEarningsDeclaration`.`effectiveDate`.`knownDate`) as toDoProperties_workAndEarningsDeclaration_effectiveDate_knownDate, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`effectiveDate`.`type`, `toDoProperties`.`workAndEarningsDeclaration`.`effectiveDate`.`type`) as toDoProperties_workAndEarningsDeclaration_effectiveDate_type, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`effectiveDate`.`date`, `toDoProperties`.`workAndEarningsDeclaration`.`effectiveDate`.`date`) as toDoProperties_workAndEarningsDeclaration_effectiveDate_date, 
COALESCE(CAST(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`employerAndMaternityAllowance`.`maternityAllowance` as STRING), CAST(`toDoProperties`.`workAndEarningsDeclaration`.`employerAndMaternityAllowance`.`maternityAllowance` as STRING)) as toDoProperties_workAndEarningsDeclaration_employerAndMaternityAllowance_maternityAllowance, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`employerAndMaternityAllowance`.`maternityAllowanceAmount`, `toDoProperties`.`workAndEarningsDeclaration`.`employerAndMaternityAllowance`.`maternityAllowanceAmount`) as toDoProperties_workAndEarningsDeclaration_employerAndMaternityAllowance_maternityAllowanceAmount, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`employerAndMaternityAllowance`.`maternityAllowancePaymentFrequency`, `toDoProperties`.`workAndEarningsDeclaration`.`employerAndMaternityAllowance`.`maternityAllowancePaymentFrequency`) as toDoProperties_workAndEarningsDeclaration_employerAndMaternityAllowance_maternityAllowancePaymentFrequency, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`employerAndMaternityAllowance`.`otherEmployerPaymentFrequency`, `toDoProperties`.`workAndEarningsDeclaration`.`employerAndMaternityAllowance`.`otherEmployerPaymentFrequency`) as toDoProperties_workAndEarningsDeclaration_employerAndMaternityAllowance_otherEmployerPaymentFrequency, 
COALESCE(CAST(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`employerAndMaternityAllowance`.`otherPayFromEmployer` as STRING), CAST(`toDoProperties`.`workAndEarningsDeclaration`.`employerAndMaternityAllowance`.`otherPayFromEmployer` as STRING)) as toDoProperties_workAndEarningsDeclaration_employerAndMaternityAllowance_otherPayFromEmployer, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`employerAndMaternityAllowance`.`otherPayFromEmployerAmount`, `toDoProperties`.`workAndEarningsDeclaration`.`employerAndMaternityAllowance`.`otherPayFromEmployerAmount`) as toDoProperties_workAndEarningsDeclaration_employerAndMaternityAllowance_otherPayFromEmployerAmount, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`employmentStatus`, `toDoProperties`.`workAndEarningsDeclaration`.`employmentStatus`) as toDoProperties_workAndEarningsDeclaration_employmentStatus, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`expectedPreviousEarnings`, `toDoProperties`.`workAndEarningsDeclaration`.`expectedPreviousEarnings`) as toDoProperties_workAndEarningsDeclaration_expectedPreviousEarnings, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`futureEmployment`.`expectedEarnings`, `toDoProperties`.`workAndEarningsDeclaration`.`futureEmployment`.`expectedEarnings`) as toDoProperties_workAndEarningsDeclaration_futureEmployment_expectedEarnings, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`futureEmployment`.`hoursPerWeek`, `toDoProperties`.`workAndEarningsDeclaration`.`futureEmployment`.`hoursPerWeek`) as toDoProperties_workAndEarningsDeclaration_futureEmployment_hoursPerWeek, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`futureEmployment`.`paymentFrequency`, `toDoProperties`.`workAndEarningsDeclaration`.`futureEmployment`.`paymentFrequency`) as toDoProperties_workAndEarningsDeclaration_futureEmployment_paymentFrequency, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`futureEmployment`.`startDate`, `toDoProperties`.`workAndEarningsDeclaration`.`futureEmployment`.`startDate`) as toDoProperties_workAndEarningsDeclaration_futureEmployment_startDate, 
COALESCE(CAST(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`futureEmployment`.`startingEmployment` as STRING), CAST(`toDoProperties`.`workAndEarningsDeclaration`.`futureEmployment`.`startingEmployment` as STRING)) as toDoProperties_workAndEarningsDeclaration_futureEmployment_startingEmployment, 
COALESCE(CAST(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`paymentEffectiveDate`.`hasDate` as STRING), CAST(`toDoProperties`.`workAndEarningsDeclaration`.`paymentEffectiveDate`.`hasDate` as STRING)) as toDoProperties_workAndEarningsDeclaration_paymentEffectiveDate_hasDate, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`paymentEffectiveDate`.`knownDate`, `toDoProperties`.`workAndEarningsDeclaration`.`paymentEffectiveDate`.`knownDate`) as toDoProperties_workAndEarningsDeclaration_paymentEffectiveDate_knownDate, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`paymentEffectiveDate`.`type`, `toDoProperties`.`workAndEarningsDeclaration`.`paymentEffectiveDate`.`type`) as toDoProperties_workAndEarningsDeclaration_paymentEffectiveDate_type, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`paymentEffectiveDate`.`date`, `toDoProperties`.`workAndEarningsDeclaration`.`paymentEffectiveDate`.`date`) as toDoProperties_workAndEarningsDeclaration_paymentEffectiveDate_date, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`processId`, `toDoProperties`.`workAndEarningsDeclaration`.`processId`) as toDoProperties_workAndEarningsDeclaration_processId, 
COALESCE(CAST(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`startingSelfEmployment` as STRING), CAST(`toDoProperties`.`workAndEarningsDeclaration`.`startingSelfEmployment` as STRING)) as toDoProperties_workAndEarningsDeclaration_startingSelfEmployment, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`workHistory`.`dateStoppedWorking`, `toDoProperties`.`workAndEarningsDeclaration`.`workHistory`.`dateStoppedWorking`) as toDoProperties_workAndEarningsDeclaration_workHistory_dateStoppedWorking, 
COALESCE(CAST(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`workHistory`.`stoppedWorkingInLast9Months` as STRING), CAST(`toDoProperties`.`workAndEarningsDeclaration`.`workHistory`.`stoppedWorkingInLast9Months` as STRING)) as toDoProperties_workAndEarningsDeclaration_workHistory_stoppedWorkingInLast9Months, 
COALESCE(CAST(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`working` as STRING), CAST(`toDoProperties`.`workAndEarningsDeclaration`.`working` as STRING)) as toDoProperties_workAndEarningsDeclaration_working, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`workingTaxCredit`.`dateStopped`, `toDoProperties`.`workAndEarningsDeclaration`.`workingTaxCredit`.`dateStopped`) as toDoProperties_workAndEarningsDeclaration_workingTaxCredit_dateStopped, 
COALESCE(CAST(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`workingTaxCredit`.`receivedInLast5Weeks` as STRING), CAST(`toDoProperties`.`workAndEarningsDeclaration`.`workingTaxCredit`.`receivedInLast5Weeks` as STRING)) as toDoProperties_workAndEarningsDeclaration_workingTaxCredit_receivedInLast5Weeks, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`type`, `toDoProperties`.`workAndEarningsDeclaration`.`type`) as toDoProperties_workAndEarningsDeclaration_type, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_report_this_self_employment
 src_agent_core_agenttodo_agent_todo_report_this_self_employment 
 where `_removed`.`toDoProperties`.`type`='REPORT_THIS_SELF_EMPLOYMENT' or `toDoProperties`.`type`='REPORT_THIS_SELF_EMPLOYMENT';


!echo ------------------------;
!echo ------------------------ agent_todo_EARNINGS_SUPPLIED;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_earnings_supplied
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_earnings_supplied(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`assessmentPeriodId`:STRING
,`message`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`assessmentPeriodId`:STRING
,`message`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_EARNINGS_SUPPLIED;

CREATE TABLE agent_todo_earnings_supplied STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`assessmentPeriodId`, `toDoProperties`.`assessmentPeriodId`) as toDoProperties_assessmentPeriodId, 
COALESCE(`_removed`.`toDoProperties`.`message`, `toDoProperties`.`message`) as toDoProperties_message, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_earnings_supplied
 src_agent_core_agenttodo_agent_todo_earnings_supplied 
 where `_removed`.`toDoProperties`.`type`='EARNINGS_SUPPLIED' or `toDoProperties`.`type`='EARNINGS_SUPPLIED';


!echo ------------------------;
!echo ------------------------ agent_todo_ADDRESS_SUMMARY;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_address_summary
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_address_summary(
`toDoProperties` STRUCT<`addressSummary`:STRUCT<`effectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`contractId`:STRING
,`postcode`:STRING
,`processId`:STRING
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`addressSummary`:STRUCT<`effectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`contractId`:STRING
,`postcode`:STRING
,`processId`:STRING
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_ADDRESS_SUMMARY;

CREATE TABLE agent_todo_address_summary STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`addressSummary`.`contractId`, `toDoProperties`.`addressSummary`.`contractId`) as toDoProperties_addressSummary_contractId, 
COALESCE(CAST(`_removed`.`toDoProperties`.`addressSummary`.`effectiveDate`.`hasDate` as STRING), CAST(`toDoProperties`.`addressSummary`.`effectiveDate`.`hasDate` as STRING)) as toDoProperties_addressSummary_effectiveDate_hasDate, 
COALESCE(`_removed`.`toDoProperties`.`addressSummary`.`effectiveDate`.`knownDate`, `toDoProperties`.`addressSummary`.`effectiveDate`.`knownDate`) as toDoProperties_addressSummary_effectiveDate_knownDate, 
COALESCE(`_removed`.`toDoProperties`.`addressSummary`.`effectiveDate`.`type`, `toDoProperties`.`addressSummary`.`effectiveDate`.`type`) as toDoProperties_addressSummary_effectiveDate_type, 
COALESCE(`_removed`.`toDoProperties`.`addressSummary`.`effectiveDate`.`date`, `toDoProperties`.`addressSummary`.`effectiveDate`.`date`) as toDoProperties_addressSummary_effectiveDate_date, 
COALESCE(CAST(`_removed`.`toDoProperties`.`addressSummary`.`paymentEffectiveDate`.`hasDate` as STRING), CAST(`toDoProperties`.`addressSummary`.`paymentEffectiveDate`.`hasDate` as STRING)) as toDoProperties_addressSummary_paymentEffectiveDate_hasDate, 
COALESCE(`_removed`.`toDoProperties`.`addressSummary`.`paymentEffectiveDate`.`knownDate`, `toDoProperties`.`addressSummary`.`paymentEffectiveDate`.`knownDate`) as toDoProperties_addressSummary_paymentEffectiveDate_knownDate, 
COALESCE(`_removed`.`toDoProperties`.`addressSummary`.`paymentEffectiveDate`.`type`, `toDoProperties`.`addressSummary`.`paymentEffectiveDate`.`type`) as toDoProperties_addressSummary_paymentEffectiveDate_type, 
COALESCE(`_removed`.`toDoProperties`.`addressSummary`.`paymentEffectiveDate`.`date`, `toDoProperties`.`addressSummary`.`paymentEffectiveDate`.`date`) as toDoProperties_addressSummary_paymentEffectiveDate_date, 
COALESCE(`_removed`.`toDoProperties`.`addressSummary`.`postcode`, `toDoProperties`.`addressSummary`.`postcode`) as toDoProperties_addressSummary_postcode, 
COALESCE(`_removed`.`toDoProperties`.`addressSummary`.`processId`, `toDoProperties`.`addressSummary`.`processId`) as toDoProperties_addressSummary_processId, 
COALESCE(CAST(`_removed`.`toDoProperties`.`addressSummary`.`confirmationRequired` as STRING), CAST(`toDoProperties`.`addressSummary`.`confirmationRequired` as STRING)) as toDoProperties_addressSummary_confirmationRequired, 
COALESCE(CAST(`_removed`.`toDoProperties`.`addressSummary`.`hideDetailsForPartnerDeclaration` as STRING), CAST(`toDoProperties`.`addressSummary`.`hideDetailsForPartnerDeclaration` as STRING)) as toDoProperties_addressSummary_hideDetailsForPartnerDeclaration, 
COALESCE(CAST(`_removed`.`toDoProperties`.`addressSummary`.`perClaimant` as STRING), CAST(`toDoProperties`.`addressSummary`.`perClaimant` as STRING)) as toDoProperties_addressSummary_perClaimant, 
COALESCE(`_removed`.`toDoProperties`.`addressSummary`.`type`, `toDoProperties`.`addressSummary`.`type`) as toDoProperties_addressSummary_type, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_address_summary
 src_agent_core_agenttodo_agent_todo_address_summary 
 where `_removed`.`toDoProperties`.`type`='ADDRESS_SUMMARY' or `toDoProperties`.`type`='ADDRESS_SUMMARY';


!echo ------------------------;
!echo ------------------------ claimant_commitment_LOW-V2;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_claimantcommitment_claimant_commitment_low_v2
;

CREATE EXTERNAL TABLE src_core_claimantcommitment_claimant_commitment_low_v2(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`properties` STRUCT<`claimantCommitmentVersion`:STRING
,`type`:STRING>
,`_id` STRUCT<`contractId`:STRING
,`claimantId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`properties`:STRUCT<`claimantCommitmentVersion`:STRING
,`type`:STRING>
,`_id`:STRUCT<`contractId`:STRING
,`claimantId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/claimantCommitment';

DROP TABLE IF EXISTS claimant_commitment_LOW-V2;

CREATE TABLE claimant_commitment_low_v2 STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`properties`.`claimantCommitmentVersion`, `properties`.`claimantCommitmentVersion`) as properties_claimantCommitmentVersion, 
COALESCE(`_removed`.`properties`.`type`, `properties`.`type`) as properties_type, 
COALESCE(`_removed`.`_id`.`contractId`, `_id`.`contractId`) as contractId, 
COALESCE(`_removed`.`_id`.`claimantId`, `_id`.`claimantId`) as claimantId FROM src_core_claimantcommitment_claimant_commitment_low_v2
 src_core_claimantcommitment_claimant_commitment_low_v2 
 where `_removed`.`properties`.`type`='LOW-V2' or `properties`.`type`='LOW-V2';


!echo ------------------------;
!echo ------------------------ journal_ProvideProofOfYourChildcareCostsJournalEntry;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_journal_journal_provideproofofyourchildcarecostsjournalentry
;

CREATE EXTERNAL TABLE src_core_journal_journal_provideproofofyourchildcarecostsjournalentry(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`journalEntryProperties` STRUCT<`claimantAttachmentUploadId`:STRING
,`submitProofOption`:STRING
,`type`:STRING>
,`_id` STRUCT<`journalId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`journalEntryProperties`:STRUCT<`claimantAttachmentUploadId`:STRING
,`submitProofOption`:STRING
,`type`:STRING>
,`_id`:STRUCT<`journalId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/journal';

DROP TABLE IF EXISTS journal_ProvideProofOfYourChildcareCostsJournalEntry;

CREATE TABLE journal_provideproofofyourchildcarecostsjournalentry STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`journalEntryProperties`.`claimantAttachmentUploadId`, `journalEntryProperties`.`claimantAttachmentUploadId`) as journalEntryProperties_claimantAttachmentUploadId, 
COALESCE(`_removed`.`journalEntryProperties`.`submitProofOption`, `journalEntryProperties`.`submitProofOption`) as journalEntryProperties_submitProofOption, 
COALESCE(`_removed`.`journalEntryProperties`.`type`, `journalEntryProperties`.`type`) as journalEntryProperties_type, 
COALESCE(`_removed`.`_id`.`journalId`, `_id`.`journalId`) as id FROM src_core_journal_journal_provideproofofyourchildcarecostsjournalentry
 src_core_journal_journal_provideproofofyourchildcarecostsjournalentry 
 where `_removed`.`journalEntryProperties`.`type`='ProvideProofOfYourChildcareCostsJournalEntry' or `journalEntryProperties`.`type`='ProvideProofOfYourChildcareCostsJournalEntry';


!echo ------------------------;
!echo ------------------------ agent_todo;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo(
`supportingDocuments` ARRAY<STRUCT<`attachmentSummary`:STRUCT<`updatedAt`:STRUCT<`d_date`:STRING>
,`fileName`:STRING
,`fileSize`:STRING
,`id`:STRING
,`revision`:STRING
,`updatedBy`:STRING>
,`supportingDocumentPopulationArguments`:STRUCT<`effectiveDateOfChange`:STRING
,`includeAddress`:BOOLEAN
,`includeName`:BOOLEAN
,`includePhoneNumber`:BOOLEAN
,`nino`:STRING
,`type`:STRING>
,`supportingDocumentType`:STRING
>>
,`alpForm` STRUCT<`attachmentSummary`:STRUCT<`updatedAt`:STRUCT<`d_date`:STRING>
,`fileName`:STRING
,`fileSize`:STRING
,`id`:STRING
,`revision`:STRING
,`updatedBy`:STRING>
,`alpFormType`:STRING>
,`notes` ARRAY<STRUCT<`dateCreated`:STRUCT<`d_date`:STRING>
,`createdBy`:STRING
,`createdByName`:STRING
,`deleted`:BOOLEAN
,`text`:STRING
>>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`completedDateTime` STRUCT<`d_date`:STRING>
,`reference` STRUCT<`claimantId`:STRING
,`contractId`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`deliveryUnits` ARRAY<STRING>
,`_version` STRING
,`allocatedToAgentId` STRING
,`cancelled` STRING
,`completingAgentId` STRING
,`completingAgentName` STRING
,`contractId` STRING
,`createdByAgentId` STRING
,`createdByAgentName` STRING
,`deadlineDate` STRING
,`deadlineTime` STRING
,`description` STRING
,`relatedToClaimantId` STRING
,`status` STRING
,`title` STRING
,`toDoId` STRING
,`type` STRING
,`_removed` STRUCT<`supportingDocuments`:ARRAY<STRUCT<`attachmentSummary`:STRUCT<`updatedAt`:STRUCT<`d_date`:STRING>
,`fileName`:STRING
,`fileSize`:STRING
,`id`:STRING
,`revision`:STRING
,`updatedBy`:STRING>
,`supportingDocumentPopulationArguments`:STRUCT<`effectiveDateOfChange`:STRING
,`includeAddress`:BOOLEAN
,`includeName`:BOOLEAN
,`includePhoneNumber`:BOOLEAN
,`nino`:STRING
,`type`:STRING>
,`supportingDocumentType`:STRING
>>
,`alpForm`:STRUCT<`attachmentSummary`:STRUCT<`updatedAt`:STRUCT<`d_date`:STRING>
,`fileName`:STRING
,`fileSize`:STRING
,`id`:STRING
,`revision`:STRING
,`updatedBy`:STRING>
,`alpFormType`:STRING>
,`notes`:ARRAY<STRUCT<`dateCreated`:STRUCT<`d_date`:STRING>
,`createdBy`:STRING
,`createdByName`:STRING
,`deleted`:BOOLEAN
,`text`:STRING
>>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`completedDateTime`:STRUCT<`d_date`:STRING>
,`reference`:STRUCT<`claimantId`:STRING
,`contractId`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`deliveryUnits`:ARRAY<STRING>
,`_version`:STRING
,`allocatedToAgentId`:STRING
,`cancelled`:STRING
,`completingAgentId`:STRING
,`completingAgentName`:STRING
,`contractId`:STRING
,`createdByAgentId`:STRING
,`createdByAgentName`:STRING
,`deadlineDate`:STRING
,`deadlineTime`:STRING
,`description`:STRING
,`relatedToClaimantId`:STRING
,`status`:STRING
,`title`:STRING
,`toDoId`:STRING
,`type`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo;

CREATE TABLE agent_todo STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`allocatedToAgentId`, `allocatedToAgentId`) as allocatedToAgentId, 
COALESCE(`_removed`.`alpForm`.`alpFormType`, `alpForm`.`alpFormType`) as alpForm_alpFormType, 
COALESCE(`_removed`.`alpForm`.`attachmentSummary`.`fileName`, `alpForm`.`attachmentSummary`.`fileName`) as alpForm_attachmentSummary_fileName, 
COALESCE(`_removed`.`alpForm`.`attachmentSummary`.`fileSize`, `alpForm`.`attachmentSummary`.`fileSize`) as alpForm_attachmentSummary_fileSize, 
COALESCE(`_removed`.`alpForm`.`attachmentSummary`.`id`, `alpForm`.`attachmentSummary`.`id`) as alpForm_attachmentSummary_id, 
COALESCE(`_removed`.`alpForm`.`attachmentSummary`.`revision`, `alpForm`.`attachmentSummary`.`revision`) as alpForm_attachmentSummary_revision, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`alpForm`.`attachmentSummary`.`updatedAt`.`d_date`, LENGTH(`_removed`.`alpForm`.`attachmentSummary`.`updatedAt`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`alpForm`.`attachmentSummary`.`updatedAt`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`alpForm`.`attachmentSummary`.`updatedAt`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`alpForm`.`attachmentSummary`.`updatedAt`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`alpForm`.`attachmentSummary`.`updatedAt`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`alpForm`.`attachmentSummary`.`updatedAt`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`alpForm`.`attachmentSummary`.`updatedAt`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`alpForm`.`attachmentSummary`.`updatedAt`.`d_date`, LENGTH(`alpForm`.`attachmentSummary`.`updatedAt`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`alpForm`.`attachmentSummary`.`updatedAt`.`d_date`, 1, 10), ' ', SUBSTR(`alpForm`.`attachmentSummary`.`updatedAt`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`alpForm`.`attachmentSummary`.`updatedAt`.`d_date`, 1, 10), ' ', SUBSTR(`alpForm`.`attachmentSummary`.`updatedAt`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`alpForm`.`attachmentSummary`.`updatedAt`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`alpForm`.`attachmentSummary`.`updatedAt`.`d_date`, 21, 3)) AS TIMESTAMP) END) as alpForm_attachmentSummary_updatedAt_d_date, 
COALESCE(`_removed`.`alpForm`.`attachmentSummary`.`updatedBy`, `alpForm`.`attachmentSummary`.`updatedBy`) as alpForm_attachmentSummary_updatedBy, 
COALESCE(`_removed`.`cancelled`, `cancelled`) as cancelled, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`completedDateTime`.`d_date`, LENGTH(`_removed`.`completedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`completedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`completedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`completedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`completedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`completedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`completedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`completedDateTime`.`d_date`, LENGTH(`completedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`completedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`completedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`completedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`completedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`completedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`completedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as completedDateTime_d_date, 
COALESCE(`_removed`.`completingAgentId`, `completingAgentId`) as completingAgentId, 
COALESCE(`_removed`.`completingAgentName`, `completingAgentName`) as completingAgentName, 
COALESCE(`_removed`.`contractId`, `contractId`) as contractId, 
COALESCE(`_removed`.`createdByAgentId`, `createdByAgentId`) as createdByAgentId, 
COALESCE(`_removed`.`createdByAgentName`, `createdByAgentName`) as createdByAgentName, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as createdDateTime_d_date, 
COALESCE(`_removed`.`deadlineDate`, `deadlineDate`) as deadlineDate, 
COALESCE(`_removed`.`deadlineTime`, `deadlineTime`) as deadlineTime, 
COALESCE(`removed_exploded_deliveryunits`, `exploded_deliveryunits`) as deliveryUnits, 
COALESCE(`_removed`.`description`, `description`) as description, 
COALESCE(`removed_exploded_notes`.`createdBy`, `exploded_notes`.`createdBy`) as notes_createdBy, 
COALESCE(`removed_exploded_notes`.`createdByName`, `exploded_notes`.`createdByName`) as notes_createdByName, 
COALESCE(CASE WHEN SUBSTRING(`removed_exploded_notes`.`dateCreated`.`d_date`, LENGTH(`removed_exploded_notes`.`dateCreated`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`removed_exploded_notes`.`dateCreated`.`d_date`, 1, 10), ' ', SUBSTR(`removed_exploded_notes`.`dateCreated`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`removed_exploded_notes`.`dateCreated`.`d_date`, 1, 10), ' ', SUBSTR(`removed_exploded_notes`.`dateCreated`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`removed_exploded_notes`.`dateCreated`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`removed_exploded_notes`.`dateCreated`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`exploded_notes`.`dateCreated`.`d_date`, LENGTH(`exploded_notes`.`dateCreated`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`exploded_notes`.`dateCreated`.`d_date`, 1, 10), ' ', SUBSTR(`exploded_notes`.`dateCreated`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`exploded_notes`.`dateCreated`.`d_date`, 1, 10), ' ', SUBSTR(`exploded_notes`.`dateCreated`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`exploded_notes`.`dateCreated`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`exploded_notes`.`dateCreated`.`d_date`, 21, 3)) AS TIMESTAMP) END) as notes_dateCreated_d_date, 
COALESCE(CAST(`removed_exploded_notes`.`deleted` as STRING), CAST(`exploded_notes`.`deleted` as STRING)) as notes_deleted, 
COALESCE(`removed_exploded_notes`.`text`, `exploded_notes`.`text`) as notes_text, 
COALESCE(`_removed`.`relatedToClaimantId`, `relatedToClaimantId`) as relatedToClaimantId, 
COALESCE(`_removed`.`status`, `status`) as status, 
COALESCE(`removed_exploded_supportingdocuments`.`attachmentSummary`.`fileName`, `exploded_supportingdocuments`.`attachmentSummary`.`fileName`) as supportingDocuments_attachmentSummary_fileName, 
COALESCE(`removed_exploded_supportingdocuments`.`attachmentSummary`.`fileSize`, `exploded_supportingdocuments`.`attachmentSummary`.`fileSize`) as supportingDocuments_attachmentSummary_fileSize, 
COALESCE(`removed_exploded_supportingdocuments`.`attachmentSummary`.`id`, `exploded_supportingdocuments`.`attachmentSummary`.`id`) as supportingDocuments_attachmentSummary_id, 
COALESCE(`removed_exploded_supportingdocuments`.`attachmentSummary`.`revision`, `exploded_supportingdocuments`.`attachmentSummary`.`revision`) as supportingDocuments_attachmentSummary_revision, 
COALESCE(CASE WHEN SUBSTRING(`removed_exploded_supportingdocuments`.`attachmentSummary`.`updatedAt`.`d_date`, LENGTH(`removed_exploded_supportingdocuments`.`attachmentSummary`.`updatedAt`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`removed_exploded_supportingdocuments`.`attachmentSummary`.`updatedAt`.`d_date`, 1, 10), ' ', SUBSTR(`removed_exploded_supportingdocuments`.`attachmentSummary`.`updatedAt`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`removed_exploded_supportingdocuments`.`attachmentSummary`.`updatedAt`.`d_date`, 1, 10), ' ', SUBSTR(`removed_exploded_supportingdocuments`.`attachmentSummary`.`updatedAt`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`removed_exploded_supportingdocuments`.`attachmentSummary`.`updatedAt`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`removed_exploded_supportingdocuments`.`attachmentSummary`.`updatedAt`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`exploded_supportingdocuments`.`attachmentSummary`.`updatedAt`.`d_date`, LENGTH(`exploded_supportingdocuments`.`attachmentSummary`.`updatedAt`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`exploded_supportingdocuments`.`attachmentSummary`.`updatedAt`.`d_date`, 1, 10), ' ', SUBSTR(`exploded_supportingdocuments`.`attachmentSummary`.`updatedAt`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`exploded_supportingdocuments`.`attachmentSummary`.`updatedAt`.`d_date`, 1, 10), ' ', SUBSTR(`exploded_supportingdocuments`.`attachmentSummary`.`updatedAt`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`exploded_supportingdocuments`.`attachmentSummary`.`updatedAt`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`exploded_supportingdocuments`.`attachmentSummary`.`updatedAt`.`d_date`, 21, 3)) AS TIMESTAMP) END) as supportingDocuments_attachmentSummary_updatedAt_d_date, 
COALESCE(`removed_exploded_supportingdocuments`.`attachmentSummary`.`updatedBy`, `exploded_supportingdocuments`.`attachmentSummary`.`updatedBy`) as supportingDocuments_attachmentSummary_updatedBy, 
COALESCE(`removed_exploded_supportingdocuments`.`supportingDocumentType`, `exploded_supportingdocuments`.`supportingDocumentType`) as supportingDocuments_supportingDocumentType, 
COALESCE(`removed_exploded_supportingdocuments`.`supportingDocumentPopulationArguments`.`effectiveDateOfChange`, `exploded_supportingdocuments`.`supportingDocumentPopulationArguments`.`effectiveDateOfChange`) as supportingDocuments_supportingDocumentPopulationArguments_effectiveDateOfChange, 
COALESCE(CAST(`removed_exploded_supportingdocuments`.`supportingDocumentPopulationArguments`.`includeAddress` as STRING), CAST(`exploded_supportingdocuments`.`supportingDocumentPopulationArguments`.`includeAddress` as STRING)) as supportingDocuments_supportingDocumentPopulationArguments_includeAddress, 
COALESCE(CAST(`removed_exploded_supportingdocuments`.`supportingDocumentPopulationArguments`.`includeName` as STRING), CAST(`exploded_supportingdocuments`.`supportingDocumentPopulationArguments`.`includeName` as STRING)) as supportingDocuments_supportingDocumentPopulationArguments_includeName, 
COALESCE(CAST(`removed_exploded_supportingdocuments`.`supportingDocumentPopulationArguments`.`includePhoneNumber` as STRING), CAST(`exploded_supportingdocuments`.`supportingDocumentPopulationArguments`.`includePhoneNumber` as STRING)) as supportingDocuments_supportingDocumentPopulationArguments_includePhoneNumber, 
COALESCE(`removed_exploded_supportingdocuments`.`supportingDocumentPopulationArguments`.`nino`, `exploded_supportingdocuments`.`supportingDocumentPopulationArguments`.`nino`) as supportingDocuments_supportingDocumentPopulationArguments_nino, 
COALESCE(`removed_exploded_supportingdocuments`.`supportingDocumentPopulationArguments`.`type`, `exploded_supportingdocuments`.`supportingDocumentPopulationArguments`.`type`) as supportingDocuments_supportingDocumentPopulationArguments_type, 
COALESCE(`_removed`.`title`, `title`) as title, 
COALESCE(`_removed`.`toDoId`, `toDoId`) as toDoId, 
COALESCE(`_removed`.`type`, `type`) as type, 
COALESCE(`_removed`.`reference`.`claimantId`, `reference`.`claimantId`) as reference_claimantId, 
COALESCE(`_removed`.`reference`.`contractId`, `reference`.`contractId`) as reference_contractId, 
COALESCE(`_removed`.`reference`.`type`, `reference`.`type`) as reference_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo
 LATERAL VIEW OUTER EXPLODE(`deliveryUnits`) view_exploded_deliveryunits AS exploded_deliveryunits 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`deliveryUnits`) view_removed_exploded_deliveryunits AS removed_exploded_deliveryunits 
 LATERAL VIEW OUTER EXPLODE(`notes`) view_exploded_notes AS exploded_notes 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`notes`) view_removed_exploded_notes AS removed_exploded_notes 
 LATERAL VIEW OUTER EXPLODE(`supportingDocuments`) view_exploded_supportingdocuments AS exploded_supportingdocuments 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`supportingDocuments`) view_removed_exploded_supportingdocuments AS removed_exploded_supportingdocuments 
;


!echo ------------------------;
!echo ------------------------ agent_todo_archive_VERIFY_FILE_UPLOADED_CHILDCARE;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_verify_file_uploaded_childcare
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_verify_file_uploaded_childcare(
`toDoProperties` STRUCT<`dateOfSummaryChange`:STRUCT<`d_date`:STRING>
,`claimantUploadDetailsIdList`:ARRAY<STRING>
,`claimantToDoDeadline`:STRING
,`declarationToVerifyId`:STRING
,`processId`:STRING
,`claimantProvideProofToDoId`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`dateOfSummaryChange`:STRUCT<`d_date`:STRING>
,`claimantUploadDetailsIdList`:ARRAY<STRING>
,`claimantToDoDeadline`:STRING
,`declarationToVerifyId`:STRING
,`processId`:STRING
,`claimantProvideProofToDoId`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_VERIFY_FILE_UPLOADED_CHILDCARE;

CREATE TABLE agent_todo_archive_verify_file_uploaded_childcare STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`claimantToDoDeadline`, `toDoProperties`.`claimantToDoDeadline`) as toDoProperties_claimantToDoDeadline, 
COALESCE(`removed_exploded_todoproperties_claimantuploaddetailsidlist`, `exploded_todoproperties_claimantuploaddetailsidlist`) as toDoProperties_claimantUploadDetailsIdList, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, LENGTH(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`toDoProperties`.`dateOfSummaryChange`.`d_date`, LENGTH(`toDoProperties`.`dateOfSummaryChange`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`toDoProperties`.`dateOfSummaryChange`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`dateOfSummaryChange`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`toDoProperties`.`dateOfSummaryChange`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`dateOfSummaryChange`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`toDoProperties`.`dateOfSummaryChange`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`toDoProperties`.`dateOfSummaryChange`.`d_date`, 21, 3)) AS TIMESTAMP) END) as toDoProperties_dateOfSummaryChange_d_date, 
COALESCE(`_removed`.`toDoProperties`.`declarationToVerifyId`, `toDoProperties`.`declarationToVerifyId`) as toDoProperties_declarationToVerifyId, 
COALESCE(`_removed`.`toDoProperties`.`processId`, `toDoProperties`.`processId`) as toDoProperties_processId, 
COALESCE(`_removed`.`toDoProperties`.`claimantProvideProofToDoId`, `toDoProperties`.`claimantProvideProofToDoId`) as toDoProperties_claimantProvideProofToDoId, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_verify_file_uploaded_childcare
 LATERAL VIEW OUTER EXPLODE(`toDoProperties`.`claimantUploadDetailsIdList`) view_exploded_todoproperties_claimantuploaddetailsidlist AS exploded_todoproperties_claimantuploaddetailsidlist 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`toDoProperties`.`claimantUploadDetailsIdList`) view_removed_exploded_todoproperties_claimantuploaddetailsidlist AS removed_exploded_todoproperties_claimantuploaddetailsidlist 
 
 where `_removed`.`toDoProperties`.`type`='VERIFY_FILE_UPLOADED_CHILDCARE' or `toDoProperties`.`type`='VERIFY_FILE_UPLOADED_CHILDCARE';


!echo ------------------------;
!echo ------------------------ journal_FlexDirectPaymentToLandlordClaimantToDoJournalEntry;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_journal_journal_flexdirectpaymenttolandlordclaimanttodojournalentry
;

CREATE EXTERNAL TABLE src_core_journal_journal_flexdirectpaymenttolandlordclaimanttodojournalentry(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`journalEntryProperties` STRUCT<`directPaymentToLandlordAccepted`:BOOLEAN
,`type`:STRING>
,`_id` STRUCT<`journalId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`journalEntryProperties`:STRUCT<`directPaymentToLandlordAccepted`:BOOLEAN
,`type`:STRING>
,`_id`:STRUCT<`journalId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/journal';

DROP TABLE IF EXISTS journal_FlexDirectPaymentToLandlordClaimantToDoJournalEntry;

CREATE TABLE journal_flexdirectpaymenttolandlordclaimanttodojournalentry STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`directPaymentToLandlordAccepted` as STRING), CAST(`journalEntryProperties`.`directPaymentToLandlordAccepted` as STRING)) as journalEntryProperties_directPaymentToLandlordAccepted, 
COALESCE(`_removed`.`journalEntryProperties`.`type`, `journalEntryProperties`.`type`) as journalEntryProperties_type, 
COALESCE(`_removed`.`_id`.`journalId`, `_id`.`journalId`) as id FROM src_core_journal_journal_flexdirectpaymenttolandlordclaimanttodojournalentry
 src_core_journal_journal_flexdirectpaymenttolandlordclaimanttodojournalentry 
 where `_removed`.`journalEntryProperties`.`type`='FlexDirectPaymentToLandlordClaimantToDoJournalEntry' or `journalEntryProperties`.`type`='FlexDirectPaymentToLandlordClaimantToDoJournalEntry';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_HOUSING_DECLARATION_TO_DO_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_housing_declaration_to_do_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_housing_declaration_to_do_properties(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`housingDeclarationId`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`housingDeclarationId`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_HOUSING_DECLARATION_TO_DO_PROPERTIES;

CREATE TABLE agent_todo_archive_housing_declaration_to_do_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`housingDeclarationId`, `toDoProperties`.`housingDeclarationId`) as toDoProperties_housingDeclarationId, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_housing_declaration_to_do_properties
 src_agent_core_agenttodoarchive_agent_todo_archive_housing_declaration_to_do_properties 
 where `_removed`.`toDoProperties`.`type`='HOUSING_DECLARATION_TO_DO_PROPERTIES' or `toDoProperties`.`type`='HOUSING_DECLARATION_TO_DO_PROPERTIES';


!echo ------------------------;
!echo ------------------------ journal_AddressSummaryJournalEntry;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_journal_journal_addresssummaryjournalentry
;

CREATE EXTERNAL TABLE src_core_journal_journal_addresssummaryjournalentry(
`journalEntryProperties` STRUCT<`addressSummary`:STRUCT<`effectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`contractId`:STRING
,`postcode`:STRING
,`processId`:STRING
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`journalId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`journalEntryProperties`:STRUCT<`addressSummary`:STRUCT<`effectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`contractId`:STRING
,`postcode`:STRING
,`processId`:STRING
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`journalId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/journal';

DROP TABLE IF EXISTS journal_AddressSummaryJournalEntry;

CREATE TABLE journal_addresssummaryjournalentry STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`journalEntryProperties`.`addressSummary`.`contractId`, `journalEntryProperties`.`addressSummary`.`contractId`) as journalEntryProperties_addressSummary_contractId, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`addressSummary`.`effectiveDate`.`hasDate` as STRING), CAST(`journalEntryProperties`.`addressSummary`.`effectiveDate`.`hasDate` as STRING)) as journalEntryProperties_addressSummary_effectiveDate_hasDate, 
COALESCE(`_removed`.`journalEntryProperties`.`addressSummary`.`effectiveDate`.`knownDate`, `journalEntryProperties`.`addressSummary`.`effectiveDate`.`knownDate`) as journalEntryProperties_addressSummary_effectiveDate_knownDate, 
COALESCE(`_removed`.`journalEntryProperties`.`addressSummary`.`effectiveDate`.`type`, `journalEntryProperties`.`addressSummary`.`effectiveDate`.`type`) as journalEntryProperties_addressSummary_effectiveDate_type, 
COALESCE(`_removed`.`journalEntryProperties`.`addressSummary`.`effectiveDate`.`date`, `journalEntryProperties`.`addressSummary`.`effectiveDate`.`date`) as journalEntryProperties_addressSummary_effectiveDate_date, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`addressSummary`.`paymentEffectiveDate`.`hasDate` as STRING), CAST(`journalEntryProperties`.`addressSummary`.`paymentEffectiveDate`.`hasDate` as STRING)) as journalEntryProperties_addressSummary_paymentEffectiveDate_hasDate, 
COALESCE(`_removed`.`journalEntryProperties`.`addressSummary`.`paymentEffectiveDate`.`knownDate`, `journalEntryProperties`.`addressSummary`.`paymentEffectiveDate`.`knownDate`) as journalEntryProperties_addressSummary_paymentEffectiveDate_knownDate, 
COALESCE(`_removed`.`journalEntryProperties`.`addressSummary`.`paymentEffectiveDate`.`type`, `journalEntryProperties`.`addressSummary`.`paymentEffectiveDate`.`type`) as journalEntryProperties_addressSummary_paymentEffectiveDate_type, 
COALESCE(`_removed`.`journalEntryProperties`.`addressSummary`.`paymentEffectiveDate`.`date`, `journalEntryProperties`.`addressSummary`.`paymentEffectiveDate`.`date`) as journalEntryProperties_addressSummary_paymentEffectiveDate_date, 
COALESCE(`_removed`.`journalEntryProperties`.`addressSummary`.`postcode`, `journalEntryProperties`.`addressSummary`.`postcode`) as journalEntryProperties_addressSummary_postcode, 
COALESCE(`_removed`.`journalEntryProperties`.`addressSummary`.`processId`, `journalEntryProperties`.`addressSummary`.`processId`) as journalEntryProperties_addressSummary_processId, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`addressSummary`.`confirmationRequired` as STRING), CAST(`journalEntryProperties`.`addressSummary`.`confirmationRequired` as STRING)) as journalEntryProperties_addressSummary_confirmationRequired, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`addressSummary`.`hideDetailsForPartnerDeclaration` as STRING), CAST(`journalEntryProperties`.`addressSummary`.`hideDetailsForPartnerDeclaration` as STRING)) as journalEntryProperties_addressSummary_hideDetailsForPartnerDeclaration, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`addressSummary`.`perClaimant` as STRING), CAST(`journalEntryProperties`.`addressSummary`.`perClaimant` as STRING)) as journalEntryProperties_addressSummary_perClaimant, 
COALESCE(`_removed`.`journalEntryProperties`.`addressSummary`.`type`, `journalEntryProperties`.`addressSummary`.`type`) as journalEntryProperties_addressSummary_type, 
COALESCE(`_removed`.`journalEntryProperties`.`type`, `journalEntryProperties`.`type`) as journalEntryProperties_type, 
COALESCE(`_removed`.`_id`.`journalId`, `_id`.`journalId`) as id FROM src_core_journal_journal_addresssummaryjournalentry
 src_core_journal_journal_addresssummaryjournalentry 
 where `_removed`.`journalEntryProperties`.`type`='AddressSummaryJournalEntry' or `journalEntryProperties`.`type`='AddressSummaryJournalEntry';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_DATA_GATHER_REFER_HRT_TO_DECISION_MAKER;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_data_gather_refer_hrt_to_decision_maker
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_data_gather_refer_hrt_to_decision_maker(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`notUkNational`:BOOLEAN
,`returnAfterAbsence`:BOOLEAN
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`notUkNational`:BOOLEAN
,`returnAfterAbsence`:BOOLEAN
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_DATA_GATHER_REFER_HRT_TO_DECISION_MAKER;

CREATE TABLE agent_todo_archive_data_gather_refer_hrt_to_decision_maker STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(CAST(`_removed`.`toDoProperties`.`notUkNational` as STRING), CAST(`toDoProperties`.`notUkNational` as STRING)) as toDoProperties_notUkNational, 
COALESCE(CAST(`_removed`.`toDoProperties`.`returnAfterAbsence` as STRING), CAST(`toDoProperties`.`returnAfterAbsence` as STRING)) as toDoProperties_returnAfterAbsence, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_data_gather_refer_hrt_to_decision_maker
 src_agent_core_agenttodoarchive_agent_todo_archive_data_gather_refer_hrt_to_decision_maker 
 where `_removed`.`toDoProperties`.`type`='DATA_GATHER_REFER_HRT_TO_DECISION_MAKER' or `toDoProperties`.`type`='DATA_GATHER_REFER_HRT_TO_DECISION_MAKER';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_MAKE_A_PAYMENT_TODO_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_make_a_payment_todo_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_make_a_payment_todo_properties(
`toDoProperties` STRUCT<`schedulingProperties`:STRUCT<`amount`:STRING
,`netAmount`:STRING
,`orderNumber`:STRING
,`paymentDueDate`:STRING
,`scheduledPaymentsId`:STRING
,`totalPaymentCount`:STRING>
,`assessmentPeriodId`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`schedulingProperties`:STRUCT<`amount`:STRING
,`netAmount`:STRING
,`orderNumber`:STRING
,`paymentDueDate`:STRING
,`scheduledPaymentsId`:STRING
,`totalPaymentCount`:STRING>
,`assessmentPeriodId`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_MAKE_A_PAYMENT_TODO_PROPERTIES;

CREATE TABLE agent_todo_archive_make_a_payment_todo_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`assessmentPeriodId`, `toDoProperties`.`assessmentPeriodId`) as toDoProperties_assessmentPeriodId, 
COALESCE(`_removed`.`toDoProperties`.`schedulingProperties`.`amount`, `toDoProperties`.`schedulingProperties`.`amount`) as toDoProperties_schedulingProperties_amount, 
COALESCE(`_removed`.`toDoProperties`.`schedulingProperties`.`netAmount`, `toDoProperties`.`schedulingProperties`.`netAmount`) as toDoProperties_schedulingProperties_netAmount, 
COALESCE(`_removed`.`toDoProperties`.`schedulingProperties`.`orderNumber`, `toDoProperties`.`schedulingProperties`.`orderNumber`) as toDoProperties_schedulingProperties_orderNumber, 
COALESCE(`_removed`.`toDoProperties`.`schedulingProperties`.`paymentDueDate`, `toDoProperties`.`schedulingProperties`.`paymentDueDate`) as toDoProperties_schedulingProperties_paymentDueDate, 
COALESCE(`_removed`.`toDoProperties`.`schedulingProperties`.`scheduledPaymentsId`, `toDoProperties`.`schedulingProperties`.`scheduledPaymentsId`) as toDoProperties_schedulingProperties_scheduledPaymentsId, 
COALESCE(`_removed`.`toDoProperties`.`schedulingProperties`.`totalPaymentCount`, `toDoProperties`.`schedulingProperties`.`totalPaymentCount`) as toDoProperties_schedulingProperties_totalPaymentCount, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_make_a_payment_todo_properties
 src_agent_core_agenttodoarchive_agent_todo_archive_make_a_payment_todo_properties 
 where `_removed`.`toDoProperties`.`type`='MAKE_A_PAYMENT_TODO_PROPERTIES' or `toDoProperties`.`type`='MAKE_A_PAYMENT_TODO_PROPERTIES';


!echo ------------------------;
!echo ------------------------ todo_HAVE_A_LOOK_TODO_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_todo_todo_have_a_look_todo_properties
;

CREATE EXTERNAL TABLE src_core_todo_todo_have_a_look_todo_properties(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`properties` STRUCT<`agentNotes`:STRING
,`interventionRef`:STRING
,`interventionType`:STRING
,`interventionVisited`:BOOLEAN
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`properties`:STRUCT<`agentNotes`:STRING
,`interventionRef`:STRING
,`interventionType`:STRING
,`interventionVisited`:BOOLEAN
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/toDo';

DROP TABLE IF EXISTS todo_HAVE_A_LOOK_TODO_PROPERTIES;

CREATE TABLE todo_have_a_look_todo_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`properties`.`agentNotes`, `properties`.`agentNotes`) as properties_agentNotes, 
COALESCE(`_removed`.`properties`.`interventionRef`, `properties`.`interventionRef`) as properties_interventionRef, 
COALESCE(`_removed`.`properties`.`interventionType`, `properties`.`interventionType`) as properties_interventionType, 
COALESCE(CAST(`_removed`.`properties`.`interventionVisited` as STRING), CAST(`properties`.`interventionVisited` as STRING)) as properties_interventionVisited, 
COALESCE(`_removed`.`properties`.`type`, `properties`.`type`) as properties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_core_todo_todo_have_a_look_todo_properties
 src_core_todo_todo_have_a_look_todo_properties 
 where `_removed`.`properties`.`type`='HAVE_A_LOOK_TODO_PROPERTIES' or `properties`.`type`='HAVE_A_LOOK_TODO_PROPERTIES';


!echo ------------------------;
!echo ------------------------ claimant_commitment_MEDIUM-V2;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_claimantcommitment_claimant_commitment_medium_v2
;

CREATE EXTERNAL TABLE src_core_claimantcommitment_claimant_commitment_medium_v2(
`properties` STRUCT<`activities`:ARRAY<STRUCT<`reviewDate`:STRING
,`shortDescription`:STRING
>>
,`jobs`:ARRAY<STRING>
,`workPreparationAndSearchSwitchedOff`:BOOLEAN
,`workSectionSwitchedOff`:BOOLEAN
,`claimantCommitmentVersion`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`contractId`:STRING
,`claimantId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`properties`:STRUCT<`activities`:ARRAY<STRUCT<`reviewDate`:STRING
,`shortDescription`:STRING
>>
,`jobs`:ARRAY<STRING>
,`workPreparationAndSearchSwitchedOff`:BOOLEAN
,`workSectionSwitchedOff`:BOOLEAN
,`claimantCommitmentVersion`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`contractId`:STRING
,`claimantId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/claimantCommitment';

DROP TABLE IF EXISTS claimant_commitment_MEDIUM-V2;

CREATE TABLE claimant_commitment_medium_v2 STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`removed_exploded_properties_activities`.`reviewDate`, `exploded_properties_activities`.`reviewDate`) as properties_activities_reviewDate, 
COALESCE(`removed_exploded_properties_activities`.`shortDescription`, `exploded_properties_activities`.`shortDescription`) as properties_activities_shortDescription, 
COALESCE(`removed_exploded_properties_jobs`, `exploded_properties_jobs`) as properties_jobs, 
COALESCE(CAST(`_removed`.`properties`.`workPreparationAndSearchSwitchedOff` as STRING), CAST(`properties`.`workPreparationAndSearchSwitchedOff` as STRING)) as properties_workPreparationAndSearchSwitchedOff, 
COALESCE(CAST(`_removed`.`properties`.`workSectionSwitchedOff` as STRING), CAST(`properties`.`workSectionSwitchedOff` as STRING)) as properties_workSectionSwitchedOff, 
COALESCE(`_removed`.`properties`.`claimantCommitmentVersion`, `properties`.`claimantCommitmentVersion`) as properties_claimantCommitmentVersion, 
COALESCE(`_removed`.`properties`.`type`, `properties`.`type`) as properties_type, 
COALESCE(`_removed`.`_id`.`contractId`, `_id`.`contractId`) as contractId, 
COALESCE(`_removed`.`_id`.`claimantId`, `_id`.`claimantId`) as claimantId FROM src_core_claimantcommitment_claimant_commitment_medium_v2
 LATERAL VIEW OUTER EXPLODE(`properties`.`activities`) view_exploded_properties_activities AS exploded_properties_activities 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`properties`.`activities`) view_removed_exploded_properties_activities AS removed_exploded_properties_activities 
 LATERAL VIEW OUTER EXPLODE(`properties`.`jobs`) view_exploded_properties_jobs AS exploded_properties_jobs 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`properties`.`jobs`) view_removed_exploded_properties_jobs AS removed_exploded_properties_jobs 
 
 where `_removed`.`properties`.`type`='MEDIUM-V2' or `properties`.`type`='MEDIUM-V2';


!echo ------------------------;
!echo ------------------------ agent_todo_RECORD_IN_WORK_PROGRESSION;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_record_in_work_progression
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_record_in_work_progression(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`pilotGroup`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`pilotGroup`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_RECORD_IN_WORK_PROGRESSION;

CREATE TABLE agent_todo_record_in_work_progression STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`pilotGroup`, `toDoProperties`.`pilotGroup`) as toDoProperties_pilotGroup, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_record_in_work_progression
 src_agent_core_agenttodo_agent_todo_record_in_work_progression 
 where `_removed`.`toDoProperties`.`type`='RECORD_IN_WORK_PROGRESSION' or `toDoProperties`.`type`='RECORD_IN_WORK_PROGRESSION';


!echo ------------------------;
!echo ------------------------ agent_todo_NEW_RELATIONSHIP;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_new_relationship
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_new_relationship(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`message`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`message`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_NEW_RELATIONSHIP;

CREATE TABLE agent_todo_new_relationship STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`message`, `toDoProperties`.`message`) as toDoProperties_message, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_new_relationship
 src_agent_core_agenttodo_agent_todo_new_relationship 
 where `_removed`.`toDoProperties`.`type`='NEW_RELATIONSHIP' or `toDoProperties`.`type`='NEW_RELATIONSHIP';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_APA_CREATE;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_apa_create
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_apa_create(
`toDoProperties` STRUCT<`portalCreateProperties`:STRUCT<`applyingFor`:ARRAY<STRING>
,`tier1Reasons`:ARRAY<STRING>
,`tier2Reasons`:ARRAY<STRING>
,`arrearsAmount`:STRING
,`contactEmailAddress`:STRING
,`contactPhoneNumber`:STRING
,`creditorReferenceNumber`:STRING
,`discussedWithClaimant`:BOOLEAN
,`tenancyAgreementId`:STRING
,`tenancyReferenceNumber`:STRING>
,`reasons`:STRING
,`region`:STRING
,`whoRequested`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`portalCreateProperties`:STRUCT<`applyingFor`:ARRAY<STRING>
,`tier1Reasons`:ARRAY<STRING>
,`tier2Reasons`:ARRAY<STRING>
,`arrearsAmount`:STRING
,`contactEmailAddress`:STRING
,`contactPhoneNumber`:STRING
,`creditorReferenceNumber`:STRING
,`discussedWithClaimant`:BOOLEAN
,`tenancyAgreementId`:STRING
,`tenancyReferenceNumber`:STRING>
,`reasons`:STRING
,`region`:STRING
,`whoRequested`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_APA_CREATE;

CREATE TABLE agent_todo_archive_apa_create STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`removed_exploded_todoproperties_portalcreateproperties_applyingfor`, `exploded_todoproperties_portalcreateproperties_applyingfor`) as toDoProperties_portalCreateProperties_applyingFor, 
COALESCE(`_removed`.`toDoProperties`.`portalCreateProperties`.`arrearsAmount`, `toDoProperties`.`portalCreateProperties`.`arrearsAmount`) as toDoProperties_portalCreateProperties_arrearsAmount, 
COALESCE(`_removed`.`toDoProperties`.`portalCreateProperties`.`contactEmailAddress`, `toDoProperties`.`portalCreateProperties`.`contactEmailAddress`) as toDoProperties_portalCreateProperties_contactEmailAddress, 
COALESCE(`_removed`.`toDoProperties`.`portalCreateProperties`.`contactPhoneNumber`, `toDoProperties`.`portalCreateProperties`.`contactPhoneNumber`) as toDoProperties_portalCreateProperties_contactPhoneNumber, 
COALESCE(`_removed`.`toDoProperties`.`portalCreateProperties`.`creditorReferenceNumber`, `toDoProperties`.`portalCreateProperties`.`creditorReferenceNumber`) as toDoProperties_portalCreateProperties_creditorReferenceNumber, 
COALESCE(CAST(`_removed`.`toDoProperties`.`portalCreateProperties`.`discussedWithClaimant` as STRING), CAST(`toDoProperties`.`portalCreateProperties`.`discussedWithClaimant` as STRING)) as toDoProperties_portalCreateProperties_discussedWithClaimant, 
COALESCE(`_removed`.`toDoProperties`.`portalCreateProperties`.`tenancyAgreementId`, `toDoProperties`.`portalCreateProperties`.`tenancyAgreementId`) as toDoProperties_portalCreateProperties_tenancyAgreementId, 
COALESCE(`_removed`.`toDoProperties`.`portalCreateProperties`.`tenancyReferenceNumber`, `toDoProperties`.`portalCreateProperties`.`tenancyReferenceNumber`) as toDoProperties_portalCreateProperties_tenancyReferenceNumber, 
COALESCE(`removed_exploded_todoproperties_portalcreateproperties_tier1reasons`, `exploded_todoproperties_portalcreateproperties_tier1reasons`) as toDoProperties_portalCreateProperties_tier1Reasons, 
COALESCE(`removed_exploded_todoproperties_portalcreateproperties_tier2reasons`, `exploded_todoproperties_portalcreateproperties_tier2reasons`) as toDoProperties_portalCreateProperties_tier2Reasons, 
COALESCE(`_removed`.`toDoProperties`.`reasons`, `toDoProperties`.`reasons`) as toDoProperties_reasons, 
COALESCE(`_removed`.`toDoProperties`.`region`, `toDoProperties`.`region`) as toDoProperties_region, 
COALESCE(`_removed`.`toDoProperties`.`whoRequested`, `toDoProperties`.`whoRequested`) as toDoProperties_whoRequested, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_apa_create
 LATERAL VIEW OUTER EXPLODE(`toDoProperties`.`portalCreateProperties`.`applyingFor`) view_exploded_todoproperties_portalcreateproperties_applyingfor AS exploded_todoproperties_portalcreateproperties_applyingfor 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`toDoProperties`.`portalCreateProperties`.`applyingFor`) view_removed_exploded_todoproperties_portalcreateproperties_applyingfor AS removed_exploded_todoproperties_portalcreateproperties_applyingfor 
 LATERAL VIEW OUTER EXPLODE(`toDoProperties`.`portalCreateProperties`.`tier1Reasons`) view_exploded_todoproperties_portalcreateproperties_tier1reasons AS exploded_todoproperties_portalcreateproperties_tier1reasons 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`toDoProperties`.`portalCreateProperties`.`tier1Reasons`) view_removed_exploded_todoproperties_portalcreateproperties_tier1reasons AS removed_exploded_todoproperties_portalcreateproperties_tier1reasons 
 LATERAL VIEW OUTER EXPLODE(`toDoProperties`.`portalCreateProperties`.`tier2Reasons`) view_exploded_todoproperties_portalcreateproperties_tier2reasons AS exploded_todoproperties_portalcreateproperties_tier2reasons 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`toDoProperties`.`portalCreateProperties`.`tier2Reasons`) view_removed_exploded_todoproperties_portalcreateproperties_tier2reasons AS removed_exploded_todoproperties_portalcreateproperties_tier2reasons 
 
 where `_removed`.`toDoProperties`.`type`='APA_CREATE' or `toDoProperties`.`type`='APA_CREATE';


!echo ------------------------;
!echo ------------------------ agent_todo_CHECK_WORKGROUP_AND_COMMITMENTS_FOR_PREGNANCY;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_check_workgroup_and_commitments_for_pregnancy
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_check_workgroup_and_commitments_for_pregnancy(
`toDoProperties` STRUCT<`pregnancyDueDateDetails`:STRUCT<`dueDate`:STRING>
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`pregnancyDueDateDetails`:STRUCT<`dueDate`:STRING>
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_CHECK_WORKGROUP_AND_COMMITMENTS_FOR_PREGNANCY;

CREATE TABLE agent_todo_check_workgroup_and_commitments_for_pregnancy STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`pregnancyDueDateDetails`.`dueDate`, `toDoProperties`.`pregnancyDueDateDetails`.`dueDate`) as toDoProperties_pregnancyDueDateDetails_dueDate, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_check_workgroup_and_commitments_for_pregnancy
 src_agent_core_agenttodo_agent_todo_check_workgroup_and_commitments_for_pregnancy 
 where `_removed`.`toDoProperties`.`type`='CHECK_WORKGROUP_AND_COMMITMENTS_FOR_PREGNANCY' or `toDoProperties`.`type`='CHECK_WORKGROUP_AND_COMMITMENTS_FOR_PREGNANCY';


!echo ------------------------;
!echo ------------------------ claimant_commitment;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_claimantcommitment_claimant_commitment
;

CREATE EXTERNAL TABLE src_core_claimantcommitment_claimant_commitment(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`completedDateTime` STRUCT<`d_date`:STRING>
,`properties` STRUCT<`claimantCommitmentVersion`:STRING>
,`_id` STRUCT<`contractId`:STRING
,`claimantId`:STRING>
,`_version` STRING
,`claimantId` STRING
,`contractId` STRING
,`readAboutReducedPaymentsJournalId` STRING
,`toDoId` STRING
,`workGroup` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`completedDateTime`:STRUCT<`d_date`:STRING>
,`properties`:STRUCT<`claimantCommitmentVersion`:STRING>
,`_id`:STRUCT<`contractId`:STRING
,`claimantId`:STRING>
,`_version`:STRING
,`claimantId`:STRING
,`contractId`:STRING
,`readAboutReducedPaymentsJournalId`:STRING
,`toDoId`:STRING
,`workGroup`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/claimantCommitment';

DROP TABLE IF EXISTS claimant_commitment;

CREATE TABLE claimant_commitment STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, COALESCE(
COALESCE(`_removed`.`claimantId`, `claimantId`), 
COALESCE(`_removed`.`_id`.`claimantId`, `_id`.`claimantId`)) as claimantId, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`completedDateTime`.`d_date`, LENGTH(`_removed`.`completedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`completedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`completedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`completedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`completedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`completedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`completedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`completedDateTime`.`d_date`, LENGTH(`completedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`completedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`completedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`completedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`completedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`completedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`completedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as completedDateTime_d_date, COALESCE(
COALESCE(`_removed`.`contractId`, `contractId`), 
COALESCE(`_removed`.`_id`.`contractId`, `_id`.`contractId`)) as contractId, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as createdDateTime_d_date, 
COALESCE(`_removed`.`properties`.`claimantCommitmentVersion`, `properties`.`claimantCommitmentVersion`) as properties_claimantCommitmentVersion, 
COALESCE(`_removed`.`readAboutReducedPaymentsJournalId`, `readAboutReducedPaymentsJournalId`) as readAboutReducedPaymentsJournalId, 
COALESCE(`_removed`.`toDoId`, `toDoId`) as toDoId, 
COALESCE(`_removed`.`workGroup`, `workGroup`) as workGroup FROM src_core_claimantcommitment_claimant_commitment
 src_core_claimantcommitment_claimant_commitment;


!echo ------------------------;
!echo ------------------------ agent_todo_archive_TIME_OFF_CARING;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_time_off_caring
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_time_off_caring(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`endDate`:STRING
,`personCaredForName`:STRING
,`startDate`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`endDate`:STRING
,`personCaredForName`:STRING
,`startDate`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_TIME_OFF_CARING;

CREATE TABLE agent_todo_archive_time_off_caring STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`endDate`, `toDoProperties`.`endDate`) as toDoProperties_endDate, 
COALESCE(`_removed`.`toDoProperties`.`personCaredForName`, `toDoProperties`.`personCaredForName`) as toDoProperties_personCaredForName, 
COALESCE(`_removed`.`toDoProperties`.`startDate`, `toDoProperties`.`startDate`) as toDoProperties_startDate, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_time_off_caring
 src_agent_core_agenttodoarchive_agent_todo_archive_time_off_caring 
 where `_removed`.`toDoProperties`.`type`='TIME_OFF_CARING' or `toDoProperties`.`type`='TIME_OFF_CARING';


!echo ------------------------;
!echo ------------------------ agent_todo_PERSON_SUMMARY;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_person_summary
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_person_summary(
`toDoProperties` STRUCT<`personSummary`:STRUCT<`effectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`contactPreference`:STRING
,`contractId`:STRING
,`emailAddress`:STRING
,`firstName`:STRING
,`lastName`:STRING
,`middleName`:STRING
,`mobileNumber`:STRING
,`name`:STRING
,`processId`:STRING
,`claimantId`:STRING
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`personSummary`:STRUCT<`effectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`contactPreference`:STRING
,`contractId`:STRING
,`emailAddress`:STRING
,`firstName`:STRING
,`lastName`:STRING
,`middleName`:STRING
,`mobileNumber`:STRING
,`name`:STRING
,`processId`:STRING
,`claimantId`:STRING
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_PERSON_SUMMARY;

CREATE TABLE agent_todo_person_summary STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`personSummary`.`contactPreference`, `toDoProperties`.`personSummary`.`contactPreference`) as toDoProperties_personSummary_contactPreference, 
COALESCE(`_removed`.`toDoProperties`.`personSummary`.`contractId`, `toDoProperties`.`personSummary`.`contractId`) as toDoProperties_personSummary_contractId, 
COALESCE(CAST(`_removed`.`toDoProperties`.`personSummary`.`effectiveDate`.`hasDate` as STRING), CAST(`toDoProperties`.`personSummary`.`effectiveDate`.`hasDate` as STRING)) as toDoProperties_personSummary_effectiveDate_hasDate, 
COALESCE(`_removed`.`toDoProperties`.`personSummary`.`effectiveDate`.`knownDate`, `toDoProperties`.`personSummary`.`effectiveDate`.`knownDate`) as toDoProperties_personSummary_effectiveDate_knownDate, 
COALESCE(`_removed`.`toDoProperties`.`personSummary`.`effectiveDate`.`type`, `toDoProperties`.`personSummary`.`effectiveDate`.`type`) as toDoProperties_personSummary_effectiveDate_type, 
COALESCE(`_removed`.`toDoProperties`.`personSummary`.`effectiveDate`.`date`, `toDoProperties`.`personSummary`.`effectiveDate`.`date`) as toDoProperties_personSummary_effectiveDate_date, 
COALESCE(`_removed`.`toDoProperties`.`personSummary`.`emailAddress`, `toDoProperties`.`personSummary`.`emailAddress`) as toDoProperties_personSummary_emailAddress, 
COALESCE(`_removed`.`toDoProperties`.`personSummary`.`firstName`, `toDoProperties`.`personSummary`.`firstName`) as toDoProperties_personSummary_firstName, 
COALESCE(`_removed`.`toDoProperties`.`personSummary`.`lastName`, `toDoProperties`.`personSummary`.`lastName`) as toDoProperties_personSummary_lastName, 
COALESCE(`_removed`.`toDoProperties`.`personSummary`.`middleName`, `toDoProperties`.`personSummary`.`middleName`) as toDoProperties_personSummary_middleName, 
COALESCE(`_removed`.`toDoProperties`.`personSummary`.`mobileNumber`, `toDoProperties`.`personSummary`.`mobileNumber`) as toDoProperties_personSummary_mobileNumber, 
COALESCE(`_removed`.`toDoProperties`.`personSummary`.`name`, `toDoProperties`.`personSummary`.`name`) as toDoProperties_personSummary_name, 
COALESCE(CAST(`_removed`.`toDoProperties`.`personSummary`.`paymentEffectiveDate`.`hasDate` as STRING), CAST(`toDoProperties`.`personSummary`.`paymentEffectiveDate`.`hasDate` as STRING)) as toDoProperties_personSummary_paymentEffectiveDate_hasDate, 
COALESCE(`_removed`.`toDoProperties`.`personSummary`.`paymentEffectiveDate`.`knownDate`, `toDoProperties`.`personSummary`.`paymentEffectiveDate`.`knownDate`) as toDoProperties_personSummary_paymentEffectiveDate_knownDate, 
COALESCE(`_removed`.`toDoProperties`.`personSummary`.`paymentEffectiveDate`.`type`, `toDoProperties`.`personSummary`.`paymentEffectiveDate`.`type`) as toDoProperties_personSummary_paymentEffectiveDate_type, 
COALESCE(`_removed`.`toDoProperties`.`personSummary`.`paymentEffectiveDate`.`date`, `toDoProperties`.`personSummary`.`paymentEffectiveDate`.`date`) as toDoProperties_personSummary_paymentEffectiveDate_date, 
COALESCE(`_removed`.`toDoProperties`.`personSummary`.`processId`, `toDoProperties`.`personSummary`.`processId`) as toDoProperties_personSummary_processId, 
COALESCE(`_removed`.`toDoProperties`.`personSummary`.`claimantId`, `toDoProperties`.`personSummary`.`claimantId`) as toDoProperties_personSummary_claimantId, 
COALESCE(CAST(`_removed`.`toDoProperties`.`personSummary`.`confirmationRequired` as STRING), CAST(`toDoProperties`.`personSummary`.`confirmationRequired` as STRING)) as toDoProperties_personSummary_confirmationRequired, 
COALESCE(CAST(`_removed`.`toDoProperties`.`personSummary`.`hideDetailsForPartnerDeclaration` as STRING), CAST(`toDoProperties`.`personSummary`.`hideDetailsForPartnerDeclaration` as STRING)) as toDoProperties_personSummary_hideDetailsForPartnerDeclaration, 
COALESCE(CAST(`_removed`.`toDoProperties`.`personSummary`.`perClaimant` as STRING), CAST(`toDoProperties`.`personSummary`.`perClaimant` as STRING)) as toDoProperties_personSummary_perClaimant, 
COALESCE(`_removed`.`toDoProperties`.`personSummary`.`type`, `toDoProperties`.`personSummary`.`type`) as toDoProperties_personSummary_type, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_person_summary
 src_agent_core_agenttodo_agent_todo_person_summary 
 where `_removed`.`toDoProperties`.`type`='PERSON_SUMMARY' or `toDoProperties`.`type`='PERSON_SUMMARY';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_RECORD_IN_WORK_PROGRESSION;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_record_in_work_progression
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_record_in_work_progression(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`pilotGroup`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`pilotGroup`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_RECORD_IN_WORK_PROGRESSION;

CREATE TABLE agent_todo_archive_record_in_work_progression STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`pilotGroup`, `toDoProperties`.`pilotGroup`) as toDoProperties_pilotGroup, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_record_in_work_progression
 src_agent_core_agenttodoarchive_agent_todo_archive_record_in_work_progression 
 where `_removed`.`toDoProperties`.`type`='RECORD_IN_WORK_PROGRESSION' or `toDoProperties`.`type`='RECORD_IN_WORK_PROGRESSION';


!echo ------------------------;
!echo ------------------------ agent_todo_VERIFY_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_verify_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_verify_properties(
`toDoProperties` STRUCT<`dateOfSummaryChange`:STRUCT<`d_date`:STRING>
,`declarationId`:STRING
,`processId`:STRING
,`summaryUpdatedBy`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`dateOfSummaryChange`:STRUCT<`d_date`:STRING>
,`declarationId`:STRING
,`processId`:STRING
,`summaryUpdatedBy`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_VERIFY_PROPERTIES;

CREATE TABLE agent_todo_verify_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, LENGTH(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`toDoProperties`.`dateOfSummaryChange`.`d_date`, LENGTH(`toDoProperties`.`dateOfSummaryChange`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`toDoProperties`.`dateOfSummaryChange`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`dateOfSummaryChange`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`toDoProperties`.`dateOfSummaryChange`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`dateOfSummaryChange`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`toDoProperties`.`dateOfSummaryChange`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`toDoProperties`.`dateOfSummaryChange`.`d_date`, 21, 3)) AS TIMESTAMP) END) as toDoProperties_dateOfSummaryChange_d_date, 
COALESCE(`_removed`.`toDoProperties`.`declarationId`, `toDoProperties`.`declarationId`) as toDoProperties_declarationId, 
COALESCE(`_removed`.`toDoProperties`.`processId`, `toDoProperties`.`processId`) as toDoProperties_processId, 
COALESCE(`_removed`.`toDoProperties`.`summaryUpdatedBy`, `toDoProperties`.`summaryUpdatedBy`) as toDoProperties_summaryUpdatedBy, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_verify_properties
 src_agent_core_agenttodo_agent_todo_verify_properties 
 where `_removed`.`toDoProperties`.`type`='VERIFY_PROPERTIES' or `toDoProperties`.`type`='VERIFY_PROPERTIES';


!echo ------------------------;
!echo ------------------------ journal_ucFraudPenaltyRemovedJournalEntry;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_journal_journal_ucfraudpenaltyremovedjournalentry
;

CREATE EXTERNAL TABLE src_core_journal_journal_ucfraudpenaltyremovedjournalentry(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`journalEntryProperties` STRUCT<`convictionDate`:STRING
,`determinationDate`:STRING
,`durationInDays`:STRING
,`type`:STRING>
,`_id` STRUCT<`journalId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`journalEntryProperties`:STRUCT<`convictionDate`:STRING
,`determinationDate`:STRING
,`durationInDays`:STRING
,`type`:STRING>
,`_id`:STRUCT<`journalId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/journal';

DROP TABLE IF EXISTS journal_ucFraudPenaltyRemovedJournalEntry;

CREATE TABLE journal_ucfraudpenaltyremovedjournalentry STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`journalEntryProperties`.`convictionDate`, `journalEntryProperties`.`convictionDate`) as journalEntryProperties_convictionDate, 
COALESCE(`_removed`.`journalEntryProperties`.`determinationDate`, `journalEntryProperties`.`determinationDate`) as journalEntryProperties_determinationDate, 
COALESCE(`_removed`.`journalEntryProperties`.`durationInDays`, `journalEntryProperties`.`durationInDays`) as journalEntryProperties_durationInDays, 
COALESCE(`_removed`.`journalEntryProperties`.`type`, `journalEntryProperties`.`type`) as journalEntryProperties_type, 
COALESCE(`_removed`.`_id`.`journalId`, `_id`.`journalId`) as id FROM src_core_journal_journal_ucfraudpenaltyremovedjournalentry
 src_core_journal_journal_ucfraudpenaltyremovedjournalentry 
 where `_removed`.`journalEntryProperties`.`type`='ucFraudPenaltyRemovedJournalEntry' or `journalEntryProperties`.`type`='ucFraudPenaltyRemovedJournalEntry';


!echo ------------------------;
!echo ------------------------ agent_todo_REJECTED_CARING;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_rejected_caring
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_rejected_caring(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`decisionNotes`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`decisionNotes`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_REJECTED_CARING;

CREATE TABLE agent_todo_rejected_caring STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`decisionNotes`, `toDoProperties`.`decisionNotes`) as toDoProperties_decisionNotes, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_rejected_caring
 src_agent_core_agenttodo_agent_todo_rejected_caring 
 where `_removed`.`toDoProperties`.`type`='REJECTED_CARING' or `toDoProperties`.`type`='REJECTED_CARING';


!echo ------------------------;
!echo ------------------------ agent_todo_STARTED_CARING;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_started_caring
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_started_caring(
`toDoProperties` STRUCT<`carerSummary`:STRUCT<`caringCircumstancesSummary`:STRUCT<`caringForSomeone`:BOOLEAN
,`personReceivesBenefit`:BOOLEAN>
,`claimantDeclaredChanges`:STRUCT<`d_date`:STRING>
,`dateOfChange`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`otherCaringResponsibilitiesSummary`:STRUCT<`caringForSomeoneElse`:BOOLEAN
,`personReceivesBenefit`:BOOLEAN>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`stoppedCaringCircumstancesSummary`:STRUCT<`dateStoppedCaring`:STRING
,`dueToDeath`:BOOLEAN>
,`timeOffCircumstancesSummary`:STRUCT<`endDate`:STRING
,`startDate`:STRING>
,`whoYouCareForCircumstancesSummary`:STRUCT<`addressNumber`:STRING
,`dateOfBirth`:STRING
,`firstName`:STRING
,`lastName`:STRING
,`middleName`:STRING
,`postcode`:STRING
,`relationship`:STRING
,`townCity`:STRING>
,`claimantId`:STRING
,`contractId`:STRING
,`moreThan35Hours`:BOOLEAN
,`name`:STRING
,`processId`:STRING
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`carerSummary`:STRUCT<`caringCircumstancesSummary`:STRUCT<`caringForSomeone`:BOOLEAN
,`personReceivesBenefit`:BOOLEAN>
,`claimantDeclaredChanges`:STRUCT<`d_date`:STRING>
,`dateOfChange`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`otherCaringResponsibilitiesSummary`:STRUCT<`caringForSomeoneElse`:BOOLEAN
,`personReceivesBenefit`:BOOLEAN>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`stoppedCaringCircumstancesSummary`:STRUCT<`dateStoppedCaring`:STRING
,`dueToDeath`:BOOLEAN>
,`timeOffCircumstancesSummary`:STRUCT<`endDate`:STRING
,`startDate`:STRING>
,`whoYouCareForCircumstancesSummary`:STRUCT<`addressNumber`:STRING
,`dateOfBirth`:STRING
,`firstName`:STRING
,`lastName`:STRING
,`middleName`:STRING
,`postcode`:STRING
,`relationship`:STRING
,`townCity`:STRING>
,`claimantId`:STRING
,`contractId`:STRING
,`moreThan35Hours`:BOOLEAN
,`name`:STRING
,`processId`:STRING
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_STARTED_CARING;

CREATE TABLE agent_todo_started_caring STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(CAST(`_removed`.`toDoProperties`.`carerSummary`.`caringCircumstancesSummary`.`caringForSomeone` as STRING), CAST(`toDoProperties`.`carerSummary`.`caringCircumstancesSummary`.`caringForSomeone` as STRING)) as toDoProperties_carerSummary_caringCircumstancesSummary_caringForSomeone, 
COALESCE(CAST(`_removed`.`toDoProperties`.`carerSummary`.`caringCircumstancesSummary`.`personReceivesBenefit` as STRING), CAST(`toDoProperties`.`carerSummary`.`caringCircumstancesSummary`.`personReceivesBenefit` as STRING)) as toDoProperties_carerSummary_caringCircumstancesSummary_personReceivesBenefit, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`toDoProperties`.`carerSummary`.`claimantDeclaredChanges`.`d_date`, LENGTH(`_removed`.`toDoProperties`.`carerSummary`.`claimantDeclaredChanges`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`carerSummary`.`claimantDeclaredChanges`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`carerSummary`.`claimantDeclaredChanges`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`carerSummary`.`claimantDeclaredChanges`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`carerSummary`.`claimantDeclaredChanges`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`toDoProperties`.`carerSummary`.`claimantDeclaredChanges`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`toDoProperties`.`carerSummary`.`claimantDeclaredChanges`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`toDoProperties`.`carerSummary`.`claimantDeclaredChanges`.`d_date`, LENGTH(`toDoProperties`.`carerSummary`.`claimantDeclaredChanges`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`toDoProperties`.`carerSummary`.`claimantDeclaredChanges`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`carerSummary`.`claimantDeclaredChanges`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`toDoProperties`.`carerSummary`.`claimantDeclaredChanges`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`carerSummary`.`claimantDeclaredChanges`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`toDoProperties`.`carerSummary`.`claimantDeclaredChanges`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`toDoProperties`.`carerSummary`.`claimantDeclaredChanges`.`d_date`, 21, 3)) AS TIMESTAMP) END) as toDoProperties_carerSummary_claimantDeclaredChanges_d_date, 
COALESCE(`_removed`.`toDoProperties`.`carerSummary`.`claimantId`, `toDoProperties`.`carerSummary`.`claimantId`) as toDoProperties_carerSummary_claimantId, 
COALESCE(`_removed`.`toDoProperties`.`carerSummary`.`contractId`, `toDoProperties`.`carerSummary`.`contractId`) as toDoProperties_carerSummary_contractId, 
COALESCE(CAST(`_removed`.`toDoProperties`.`carerSummary`.`dateOfChange`.`hasDate` as STRING), CAST(`toDoProperties`.`carerSummary`.`dateOfChange`.`hasDate` as STRING)) as toDoProperties_carerSummary_dateOfChange_hasDate, 
COALESCE(`_removed`.`toDoProperties`.`carerSummary`.`dateOfChange`.`knownDate`, `toDoProperties`.`carerSummary`.`dateOfChange`.`knownDate`) as toDoProperties_carerSummary_dateOfChange_knownDate, 
COALESCE(`_removed`.`toDoProperties`.`carerSummary`.`dateOfChange`.`type`, `toDoProperties`.`carerSummary`.`dateOfChange`.`type`) as toDoProperties_carerSummary_dateOfChange_type, 
COALESCE(`_removed`.`toDoProperties`.`carerSummary`.`dateOfChange`.`date`, `toDoProperties`.`carerSummary`.`dateOfChange`.`date`) as toDoProperties_carerSummary_dateOfChange_date, 
COALESCE(CAST(`_removed`.`toDoProperties`.`carerSummary`.`moreThan35Hours` as STRING), CAST(`toDoProperties`.`carerSummary`.`moreThan35Hours` as STRING)) as toDoProperties_carerSummary_moreThan35Hours, 
COALESCE(`_removed`.`toDoProperties`.`carerSummary`.`name`, `toDoProperties`.`carerSummary`.`name`) as toDoProperties_carerSummary_name, 
COALESCE(CAST(`_removed`.`toDoProperties`.`carerSummary`.`otherCaringResponsibilitiesSummary`.`caringForSomeoneElse` as STRING), CAST(`toDoProperties`.`carerSummary`.`otherCaringResponsibilitiesSummary`.`caringForSomeoneElse` as STRING)) as toDoProperties_carerSummary_otherCaringResponsibilitiesSummary_caringForSomeoneElse, 
COALESCE(CAST(`_removed`.`toDoProperties`.`carerSummary`.`otherCaringResponsibilitiesSummary`.`personReceivesBenefit` as STRING), CAST(`toDoProperties`.`carerSummary`.`otherCaringResponsibilitiesSummary`.`personReceivesBenefit` as STRING)) as toDoProperties_carerSummary_otherCaringResponsibilitiesSummary_personReceivesBenefit, 
COALESCE(CAST(`_removed`.`toDoProperties`.`carerSummary`.`paymentEffectiveDate`.`hasDate` as STRING), CAST(`toDoProperties`.`carerSummary`.`paymentEffectiveDate`.`hasDate` as STRING)) as toDoProperties_carerSummary_paymentEffectiveDate_hasDate, 
COALESCE(`_removed`.`toDoProperties`.`carerSummary`.`paymentEffectiveDate`.`knownDate`, `toDoProperties`.`carerSummary`.`paymentEffectiveDate`.`knownDate`) as toDoProperties_carerSummary_paymentEffectiveDate_knownDate, 
COALESCE(`_removed`.`toDoProperties`.`carerSummary`.`paymentEffectiveDate`.`type`, `toDoProperties`.`carerSummary`.`paymentEffectiveDate`.`type`) as toDoProperties_carerSummary_paymentEffectiveDate_type, 
COALESCE(`_removed`.`toDoProperties`.`carerSummary`.`paymentEffectiveDate`.`date`, `toDoProperties`.`carerSummary`.`paymentEffectiveDate`.`date`) as toDoProperties_carerSummary_paymentEffectiveDate_date, 
COALESCE(`_removed`.`toDoProperties`.`carerSummary`.`processId`, `toDoProperties`.`carerSummary`.`processId`) as toDoProperties_carerSummary_processId, 
COALESCE(`_removed`.`toDoProperties`.`carerSummary`.`stoppedCaringCircumstancesSummary`.`dateStoppedCaring`, `toDoProperties`.`carerSummary`.`stoppedCaringCircumstancesSummary`.`dateStoppedCaring`) as toDoProperties_carerSummary_stoppedCaringCircumstancesSummary_dateStoppedCaring, 
COALESCE(CAST(`_removed`.`toDoProperties`.`carerSummary`.`stoppedCaringCircumstancesSummary`.`dueToDeath` as STRING), CAST(`toDoProperties`.`carerSummary`.`stoppedCaringCircumstancesSummary`.`dueToDeath` as STRING)) as toDoProperties_carerSummary_stoppedCaringCircumstancesSummary_dueToDeath, 
COALESCE(`_removed`.`toDoProperties`.`carerSummary`.`timeOffCircumstancesSummary`.`endDate`, `toDoProperties`.`carerSummary`.`timeOffCircumstancesSummary`.`endDate`) as toDoProperties_carerSummary_timeOffCircumstancesSummary_endDate, 
COALESCE(`_removed`.`toDoProperties`.`carerSummary`.`timeOffCircumstancesSummary`.`startDate`, `toDoProperties`.`carerSummary`.`timeOffCircumstancesSummary`.`startDate`) as toDoProperties_carerSummary_timeOffCircumstancesSummary_startDate, 
COALESCE(`_removed`.`toDoProperties`.`carerSummary`.`whoYouCareForCircumstancesSummary`.`addressNumber`, `toDoProperties`.`carerSummary`.`whoYouCareForCircumstancesSummary`.`addressNumber`) as toDoProperties_carerSummary_whoYouCareForCircumstancesSummary_addressNumber, 
COALESCE(`_removed`.`toDoProperties`.`carerSummary`.`whoYouCareForCircumstancesSummary`.`dateOfBirth`, `toDoProperties`.`carerSummary`.`whoYouCareForCircumstancesSummary`.`dateOfBirth`) as toDoProperties_carerSummary_whoYouCareForCircumstancesSummary_dateOfBirth, 
COALESCE(`_removed`.`toDoProperties`.`carerSummary`.`whoYouCareForCircumstancesSummary`.`firstName`, `toDoProperties`.`carerSummary`.`whoYouCareForCircumstancesSummary`.`firstName`) as toDoProperties_carerSummary_whoYouCareForCircumstancesSummary_firstName, 
COALESCE(`_removed`.`toDoProperties`.`carerSummary`.`whoYouCareForCircumstancesSummary`.`lastName`, `toDoProperties`.`carerSummary`.`whoYouCareForCircumstancesSummary`.`lastName`) as toDoProperties_carerSummary_whoYouCareForCircumstancesSummary_lastName, 
COALESCE(`_removed`.`toDoProperties`.`carerSummary`.`whoYouCareForCircumstancesSummary`.`middleName`, `toDoProperties`.`carerSummary`.`whoYouCareForCircumstancesSummary`.`middleName`) as toDoProperties_carerSummary_whoYouCareForCircumstancesSummary_middleName, 
COALESCE(`_removed`.`toDoProperties`.`carerSummary`.`whoYouCareForCircumstancesSummary`.`postcode`, `toDoProperties`.`carerSummary`.`whoYouCareForCircumstancesSummary`.`postcode`) as toDoProperties_carerSummary_whoYouCareForCircumstancesSummary_postcode, 
COALESCE(`_removed`.`toDoProperties`.`carerSummary`.`whoYouCareForCircumstancesSummary`.`relationship`, `toDoProperties`.`carerSummary`.`whoYouCareForCircumstancesSummary`.`relationship`) as toDoProperties_carerSummary_whoYouCareForCircumstancesSummary_relationship, 
COALESCE(`_removed`.`toDoProperties`.`carerSummary`.`whoYouCareForCircumstancesSummary`.`townCity`, `toDoProperties`.`carerSummary`.`whoYouCareForCircumstancesSummary`.`townCity`) as toDoProperties_carerSummary_whoYouCareForCircumstancesSummary_townCity, 
COALESCE(CAST(`_removed`.`toDoProperties`.`carerSummary`.`confirmationRequired` as STRING), CAST(`toDoProperties`.`carerSummary`.`confirmationRequired` as STRING)) as toDoProperties_carerSummary_confirmationRequired, 
COALESCE(CAST(`_removed`.`toDoProperties`.`carerSummary`.`hideDetailsForPartnerDeclaration` as STRING), CAST(`toDoProperties`.`carerSummary`.`hideDetailsForPartnerDeclaration` as STRING)) as toDoProperties_carerSummary_hideDetailsForPartnerDeclaration, 
COALESCE(CAST(`_removed`.`toDoProperties`.`carerSummary`.`perClaimant` as STRING), CAST(`toDoProperties`.`carerSummary`.`perClaimant` as STRING)) as toDoProperties_carerSummary_perClaimant, 
COALESCE(`_removed`.`toDoProperties`.`carerSummary`.`type`, `toDoProperties`.`carerSummary`.`type`) as toDoProperties_carerSummary_type, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_started_caring
 src_agent_core_agenttodo_agent_todo_started_caring 
 where `_removed`.`toDoProperties`.`type`='STARTED_CARING' or `toDoProperties`.`type`='STARTED_CARING';


!echo ------------------------;
!echo ------------------------ claimant_commitment_NONE;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_claimantcommitment_claimant_commitment_none
;

CREATE EXTERNAL TABLE src_core_claimantcommitment_claimant_commitment_none(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`properties` STRUCT<`commitment`:STRING
,`claimantCommitmentVersion`:STRING
,`type`:STRING>
,`_id` STRUCT<`contractId`:STRING
,`claimantId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`properties`:STRUCT<`commitment`:STRING
,`claimantCommitmentVersion`:STRING
,`type`:STRING>
,`_id`:STRUCT<`contractId`:STRING
,`claimantId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/claimantCommitment';

DROP TABLE IF EXISTS claimant_commitment_NONE;

CREATE TABLE claimant_commitment_none STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`properties`.`commitment`, `properties`.`commitment`) as properties_commitment, 
COALESCE(`_removed`.`properties`.`claimantCommitmentVersion`, `properties`.`claimantCommitmentVersion`) as properties_claimantCommitmentVersion, 
COALESCE(`_removed`.`properties`.`type`, `properties`.`type`) as properties_type, 
COALESCE(`_removed`.`_id`.`contractId`, `_id`.`contractId`) as contractId, 
COALESCE(`_removed`.`_id`.`claimantId`, `_id`.`claimantId`) as claimantId FROM src_core_claimantcommitment_claimant_commitment_none
 src_core_claimantcommitment_claimant_commitment_none 
 where `_removed`.`properties`.`type`='NONE' or `properties`.`type`='NONE';


!echo ------------------------;
!echo ------------------------ agent_todo_HRT_ENTITLEMENT_DECISION;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_hrt_entitlement_decision
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_hrt_entitlement_decision(
`toDoProperties` STRUCT<`attachmentSummary`:STRUCT<`updatedAt`:STRUCT<`d_date`:STRING>
,`fileName`:STRING
,`fileSize`:STRING
,`id`:STRING
,`revision`:STRING
,`updatedBy`:STRING>
,`person`:STRUCT<`declaredDateTime`:STRUCT<`d_date`:STRING>
,`effectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`citizenId`:STRING
,`contactPreference`:STRING
,`contractId`:STRING
,`email`:STRING
,`firstName`:STRING
,`gender`:STRING
,`lastName`:STRING
,`middleName`:STRING
,`mobileNumber`:STRING
,`sanitisedFirstName`:STRING
,`sanitisedLastName`:STRING
,`sanitisedMiddleName`:STRING
,`verifiedUsingBioQuestionsOrThirdParty`:BOOLEAN
,`verifiedWithNameDateOfBirthOrAddressChange`:BOOLEAN
,`type`:STRING>
,`notUkNational`:BOOLEAN
,`returnAfterAbsence`:BOOLEAN
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`attachmentSummary`:STRUCT<`updatedAt`:STRUCT<`d_date`:STRING>
,`fileName`:STRING
,`fileSize`:STRING
,`id`:STRING
,`revision`:STRING
,`updatedBy`:STRING>
,`person`:STRUCT<`declaredDateTime`:STRUCT<`d_date`:STRING>
,`effectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`citizenId`:STRING
,`contactPreference`:STRING
,`contractId`:STRING
,`email`:STRING
,`firstName`:STRING
,`gender`:STRING
,`lastName`:STRING
,`middleName`:STRING
,`mobileNumber`:STRING
,`sanitisedFirstName`:STRING
,`sanitisedLastName`:STRING
,`sanitisedMiddleName`:STRING
,`verifiedUsingBioQuestionsOrThirdParty`:BOOLEAN
,`verifiedWithNameDateOfBirthOrAddressChange`:BOOLEAN
,`type`:STRING>
,`notUkNational`:BOOLEAN
,`returnAfterAbsence`:BOOLEAN
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_HRT_ENTITLEMENT_DECISION;

CREATE TABLE agent_todo_hrt_entitlement_decision STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`attachmentSummary`.`fileName`, `toDoProperties`.`attachmentSummary`.`fileName`) as toDoProperties_attachmentSummary_fileName, 
COALESCE(`_removed`.`toDoProperties`.`attachmentSummary`.`fileSize`, `toDoProperties`.`attachmentSummary`.`fileSize`) as toDoProperties_attachmentSummary_fileSize, 
COALESCE(`_removed`.`toDoProperties`.`attachmentSummary`.`id`, `toDoProperties`.`attachmentSummary`.`id`) as toDoProperties_attachmentSummary_id, 
COALESCE(`_removed`.`toDoProperties`.`attachmentSummary`.`revision`, `toDoProperties`.`attachmentSummary`.`revision`) as toDoProperties_attachmentSummary_revision, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, LENGTH(`_removed`.`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, LENGTH(`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 21, 3)) AS TIMESTAMP) END) as toDoProperties_attachmentSummary_updatedAt_d_date, 
COALESCE(`_removed`.`toDoProperties`.`attachmentSummary`.`updatedBy`, `toDoProperties`.`attachmentSummary`.`updatedBy`) as toDoProperties_attachmentSummary_updatedBy, 
COALESCE(CAST(`_removed`.`toDoProperties`.`notUkNational` as STRING), CAST(`toDoProperties`.`notUkNational` as STRING)) as toDoProperties_notUkNational, 
COALESCE(`_removed`.`toDoProperties`.`person`.`citizenId`, `toDoProperties`.`person`.`citizenId`) as toDoProperties_person_citizenId, 
COALESCE(`_removed`.`toDoProperties`.`person`.`contactPreference`, `toDoProperties`.`person`.`contactPreference`) as toDoProperties_person_contactPreference, 
COALESCE(`_removed`.`toDoProperties`.`person`.`contractId`, `toDoProperties`.`person`.`contractId`) as toDoProperties_person_contractId, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`toDoProperties`.`person`.`declaredDateTime`.`d_date`, LENGTH(`_removed`.`toDoProperties`.`person`.`declaredDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`person`.`declaredDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`person`.`declaredDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`person`.`declaredDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`person`.`declaredDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`toDoProperties`.`person`.`declaredDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`toDoProperties`.`person`.`declaredDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`toDoProperties`.`person`.`declaredDateTime`.`d_date`, LENGTH(`toDoProperties`.`person`.`declaredDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`toDoProperties`.`person`.`declaredDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`person`.`declaredDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`toDoProperties`.`person`.`declaredDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`person`.`declaredDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`toDoProperties`.`person`.`declaredDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`toDoProperties`.`person`.`declaredDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as toDoProperties_person_declaredDateTime_d_date, 
COALESCE(CAST(`_removed`.`toDoProperties`.`person`.`effectiveDate`.`hasDate` as STRING), CAST(`toDoProperties`.`person`.`effectiveDate`.`hasDate` as STRING)) as toDoProperties_person_effectiveDate_hasDate, 
COALESCE(`_removed`.`toDoProperties`.`person`.`effectiveDate`.`knownDate`, `toDoProperties`.`person`.`effectiveDate`.`knownDate`) as toDoProperties_person_effectiveDate_knownDate, 
COALESCE(`_removed`.`toDoProperties`.`person`.`effectiveDate`.`type`, `toDoProperties`.`person`.`effectiveDate`.`type`) as toDoProperties_person_effectiveDate_type, 
COALESCE(`_removed`.`toDoProperties`.`person`.`effectiveDate`.`date`, `toDoProperties`.`person`.`effectiveDate`.`date`) as toDoProperties_person_effectiveDate_date, 
COALESCE(`_removed`.`toDoProperties`.`person`.`email`, `toDoProperties`.`person`.`email`) as toDoProperties_person_email, 
COALESCE(`_removed`.`toDoProperties`.`person`.`firstName`, `toDoProperties`.`person`.`firstName`) as toDoProperties_person_firstName, 
COALESCE(`_removed`.`toDoProperties`.`person`.`gender`, `toDoProperties`.`person`.`gender`) as toDoProperties_person_gender, 
COALESCE(`_removed`.`toDoProperties`.`person`.`lastName`, `toDoProperties`.`person`.`lastName`) as toDoProperties_person_lastName, 
COALESCE(`_removed`.`toDoProperties`.`person`.`middleName`, `toDoProperties`.`person`.`middleName`) as toDoProperties_person_middleName, 
COALESCE(`_removed`.`toDoProperties`.`person`.`mobileNumber`, `toDoProperties`.`person`.`mobileNumber`) as toDoProperties_person_mobileNumber, 
COALESCE(CAST(`_removed`.`toDoProperties`.`person`.`paymentEffectiveDate`.`hasDate` as STRING), CAST(`toDoProperties`.`person`.`paymentEffectiveDate`.`hasDate` as STRING)) as toDoProperties_person_paymentEffectiveDate_hasDate, 
COALESCE(`_removed`.`toDoProperties`.`person`.`paymentEffectiveDate`.`knownDate`, `toDoProperties`.`person`.`paymentEffectiveDate`.`knownDate`) as toDoProperties_person_paymentEffectiveDate_knownDate, 
COALESCE(`_removed`.`toDoProperties`.`person`.`paymentEffectiveDate`.`type`, `toDoProperties`.`person`.`paymentEffectiveDate`.`type`) as toDoProperties_person_paymentEffectiveDate_type, 
COALESCE(`_removed`.`toDoProperties`.`person`.`paymentEffectiveDate`.`date`, `toDoProperties`.`person`.`paymentEffectiveDate`.`date`) as toDoProperties_person_paymentEffectiveDate_date, 
COALESCE(`_removed`.`toDoProperties`.`person`.`sanitisedFirstName`, `toDoProperties`.`person`.`sanitisedFirstName`) as toDoProperties_person_sanitisedFirstName, 
COALESCE(`_removed`.`toDoProperties`.`person`.`sanitisedLastName`, `toDoProperties`.`person`.`sanitisedLastName`) as toDoProperties_person_sanitisedLastName, 
COALESCE(`_removed`.`toDoProperties`.`person`.`sanitisedMiddleName`, `toDoProperties`.`person`.`sanitisedMiddleName`) as toDoProperties_person_sanitisedMiddleName, 
COALESCE(CAST(`_removed`.`toDoProperties`.`person`.`verifiedUsingBioQuestionsOrThirdParty` as STRING), CAST(`toDoProperties`.`person`.`verifiedUsingBioQuestionsOrThirdParty` as STRING)) as toDoProperties_person_verifiedUsingBioQuestionsOrThirdParty, 
COALESCE(CAST(`_removed`.`toDoProperties`.`person`.`verifiedWithNameDateOfBirthOrAddressChange` as STRING), CAST(`toDoProperties`.`person`.`verifiedWithNameDateOfBirthOrAddressChange` as STRING)) as toDoProperties_person_verifiedWithNameDateOfBirthOrAddressChange, 
COALESCE(`_removed`.`toDoProperties`.`person`.`type`, `toDoProperties`.`person`.`type`) as toDoProperties_person_type, 
COALESCE(CAST(`_removed`.`toDoProperties`.`returnAfterAbsence` as STRING), CAST(`toDoProperties`.`returnAfterAbsence` as STRING)) as toDoProperties_returnAfterAbsence, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_hrt_entitlement_decision
 src_agent_core_agenttodo_agent_todo_hrt_entitlement_decision 
 where `_removed`.`toDoProperties`.`type`='HRT_ENTITLEMENT_DECISION' or `toDoProperties`.`type`='HRT_ENTITLEMENT_DECISION';


!echo ------------------------;
!echo ------------------------ claimant_commitment_NONE-V2;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_claimantcommitment_claimant_commitment_none_v2
;

CREATE EXTERNAL TABLE src_core_claimantcommitment_claimant_commitment_none_v2(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`properties` STRUCT<`claimantCommitmentVersion`:STRING
,`type`:STRING>
,`_id` STRUCT<`contractId`:STRING
,`claimantId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`properties`:STRUCT<`claimantCommitmentVersion`:STRING
,`type`:STRING>
,`_id`:STRUCT<`contractId`:STRING
,`claimantId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/claimantCommitment';

DROP TABLE IF EXISTS claimant_commitment_NONE-V2;

CREATE TABLE claimant_commitment_none_v2 STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`properties`.`claimantCommitmentVersion`, `properties`.`claimantCommitmentVersion`) as properties_claimantCommitmentVersion, 
COALESCE(`_removed`.`properties`.`type`, `properties`.`type`) as properties_type, 
COALESCE(`_removed`.`_id`.`contractId`, `_id`.`contractId`) as contractId, 
COALESCE(`_removed`.`_id`.`claimantId`, `_id`.`claimantId`) as claimantId FROM src_core_claimantcommitment_claimant_commitment_none_v2
 src_core_claimantcommitment_claimant_commitment_none_v2 
 where `_removed`.`properties`.`type`='NONE-V2' or `properties`.`type`='NONE-V2';


!echo ------------------------;
!echo ------------------------ agent_todo_CHECK_PREGNANCY_DETAILS_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_check_pregnancy_details_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_check_pregnancy_details_properties(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`dueDate`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`dueDate`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_CHECK_PREGNANCY_DETAILS_PROPERTIES;

CREATE TABLE agent_todo_check_pregnancy_details_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`dueDate`, `toDoProperties`.`dueDate`) as toDoProperties_dueDate, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_check_pregnancy_details_properties
 src_agent_core_agenttodo_agent_todo_check_pregnancy_details_properties 
 where `_removed`.`toDoProperties`.`type`='CHECK_PREGNANCY_DETAILS_PROPERTIES' or `toDoProperties`.`type`='CHECK_PREGNANCY_DETAILS_PROPERTIES';


!echo ------------------------;
!echo ------------------------ todo_SOCIAL_HOUSING_AGREE_CHANGES_TO_DO_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_todo_todo_social_housing_agree_changes_to_do_properties
;

CREATE EXTERNAL TABLE src_core_todo_todo_social_housing_agree_changes_to_do_properties(
`properties` STRUCT<`updatedHousingSummary`:STRUCT<`rentalSummary`:STRUCT<`jointTenancySummary`:STRUCT<`totalRent`:STRUCT<`monthlyAmount`:STRING
,`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`totalServiceChargePayment`:STRUCT<`monthlyAmount`:STRING
,`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`numberLivingWith`:STRING>
,`socialRentalSummary`:STRUCT<`serviceChargePayment`:STRUCT<`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`rentFreeWeeks`:STRING>
,`privateRentalSummary`:STRUCT<`financialInterest`:BOOLEAN
,`landlordLivesWithYou`:BOOLEAN
,`landlordRelative`:BOOLEAN>
,`rentalPayment`:STRUCT<`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`tenancyAgreementSummary`:STRUCT<`bothYouAndPartnerNamedOnTenancyOrRentalAgreement`:BOOLEAN
,`jointTenancyWithSomeoneOtherThanPartner`:BOOLEAN>
,`dateMovedToAddress`:STRING
,`landlordName`:STRING
,`numberBedrooms`:STRING>
,`ownHomeSummary`:STRUCT<`mortgageDetailsList`:ARRAY<STRUCT<`amount`:STRING
,`forDisabilityAdaptation`:BOOLEAN
,`lender`:STRING
,`lenderCode`:STRING
,`loanReferenceNumber`:STRING
,`mortgageDetailsId`:STRING
>>
,`serviceChargeDetails`:STRUCT<`amount`:STRING
,`frequency`:STRING>
,`hasMortgage`:BOOLEAN
,`paysServiceCharges`:BOOLEAN>
,`councilTax`:STRUCT<`appliedToCouncilTaxReduction`:STRING
,`councilTaxInClaimantName`:BOOLEAN>
,`dateOfChange`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`noApplicableHousingCostsSummary`:STRUCT<`noApplicableHousingCostsType`:STRING>
,`otherHousingTypeSummary`:STRUCT<`otherAccommodationType`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`councilTaxSummary`:STRUCT<`appliedToCouncilTaxReduction`:STRING
,`councilTaxInClaimantName`:BOOLEAN>
,`contractId`:STRING
,`housingTypeMessagePostfix`:STRING
,`processId`:STRING
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`differencesSummary`:STRUCT<`originalDeclarationSummary`:STRUCT<`rent`:STRUCT<`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`serviceCharges`:STRUCT<`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`bothNamedOnTheTenancyAgreement`:BOOLEAN
,`jointTenancy`:BOOLEAN
,`numberOfBedrooms`:STRING
,`numberOfPeopleInJointTenancy`:STRING
,`rentFreeWeeks`:STRING
,`temporaryAccommodation`:BOOLEAN>
,`updatedDeclarationSummary`:STRUCT<`rent`:STRUCT<`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`serviceCharges`:STRUCT<`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`bothNamedOnTheTenancyAgreement`:BOOLEAN
,`jointTenancy`:BOOLEAN
,`numberOfBedrooms`:STRING
,`numberOfPeopleInJointTenancy`:STRING
,`rentFreeWeeks`:STRING
,`temporaryAccommodation`:BOOLEAN>
,`numberOfBedroomsUpdated`:BOOLEAN
,`rentFreeWeeksUpdated`:BOOLEAN
,`rentUpdated`:BOOLEAN
,`serviceChargesUpdated`:BOOLEAN
,`anyChanges`:BOOLEAN
,`bothNamedOnTheTenancyAgreementUpdated`:BOOLEAN
,`jointTenancyUpdated`:BOOLEAN
,`nowTemporaryAccommodation`:BOOLEAN
,`numberOfPeopleInJointTenancyUpdated`:BOOLEAN
,`temporaryAccommodationUpdated`:BOOLEAN>
,`originalClaimantDeclarationId`:STRING
,`verificationToDoId`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`properties`:STRUCT<`updatedHousingSummary`:STRUCT<`rentalSummary`:STRUCT<`jointTenancySummary`:STRUCT<`totalRent`:STRUCT<`monthlyAmount`:STRING
,`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`totalServiceChargePayment`:STRUCT<`monthlyAmount`:STRING
,`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`numberLivingWith`:STRING>
,`socialRentalSummary`:STRUCT<`serviceChargePayment`:STRUCT<`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`rentFreeWeeks`:STRING>
,`privateRentalSummary`:STRUCT<`financialInterest`:BOOLEAN
,`landlordLivesWithYou`:BOOLEAN
,`landlordRelative`:BOOLEAN>
,`rentalPayment`:STRUCT<`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`tenancyAgreementSummary`:STRUCT<`bothYouAndPartnerNamedOnTenancyOrRentalAgreement`:BOOLEAN
,`jointTenancyWithSomeoneOtherThanPartner`:BOOLEAN>
,`dateMovedToAddress`:STRING
,`landlordName`:STRING
,`numberBedrooms`:STRING>
,`ownHomeSummary`:STRUCT<`mortgageDetailsList`:ARRAY<STRUCT<`amount`:STRING
,`forDisabilityAdaptation`:BOOLEAN
,`lender`:STRING
,`lenderCode`:STRING
,`loanReferenceNumber`:STRING
,`mortgageDetailsId`:STRING
>>
,`serviceChargeDetails`:STRUCT<`amount`:STRING
,`frequency`:STRING>
,`hasMortgage`:BOOLEAN
,`paysServiceCharges`:BOOLEAN>
,`councilTax`:STRUCT<`appliedToCouncilTaxReduction`:STRING
,`councilTaxInClaimantName`:BOOLEAN>
,`dateOfChange`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`noApplicableHousingCostsSummary`:STRUCT<`noApplicableHousingCostsType`:STRING>
,`otherHousingTypeSummary`:STRUCT<`otherAccommodationType`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`councilTaxSummary`:STRUCT<`appliedToCouncilTaxReduction`:STRING
,`councilTaxInClaimantName`:BOOLEAN>
,`contractId`:STRING
,`housingTypeMessagePostfix`:STRING
,`processId`:STRING
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`differencesSummary`:STRUCT<`originalDeclarationSummary`:STRUCT<`rent`:STRUCT<`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`serviceCharges`:STRUCT<`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`bothNamedOnTheTenancyAgreement`:BOOLEAN
,`jointTenancy`:BOOLEAN
,`numberOfBedrooms`:STRING
,`numberOfPeopleInJointTenancy`:STRING
,`rentFreeWeeks`:STRING
,`temporaryAccommodation`:BOOLEAN>
,`updatedDeclarationSummary`:STRUCT<`rent`:STRUCT<`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`serviceCharges`:STRUCT<`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`bothNamedOnTheTenancyAgreement`:BOOLEAN
,`jointTenancy`:BOOLEAN
,`numberOfBedrooms`:STRING
,`numberOfPeopleInJointTenancy`:STRING
,`rentFreeWeeks`:STRING
,`temporaryAccommodation`:BOOLEAN>
,`numberOfBedroomsUpdated`:BOOLEAN
,`rentFreeWeeksUpdated`:BOOLEAN
,`rentUpdated`:BOOLEAN
,`serviceChargesUpdated`:BOOLEAN
,`anyChanges`:BOOLEAN
,`bothNamedOnTheTenancyAgreementUpdated`:BOOLEAN
,`jointTenancyUpdated`:BOOLEAN
,`nowTemporaryAccommodation`:BOOLEAN
,`numberOfPeopleInJointTenancyUpdated`:BOOLEAN
,`temporaryAccommodationUpdated`:BOOLEAN>
,`originalClaimantDeclarationId`:STRING
,`verificationToDoId`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/toDo';

DROP TABLE IF EXISTS todo_SOCIAL_HOUSING_AGREE_CHANGES_TO_DO_PROPERTIES;

CREATE TABLE todo_social_housing_agree_changes_to_do_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(CAST(`_removed`.`properties`.`differencesSummary`.`numberOfBedroomsUpdated` as STRING), CAST(`properties`.`differencesSummary`.`numberOfBedroomsUpdated` as STRING)) as properties_differencesSummary_numberOfBedroomsUpdated, 
COALESCE(CAST(`_removed`.`properties`.`differencesSummary`.`originalDeclarationSummary`.`bothNamedOnTheTenancyAgreement` as STRING), CAST(`properties`.`differencesSummary`.`originalDeclarationSummary`.`bothNamedOnTheTenancyAgreement` as STRING)) as properties_differencesSummary_originalDeclarationSummary_bothNamedOnTheTenancyAgreement, 
COALESCE(CAST(`_removed`.`properties`.`differencesSummary`.`originalDeclarationSummary`.`jointTenancy` as STRING), CAST(`properties`.`differencesSummary`.`originalDeclarationSummary`.`jointTenancy` as STRING)) as properties_differencesSummary_originalDeclarationSummary_jointTenancy, 
COALESCE(`_removed`.`properties`.`differencesSummary`.`originalDeclarationSummary`.`numberOfBedrooms`, `properties`.`differencesSummary`.`originalDeclarationSummary`.`numberOfBedrooms`) as properties_differencesSummary_originalDeclarationSummary_numberOfBedrooms, 
COALESCE(`_removed`.`properties`.`differencesSummary`.`originalDeclarationSummary`.`numberOfPeopleInJointTenancy`, `properties`.`differencesSummary`.`originalDeclarationSummary`.`numberOfPeopleInJointTenancy`) as properties_differencesSummary_originalDeclarationSummary_numberOfPeopleInJointTenancy, 
COALESCE(`_removed`.`properties`.`differencesSummary`.`originalDeclarationSummary`.`rent`.`amount`, `properties`.`differencesSummary`.`originalDeclarationSummary`.`rent`.`amount`) as properties_differencesSummary_originalDeclarationSummary_rent_amount, 
COALESCE(`_removed`.`properties`.`differencesSummary`.`originalDeclarationSummary`.`rent`.`paymentFrequency`, `properties`.`differencesSummary`.`originalDeclarationSummary`.`rent`.`paymentFrequency`) as properties_differencesSummary_originalDeclarationSummary_rent_paymentFrequency, 
COALESCE(`_removed`.`properties`.`differencesSummary`.`originalDeclarationSummary`.`rent`.`type`, `properties`.`differencesSummary`.`originalDeclarationSummary`.`rent`.`type`) as properties_differencesSummary_originalDeclarationSummary_rent_type, 
COALESCE(`_removed`.`properties`.`differencesSummary`.`originalDeclarationSummary`.`rentFreeWeeks`, `properties`.`differencesSummary`.`originalDeclarationSummary`.`rentFreeWeeks`) as properties_differencesSummary_originalDeclarationSummary_rentFreeWeeks, 
COALESCE(`_removed`.`properties`.`differencesSummary`.`originalDeclarationSummary`.`serviceCharges`.`amount`, `properties`.`differencesSummary`.`originalDeclarationSummary`.`serviceCharges`.`amount`) as properties_differencesSummary_originalDeclarationSummary_serviceCharges_amount, 
COALESCE(`_removed`.`properties`.`differencesSummary`.`originalDeclarationSummary`.`serviceCharges`.`paymentFrequency`, `properties`.`differencesSummary`.`originalDeclarationSummary`.`serviceCharges`.`paymentFrequency`) as properties_differencesSummary_originalDeclarationSummary_serviceCharges_paymentFrequency, 
COALESCE(`_removed`.`properties`.`differencesSummary`.`originalDeclarationSummary`.`serviceCharges`.`type`, `properties`.`differencesSummary`.`originalDeclarationSummary`.`serviceCharges`.`type`) as properties_differencesSummary_originalDeclarationSummary_serviceCharges_type, 
COALESCE(CAST(`_removed`.`properties`.`differencesSummary`.`originalDeclarationSummary`.`temporaryAccommodation` as STRING), CAST(`properties`.`differencesSummary`.`originalDeclarationSummary`.`temporaryAccommodation` as STRING)) as properties_differencesSummary_originalDeclarationSummary_temporaryAccommodation, 
COALESCE(CAST(`_removed`.`properties`.`differencesSummary`.`rentFreeWeeksUpdated` as STRING), CAST(`properties`.`differencesSummary`.`rentFreeWeeksUpdated` as STRING)) as properties_differencesSummary_rentFreeWeeksUpdated, 
COALESCE(CAST(`_removed`.`properties`.`differencesSummary`.`rentUpdated` as STRING), CAST(`properties`.`differencesSummary`.`rentUpdated` as STRING)) as properties_differencesSummary_rentUpdated, 
COALESCE(CAST(`_removed`.`properties`.`differencesSummary`.`serviceChargesUpdated` as STRING), CAST(`properties`.`differencesSummary`.`serviceChargesUpdated` as STRING)) as properties_differencesSummary_serviceChargesUpdated, 
COALESCE(CAST(`_removed`.`properties`.`differencesSummary`.`updatedDeclarationSummary`.`bothNamedOnTheTenancyAgreement` as STRING), CAST(`properties`.`differencesSummary`.`updatedDeclarationSummary`.`bothNamedOnTheTenancyAgreement` as STRING)) as properties_differencesSummary_updatedDeclarationSummary_bothNamedOnTheTenancyAgreement, 
COALESCE(CAST(`_removed`.`properties`.`differencesSummary`.`updatedDeclarationSummary`.`jointTenancy` as STRING), CAST(`properties`.`differencesSummary`.`updatedDeclarationSummary`.`jointTenancy` as STRING)) as properties_differencesSummary_updatedDeclarationSummary_jointTenancy, 
COALESCE(`_removed`.`properties`.`differencesSummary`.`updatedDeclarationSummary`.`numberOfBedrooms`, `properties`.`differencesSummary`.`updatedDeclarationSummary`.`numberOfBedrooms`) as properties_differencesSummary_updatedDeclarationSummary_numberOfBedrooms, 
COALESCE(`_removed`.`properties`.`differencesSummary`.`updatedDeclarationSummary`.`numberOfPeopleInJointTenancy`, `properties`.`differencesSummary`.`updatedDeclarationSummary`.`numberOfPeopleInJointTenancy`) as properties_differencesSummary_updatedDeclarationSummary_numberOfPeopleInJointTenancy, 
COALESCE(`_removed`.`properties`.`differencesSummary`.`updatedDeclarationSummary`.`rent`.`amount`, `properties`.`differencesSummary`.`updatedDeclarationSummary`.`rent`.`amount`) as properties_differencesSummary_updatedDeclarationSummary_rent_amount, 
COALESCE(`_removed`.`properties`.`differencesSummary`.`updatedDeclarationSummary`.`rent`.`paymentFrequency`, `properties`.`differencesSummary`.`updatedDeclarationSummary`.`rent`.`paymentFrequency`) as properties_differencesSummary_updatedDeclarationSummary_rent_paymentFrequency, 
COALESCE(`_removed`.`properties`.`differencesSummary`.`updatedDeclarationSummary`.`rent`.`type`, `properties`.`differencesSummary`.`updatedDeclarationSummary`.`rent`.`type`) as properties_differencesSummary_updatedDeclarationSummary_rent_type, 
COALESCE(`_removed`.`properties`.`differencesSummary`.`updatedDeclarationSummary`.`rentFreeWeeks`, `properties`.`differencesSummary`.`updatedDeclarationSummary`.`rentFreeWeeks`) as properties_differencesSummary_updatedDeclarationSummary_rentFreeWeeks, 
COALESCE(`_removed`.`properties`.`differencesSummary`.`updatedDeclarationSummary`.`serviceCharges`.`amount`, `properties`.`differencesSummary`.`updatedDeclarationSummary`.`serviceCharges`.`amount`) as properties_differencesSummary_updatedDeclarationSummary_serviceCharges_amount, 
COALESCE(`_removed`.`properties`.`differencesSummary`.`updatedDeclarationSummary`.`serviceCharges`.`paymentFrequency`, `properties`.`differencesSummary`.`updatedDeclarationSummary`.`serviceCharges`.`paymentFrequency`) as properties_differencesSummary_updatedDeclarationSummary_serviceCharges_paymentFrequency, 
COALESCE(`_removed`.`properties`.`differencesSummary`.`updatedDeclarationSummary`.`serviceCharges`.`type`, `properties`.`differencesSummary`.`updatedDeclarationSummary`.`serviceCharges`.`type`) as properties_differencesSummary_updatedDeclarationSummary_serviceCharges_type, 
COALESCE(CAST(`_removed`.`properties`.`differencesSummary`.`updatedDeclarationSummary`.`temporaryAccommodation` as STRING), CAST(`properties`.`differencesSummary`.`updatedDeclarationSummary`.`temporaryAccommodation` as STRING)) as properties_differencesSummary_updatedDeclarationSummary_temporaryAccommodation, 
COALESCE(CAST(`_removed`.`properties`.`differencesSummary`.`anyChanges` as STRING), CAST(`properties`.`differencesSummary`.`anyChanges` as STRING)) as properties_differencesSummary_anyChanges, 
COALESCE(CAST(`_removed`.`properties`.`differencesSummary`.`bothNamedOnTheTenancyAgreementUpdated` as STRING), CAST(`properties`.`differencesSummary`.`bothNamedOnTheTenancyAgreementUpdated` as STRING)) as properties_differencesSummary_bothNamedOnTheTenancyAgreementUpdated, 
COALESCE(CAST(`_removed`.`properties`.`differencesSummary`.`jointTenancyUpdated` as STRING), CAST(`properties`.`differencesSummary`.`jointTenancyUpdated` as STRING)) as properties_differencesSummary_jointTenancyUpdated, 
COALESCE(CAST(`_removed`.`properties`.`differencesSummary`.`nowTemporaryAccommodation` as STRING), CAST(`properties`.`differencesSummary`.`nowTemporaryAccommodation` as STRING)) as properties_differencesSummary_nowTemporaryAccommodation, 
COALESCE(CAST(`_removed`.`properties`.`differencesSummary`.`numberOfPeopleInJointTenancyUpdated` as STRING), CAST(`properties`.`differencesSummary`.`numberOfPeopleInJointTenancyUpdated` as STRING)) as properties_differencesSummary_numberOfPeopleInJointTenancyUpdated, 
COALESCE(CAST(`_removed`.`properties`.`differencesSummary`.`temporaryAccommodationUpdated` as STRING), CAST(`properties`.`differencesSummary`.`temporaryAccommodationUpdated` as STRING)) as properties_differencesSummary_temporaryAccommodationUpdated, 
COALESCE(`_removed`.`properties`.`originalClaimantDeclarationId`, `properties`.`originalClaimantDeclarationId`) as properties_originalClaimantDeclarationId, 
COALESCE(`_removed`.`properties`.`updatedHousingSummary`.`contractId`, `properties`.`updatedHousingSummary`.`contractId`) as properties_updatedHousingSummary_contractId, 
COALESCE(`_removed`.`properties`.`updatedHousingSummary`.`councilTax`.`appliedToCouncilTaxReduction`, `properties`.`updatedHousingSummary`.`councilTax`.`appliedToCouncilTaxReduction`) as properties_updatedHousingSummary_councilTax_appliedToCouncilTaxReduction, 
COALESCE(CAST(`_removed`.`properties`.`updatedHousingSummary`.`councilTax`.`councilTaxInClaimantName` as STRING), CAST(`properties`.`updatedHousingSummary`.`councilTax`.`councilTaxInClaimantName` as STRING)) as properties_updatedHousingSummary_councilTax_councilTaxInClaimantName, 
COALESCE(CAST(`_removed`.`properties`.`updatedHousingSummary`.`dateOfChange`.`hasDate` as STRING), CAST(`properties`.`updatedHousingSummary`.`dateOfChange`.`hasDate` as STRING)) as properties_updatedHousingSummary_dateOfChange_hasDate, 
COALESCE(`_removed`.`properties`.`updatedHousingSummary`.`dateOfChange`.`knownDate`, `properties`.`updatedHousingSummary`.`dateOfChange`.`knownDate`) as properties_updatedHousingSummary_dateOfChange_knownDate, 
COALESCE(`_removed`.`properties`.`updatedHousingSummary`.`dateOfChange`.`type`, `properties`.`updatedHousingSummary`.`dateOfChange`.`type`) as properties_updatedHousingSummary_dateOfChange_type, 
COALESCE(`_removed`.`properties`.`updatedHousingSummary`.`dateOfChange`.`date`, `properties`.`updatedHousingSummary`.`dateOfChange`.`date`) as properties_updatedHousingSummary_dateOfChange_date, 
COALESCE(`_removed`.`properties`.`updatedHousingSummary`.`housingTypeMessagePostfix`, `properties`.`updatedHousingSummary`.`housingTypeMessagePostfix`) as properties_updatedHousingSummary_housingTypeMessagePostfix, 
COALESCE(`_removed`.`properties`.`updatedHousingSummary`.`noApplicableHousingCostsSummary`.`noApplicableHousingCostsType`, `properties`.`updatedHousingSummary`.`noApplicableHousingCostsSummary`.`noApplicableHousingCostsType`) as properties_updatedHousingSummary_noApplicableHousingCostsSummary_noApplicableHousingCostsType, 
COALESCE(`_removed`.`properties`.`updatedHousingSummary`.`otherHousingTypeSummary`.`otherAccommodationType`, `properties`.`updatedHousingSummary`.`otherHousingTypeSummary`.`otherAccommodationType`) as properties_updatedHousingSummary_otherHousingTypeSummary_otherAccommodationType, 
COALESCE(CAST(`_removed`.`properties`.`updatedHousingSummary`.`ownHomeSummary`.`hasMortgage` as STRING), CAST(`properties`.`updatedHousingSummary`.`ownHomeSummary`.`hasMortgage` as STRING)) as properties_updatedHousingSummary_ownHomeSummary_hasMortgage, 
COALESCE(CAST(`_removed`.`properties`.`updatedHousingSummary`.`ownHomeSummary`.`paysServiceCharges` as STRING), CAST(`properties`.`updatedHousingSummary`.`ownHomeSummary`.`paysServiceCharges` as STRING)) as properties_updatedHousingSummary_ownHomeSummary_paysServiceCharges, 
COALESCE(`removed_exploded_properties_updatedhousingsummary_ownhomesummary_mortgagedetailslist`.`amount`, `exploded_properties_updatedhousingsummary_ownhomesummary_mortgagedetailslist`.`amount`) as properties_updatedHousingSummary_ownHomeSummary_mortgageDetailsList_amount, 
COALESCE(CAST(`removed_exploded_properties_updatedhousingsummary_ownhomesummary_mortgagedetailslist`.`forDisabilityAdaptation` as STRING), CAST(`exploded_properties_updatedhousingsummary_ownhomesummary_mortgagedetailslist`.`forDisabilityAdaptation` as STRING)) as properties_updatedHousingSummary_ownHomeSummary_mortgageDetailsList_forDisabilityAdaptation, 
COALESCE(`removed_exploded_properties_updatedhousingsummary_ownhomesummary_mortgagedetailslist`.`lender`, `exploded_properties_updatedhousingsummary_ownhomesummary_mortgagedetailslist`.`lender`) as properties_updatedHousingSummary_ownHomeSummary_mortgageDetailsList_lender, 
COALESCE(`removed_exploded_properties_updatedhousingsummary_ownhomesummary_mortgagedetailslist`.`lenderCode`, `exploded_properties_updatedhousingsummary_ownhomesummary_mortgagedetailslist`.`lenderCode`) as properties_updatedHousingSummary_ownHomeSummary_mortgageDetailsList_lenderCode, 
COALESCE(`removed_exploded_properties_updatedhousingsummary_ownhomesummary_mortgagedetailslist`.`loanReferenceNumber`, `exploded_properties_updatedhousingsummary_ownhomesummary_mortgagedetailslist`.`loanReferenceNumber`) as properties_updatedHousingSummary_ownHomeSummary_mortgageDetailsList_loanReferenceNumber, 
COALESCE(`removed_exploded_properties_updatedhousingsummary_ownhomesummary_mortgagedetailslist`.`mortgageDetailsId`, `exploded_properties_updatedhousingsummary_ownhomesummary_mortgagedetailslist`.`mortgageDetailsId`) as properties_updatedHousingSummary_ownHomeSummary_mortgageDetailsList_mortgageDetailsId, 
COALESCE(`_removed`.`properties`.`updatedHousingSummary`.`ownHomeSummary`.`serviceChargeDetails`.`amount`, `properties`.`updatedHousingSummary`.`ownHomeSummary`.`serviceChargeDetails`.`amount`) as properties_updatedHousingSummary_ownHomeSummary_serviceChargeDetails_amount, 
COALESCE(`_removed`.`properties`.`updatedHousingSummary`.`ownHomeSummary`.`serviceChargeDetails`.`frequency`, `properties`.`updatedHousingSummary`.`ownHomeSummary`.`serviceChargeDetails`.`frequency`) as properties_updatedHousingSummary_ownHomeSummary_serviceChargeDetails_frequency, 
COALESCE(CAST(`_removed`.`properties`.`updatedHousingSummary`.`paymentEffectiveDate`.`hasDate` as STRING), CAST(`properties`.`updatedHousingSummary`.`paymentEffectiveDate`.`hasDate` as STRING)) as properties_updatedHousingSummary_paymentEffectiveDate_hasDate, 
COALESCE(`_removed`.`properties`.`updatedHousingSummary`.`paymentEffectiveDate`.`knownDate`, `properties`.`updatedHousingSummary`.`paymentEffectiveDate`.`knownDate`) as properties_updatedHousingSummary_paymentEffectiveDate_knownDate, 
COALESCE(`_removed`.`properties`.`updatedHousingSummary`.`paymentEffectiveDate`.`type`, `properties`.`updatedHousingSummary`.`paymentEffectiveDate`.`type`) as properties_updatedHousingSummary_paymentEffectiveDate_type, 
COALESCE(`_removed`.`properties`.`updatedHousingSummary`.`paymentEffectiveDate`.`date`, `properties`.`updatedHousingSummary`.`paymentEffectiveDate`.`date`) as properties_updatedHousingSummary_paymentEffectiveDate_date, 
COALESCE(`_removed`.`properties`.`updatedHousingSummary`.`processId`, `properties`.`updatedHousingSummary`.`processId`) as properties_updatedHousingSummary_processId, 
COALESCE(`_removed`.`properties`.`updatedHousingSummary`.`rentalSummary`.`dateMovedToAddress`, `properties`.`updatedHousingSummary`.`rentalSummary`.`dateMovedToAddress`) as properties_updatedHousingSummary_rentalSummary_dateMovedToAddress, 
COALESCE(`_removed`.`properties`.`updatedHousingSummary`.`rentalSummary`.`jointTenancySummary`.`numberLivingWith`, `properties`.`updatedHousingSummary`.`rentalSummary`.`jointTenancySummary`.`numberLivingWith`) as properties_updatedHousingSummary_rentalSummary_jointTenancySummary_numberLivingWith, 
COALESCE(`_removed`.`properties`.`updatedHousingSummary`.`rentalSummary`.`jointTenancySummary`.`totalRent`.`monthlyAmount`, `properties`.`updatedHousingSummary`.`rentalSummary`.`jointTenancySummary`.`totalRent`.`monthlyAmount`) as properties_updatedHousingSummary_rentalSummary_jointTenancySummary_totalRent_monthlyAmount, 
COALESCE(`_removed`.`properties`.`updatedHousingSummary`.`rentalSummary`.`jointTenancySummary`.`totalRent`.`amount`, `properties`.`updatedHousingSummary`.`rentalSummary`.`jointTenancySummary`.`totalRent`.`amount`) as properties_updatedHousingSummary_rentalSummary_jointTenancySummary_totalRent_amount, 
COALESCE(`_removed`.`properties`.`updatedHousingSummary`.`rentalSummary`.`jointTenancySummary`.`totalRent`.`paymentFrequency`, `properties`.`updatedHousingSummary`.`rentalSummary`.`jointTenancySummary`.`totalRent`.`paymentFrequency`) as properties_updatedHousingSummary_rentalSummary_jointTenancySummary_totalRent_paymentFrequency, 
COALESCE(`_removed`.`properties`.`updatedHousingSummary`.`rentalSummary`.`jointTenancySummary`.`totalRent`.`type`, `properties`.`updatedHousingSummary`.`rentalSummary`.`jointTenancySummary`.`totalRent`.`type`) as properties_updatedHousingSummary_rentalSummary_jointTenancySummary_totalRent_type, 
COALESCE(`_removed`.`properties`.`updatedHousingSummary`.`rentalSummary`.`jointTenancySummary`.`totalServiceChargePayment`.`monthlyAmount`, `properties`.`updatedHousingSummary`.`rentalSummary`.`jointTenancySummary`.`totalServiceChargePayment`.`monthlyAmount`) as properties_updatedHousingSummary_rentalSummary_jointTenancySummary_totalServiceChargePayment_monthlyAmount, 
COALESCE(`_removed`.`properties`.`updatedHousingSummary`.`rentalSummary`.`jointTenancySummary`.`totalServiceChargePayment`.`amount`, `properties`.`updatedHousingSummary`.`rentalSummary`.`jointTenancySummary`.`totalServiceChargePayment`.`amount`) as properties_updatedHousingSummary_rentalSummary_jointTenancySummary_totalServiceChargePayment_amount, 
COALESCE(`_removed`.`properties`.`updatedHousingSummary`.`rentalSummary`.`jointTenancySummary`.`totalServiceChargePayment`.`paymentFrequency`, `properties`.`updatedHousingSummary`.`rentalSummary`.`jointTenancySummary`.`totalServiceChargePayment`.`paymentFrequency`) as properties_updatedHousingSummary_rentalSummary_jointTenancySummary_totalServiceChargePayment_paymentFrequency, 
COALESCE(`_removed`.`properties`.`updatedHousingSummary`.`rentalSummary`.`jointTenancySummary`.`totalServiceChargePayment`.`type`, `properties`.`updatedHousingSummary`.`rentalSummary`.`jointTenancySummary`.`totalServiceChargePayment`.`type`) as properties_updatedHousingSummary_rentalSummary_jointTenancySummary_totalServiceChargePayment_type, 
COALESCE(`_removed`.`properties`.`updatedHousingSummary`.`rentalSummary`.`landlordName`, `properties`.`updatedHousingSummary`.`rentalSummary`.`landlordName`) as properties_updatedHousingSummary_rentalSummary_landlordName, 
COALESCE(`_removed`.`properties`.`updatedHousingSummary`.`rentalSummary`.`numberBedrooms`, `properties`.`updatedHousingSummary`.`rentalSummary`.`numberBedrooms`) as properties_updatedHousingSummary_rentalSummary_numberBedrooms, 
COALESCE(CAST(`_removed`.`properties`.`updatedHousingSummary`.`rentalSummary`.`privateRentalSummary`.`financialInterest` as STRING), CAST(`properties`.`updatedHousingSummary`.`rentalSummary`.`privateRentalSummary`.`financialInterest` as STRING)) as properties_updatedHousingSummary_rentalSummary_privateRentalSummary_financialInterest, 
COALESCE(CAST(`_removed`.`properties`.`updatedHousingSummary`.`rentalSummary`.`privateRentalSummary`.`landlordLivesWithYou` as STRING), CAST(`properties`.`updatedHousingSummary`.`rentalSummary`.`privateRentalSummary`.`landlordLivesWithYou` as STRING)) as properties_updatedHousingSummary_rentalSummary_privateRentalSummary_landlordLivesWithYou, 
COALESCE(CAST(`_removed`.`properties`.`updatedHousingSummary`.`rentalSummary`.`privateRentalSummary`.`landlordRelative` as STRING), CAST(`properties`.`updatedHousingSummary`.`rentalSummary`.`privateRentalSummary`.`landlordRelative` as STRING)) as properties_updatedHousingSummary_rentalSummary_privateRentalSummary_landlordRelative, 
COALESCE(`_removed`.`properties`.`updatedHousingSummary`.`rentalSummary`.`rentalPayment`.`amount`, `properties`.`updatedHousingSummary`.`rentalSummary`.`rentalPayment`.`amount`) as properties_updatedHousingSummary_rentalSummary_rentalPayment_amount, 
COALESCE(`_removed`.`properties`.`updatedHousingSummary`.`rentalSummary`.`rentalPayment`.`paymentFrequency`, `properties`.`updatedHousingSummary`.`rentalSummary`.`rentalPayment`.`paymentFrequency`) as properties_updatedHousingSummary_rentalSummary_rentalPayment_paymentFrequency, 
COALESCE(`_removed`.`properties`.`updatedHousingSummary`.`rentalSummary`.`rentalPayment`.`type`, `properties`.`updatedHousingSummary`.`rentalSummary`.`rentalPayment`.`type`) as properties_updatedHousingSummary_rentalSummary_rentalPayment_type, 
COALESCE(`_removed`.`properties`.`updatedHousingSummary`.`rentalSummary`.`socialRentalSummary`.`rentFreeWeeks`, `properties`.`updatedHousingSummary`.`rentalSummary`.`socialRentalSummary`.`rentFreeWeeks`) as properties_updatedHousingSummary_rentalSummary_socialRentalSummary_rentFreeWeeks, 
COALESCE(`_removed`.`properties`.`updatedHousingSummary`.`rentalSummary`.`socialRentalSummary`.`serviceChargePayment`.`amount`, `properties`.`updatedHousingSummary`.`rentalSummary`.`socialRentalSummary`.`serviceChargePayment`.`amount`) as properties_updatedHousingSummary_rentalSummary_socialRentalSummary_serviceChargePayment_amount, 
COALESCE(`_removed`.`properties`.`updatedHousingSummary`.`rentalSummary`.`socialRentalSummary`.`serviceChargePayment`.`paymentFrequency`, `properties`.`updatedHousingSummary`.`rentalSummary`.`socialRentalSummary`.`serviceChargePayment`.`paymentFrequency`) as properties_updatedHousingSummary_rentalSummary_socialRentalSummary_serviceChargePayment_paymentFrequency, 
COALESCE(`_removed`.`properties`.`updatedHousingSummary`.`rentalSummary`.`socialRentalSummary`.`serviceChargePayment`.`type`, `properties`.`updatedHousingSummary`.`rentalSummary`.`socialRentalSummary`.`serviceChargePayment`.`type`) as properties_updatedHousingSummary_rentalSummary_socialRentalSummary_serviceChargePayment_type, 
COALESCE(CAST(`_removed`.`properties`.`updatedHousingSummary`.`rentalSummary`.`tenancyAgreementSummary`.`bothYouAndPartnerNamedOnTenancyOrRentalAgreement` as STRING), CAST(`properties`.`updatedHousingSummary`.`rentalSummary`.`tenancyAgreementSummary`.`bothYouAndPartnerNamedOnTenancyOrRentalAgreement` as STRING)) as properties_updatedHousingSummary_rentalSummary_tenancyAgreementSummary_bothYouAndPartnerNamedOnTenancyOrRentalAgreement, 
COALESCE(CAST(`_removed`.`properties`.`updatedHousingSummary`.`rentalSummary`.`tenancyAgreementSummary`.`jointTenancyWithSomeoneOtherThanPartner` as STRING), CAST(`properties`.`updatedHousingSummary`.`rentalSummary`.`tenancyAgreementSummary`.`jointTenancyWithSomeoneOtherThanPartner` as STRING)) as properties_updatedHousingSummary_rentalSummary_tenancyAgreementSummary_jointTenancyWithSomeoneOtherThanPartner, 
COALESCE(CAST(`_removed`.`properties`.`updatedHousingSummary`.`confirmationRequired` as STRING), CAST(`properties`.`updatedHousingSummary`.`confirmationRequired` as STRING)) as properties_updatedHousingSummary_confirmationRequired, 
COALESCE(`_removed`.`properties`.`updatedHousingSummary`.`councilTaxSummary`.`appliedToCouncilTaxReduction`, `properties`.`updatedHousingSummary`.`councilTaxSummary`.`appliedToCouncilTaxReduction`) as properties_updatedHousingSummary_councilTaxSummary_appliedToCouncilTaxReduction, 
COALESCE(CAST(`_removed`.`properties`.`updatedHousingSummary`.`councilTaxSummary`.`councilTaxInClaimantName` as STRING), CAST(`properties`.`updatedHousingSummary`.`councilTaxSummary`.`councilTaxInClaimantName` as STRING)) as properties_updatedHousingSummary_councilTaxSummary_councilTaxInClaimantName, 
COALESCE(CAST(`_removed`.`properties`.`updatedHousingSummary`.`hideDetailsForPartnerDeclaration` as STRING), CAST(`properties`.`updatedHousingSummary`.`hideDetailsForPartnerDeclaration` as STRING)) as properties_updatedHousingSummary_hideDetailsForPartnerDeclaration, 
COALESCE(CAST(`_removed`.`properties`.`updatedHousingSummary`.`perClaimant` as STRING), CAST(`properties`.`updatedHousingSummary`.`perClaimant` as STRING)) as properties_updatedHousingSummary_perClaimant, 
COALESCE(`_removed`.`properties`.`updatedHousingSummary`.`type`, `properties`.`updatedHousingSummary`.`type`) as properties_updatedHousingSummary_type, 
COALESCE(`_removed`.`properties`.`verificationToDoId`, `properties`.`verificationToDoId`) as properties_verificationToDoId, 
COALESCE(`_removed`.`properties`.`type`, `properties`.`type`) as properties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_core_todo_todo_social_housing_agree_changes_to_do_properties
 LATERAL VIEW OUTER EXPLODE(`properties`.`updatedHousingSummary`.`ownHomeSummary`.`mortgageDetailsList`) view_exploded_properties_updatedhousingsummary_ownhomesummary_mortgagedetailslist AS exploded_properties_updatedhousingsummary_ownhomesummary_mortgagedetailslist 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`properties`.`updatedHousingSummary`.`ownHomeSummary`.`mortgageDetailsList`) view_removed_exploded_properties_updatedhousingsummary_ownhomesummary_mortgagedetailslist AS removed_exploded_properties_updatedhousingsummary_ownhomesummary_mortgagedetailslist 
 
 where `_removed`.`properties`.`type`='SOCIAL_HOUSING_AGREE_CHANGES_TO_DO_PROPERTIES' or `properties`.`type`='SOCIAL_HOUSING_AGREE_CHANGES_TO_DO_PROPERTIES';


!echo ------------------------;
!echo ------------------------ agent_todo_ABSENT_CHILD;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_absent_child
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_absent_child(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`abroadForMoreThanOneMonth`:BOOLEAN
,`childId`:STRING
,`dateOfBirth`:STRING
,`fullName`:STRING
,`gender`:STRING
,`inPrison`:BOOLEAN
,`inTheCareOfLocalAuthority`:BOOLEAN
,`dateOfBirthAsString`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`abroadForMoreThanOneMonth`:BOOLEAN
,`childId`:STRING
,`dateOfBirth`:STRING
,`fullName`:STRING
,`gender`:STRING
,`inPrison`:BOOLEAN
,`inTheCareOfLocalAuthority`:BOOLEAN
,`dateOfBirthAsString`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_ABSENT_CHILD;

CREATE TABLE agent_todo_absent_child STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(CAST(`_removed`.`toDoProperties`.`abroadForMoreThanOneMonth` as STRING), CAST(`toDoProperties`.`abroadForMoreThanOneMonth` as STRING)) as toDoProperties_abroadForMoreThanOneMonth, 
COALESCE(`_removed`.`toDoProperties`.`childId`, `toDoProperties`.`childId`) as toDoProperties_childId, 
COALESCE(`_removed`.`toDoProperties`.`dateOfBirth`, `toDoProperties`.`dateOfBirth`) as toDoProperties_dateOfBirth, 
COALESCE(`_removed`.`toDoProperties`.`fullName`, `toDoProperties`.`fullName`) as toDoProperties_fullName, 
COALESCE(`_removed`.`toDoProperties`.`gender`, `toDoProperties`.`gender`) as toDoProperties_gender, 
COALESCE(CAST(`_removed`.`toDoProperties`.`inPrison` as STRING), CAST(`toDoProperties`.`inPrison` as STRING)) as toDoProperties_inPrison, 
COALESCE(CAST(`_removed`.`toDoProperties`.`inTheCareOfLocalAuthority` as STRING), CAST(`toDoProperties`.`inTheCareOfLocalAuthority` as STRING)) as toDoProperties_inTheCareOfLocalAuthority, 
COALESCE(`_removed`.`toDoProperties`.`dateOfBirthAsString`, `toDoProperties`.`dateOfBirthAsString`) as toDoProperties_dateOfBirthAsString, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_absent_child
 src_agent_core_agenttodo_agent_todo_absent_child 
 where `_removed`.`toDoProperties`.`type`='ABSENT_CHILD' or `toDoProperties`.`type`='ABSENT_CHILD';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_CONSIDER_WCA_REFERRAL_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_consider_wca_referral_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_consider_wca_referral_properties(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`healthAndDeclarationId`:STRING
,`declarationId`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`healthAndDeclarationId`:STRING
,`declarationId`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_CONSIDER_WCA_REFERRAL_PROPERTIES;

CREATE TABLE agent_todo_archive_consider_wca_referral_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`healthAndDeclarationId`, `toDoProperties`.`healthAndDeclarationId`) as toDoProperties_healthAndDeclarationId, 
COALESCE(`_removed`.`toDoProperties`.`declarationId`, `toDoProperties`.`declarationId`) as toDoProperties_declarationId, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_consider_wca_referral_properties
 src_agent_core_agenttodoarchive_agent_todo_archive_consider_wca_referral_properties 
 where `_removed`.`toDoProperties`.`type`='CONSIDER_WCA_REFERRAL_PROPERTIES' or `toDoProperties`.`type`='CONSIDER_WCA_REFERRAL_PROPERTIES';


!echo ------------------------;
!echo ------------------------ todo_READ_ABOUT_REDUCED_PAYMENTS_TODO_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_todo_todo_read_about_reduced_payments_todo_properties
;

CREATE EXTERNAL TABLE src_core_todo_todo_read_about_reduced_payments_todo_properties(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`properties` STRUCT<`acceptCommitmentsToDoId`:STRING
,`workGroup`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`properties`:STRUCT<`acceptCommitmentsToDoId`:STRING
,`workGroup`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/toDo';

DROP TABLE IF EXISTS todo_READ_ABOUT_REDUCED_PAYMENTS_TODO_PROPERTIES;

CREATE TABLE todo_read_about_reduced_payments_todo_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`properties`.`acceptCommitmentsToDoId`, `properties`.`acceptCommitmentsToDoId`) as properties_acceptCommitmentsToDoId, 
COALESCE(`_removed`.`properties`.`workGroup`, `properties`.`workGroup`) as properties_workGroup, 
COALESCE(`_removed`.`properties`.`type`, `properties`.`type`) as properties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_core_todo_todo_read_about_reduced_payments_todo_properties
 src_core_todo_todo_read_about_reduced_payments_todo_properties 
 where `_removed`.`properties`.`type`='READ_ABOUT_REDUCED_PAYMENTS_TODO_PROPERTIES' or `properties`.`type`='READ_ABOUT_REDUCED_PAYMENTS_TODO_PROPERTIES';


!echo ------------------------;
!echo ------------------------ todo_REDECLARE_CIRCUMSTANCES;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_todo_todo_redeclare_circumstances
;

CREATE EXTERNAL TABLE src_core_todo_todo_redeclare_circumstances(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`properties` STRUCT<`previousClaimantId`:STRING
,`previousContractId`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`properties`:STRUCT<`previousClaimantId`:STRING
,`previousContractId`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/toDo';

DROP TABLE IF EXISTS todo_REDECLARE_CIRCUMSTANCES;

CREATE TABLE todo_redeclare_circumstances STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`properties`.`previousClaimantId`, `properties`.`previousClaimantId`) as properties_previousClaimantId, 
COALESCE(`_removed`.`properties`.`previousContractId`, `properties`.`previousContractId`) as properties_previousContractId, 
COALESCE(`_removed`.`properties`.`type`, `properties`.`type`) as properties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_core_todo_todo_redeclare_circumstances
 src_core_todo_todo_redeclare_circumstances 
 where `_removed`.`properties`.`type`='REDECLARE_CIRCUMSTANCES' or `properties`.`type`='REDECLARE_CIRCUMSTANCES';


!echo ------------------------;
!echo ------------------------ agent_todo_REVIEW_CLAIMANT_TODO;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_review_claimant_todo
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_review_claimant_todo(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`agentNotes`:STRING
,`claimantNotes`:STRING
,`dateTimeCompleted`:STRING
,`deadlineDate`:STRING
,`deadlineTime`:STRING
,`timeCompleted`:STRING
,`todoTitle`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`agentNotes`:STRING
,`claimantNotes`:STRING
,`dateTimeCompleted`:STRING
,`deadlineDate`:STRING
,`deadlineTime`:STRING
,`timeCompleted`:STRING
,`todoTitle`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_REVIEW_CLAIMANT_TODO;

CREATE TABLE agent_todo_review_claimant_todo STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`agentNotes`, `toDoProperties`.`agentNotes`) as toDoProperties_agentNotes, 
COALESCE(`_removed`.`toDoProperties`.`claimantNotes`, `toDoProperties`.`claimantNotes`) as toDoProperties_claimantNotes, 
COALESCE(`_removed`.`toDoProperties`.`dateTimeCompleted`, `toDoProperties`.`dateTimeCompleted`) as toDoProperties_dateTimeCompleted, 
COALESCE(`_removed`.`toDoProperties`.`deadlineDate`, `toDoProperties`.`deadlineDate`) as toDoProperties_deadlineDate, 
COALESCE(`_removed`.`toDoProperties`.`deadlineTime`, `toDoProperties`.`deadlineTime`) as toDoProperties_deadlineTime, 
COALESCE(`_removed`.`toDoProperties`.`timeCompleted`, `toDoProperties`.`timeCompleted`) as toDoProperties_timeCompleted, 
COALESCE(`_removed`.`toDoProperties`.`todoTitle`, `toDoProperties`.`todoTitle`) as toDoProperties_todoTitle, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_review_claimant_todo
 src_agent_core_agenttodo_agent_todo_review_claimant_todo 
 where `_removed`.`toDoProperties`.`type`='REVIEW_CLAIMANT_TODO' or `toDoProperties`.`type`='REVIEW_CLAIMANT_TODO';


!echo ------------------------;
!echo ------------------------ journal_HaveALookTodoJournalEntry;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_journal_journal_havealooktodojournalentry
;

CREATE EXTERNAL TABLE src_core_journal_journal_havealooktodojournalentry(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`journalEntryProperties` STRUCT<`agentNotes`:STRING
,`interventionRef`:STRING
,`interventionType`:STRING
,`title`:STRING
,`type`:STRING>
,`_id` STRUCT<`journalId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`journalEntryProperties`:STRUCT<`agentNotes`:STRING
,`interventionRef`:STRING
,`interventionType`:STRING
,`title`:STRING
,`type`:STRING>
,`_id`:STRUCT<`journalId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/journal';

DROP TABLE IF EXISTS journal_HaveALookTodoJournalEntry;

CREATE TABLE journal_havealooktodojournalentry STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`journalEntryProperties`.`agentNotes`, `journalEntryProperties`.`agentNotes`) as journalEntryProperties_agentNotes, 
COALESCE(`_removed`.`journalEntryProperties`.`interventionRef`, `journalEntryProperties`.`interventionRef`) as journalEntryProperties_interventionRef, 
COALESCE(`_removed`.`journalEntryProperties`.`interventionType`, `journalEntryProperties`.`interventionType`) as journalEntryProperties_interventionType, 
COALESCE(`_removed`.`journalEntryProperties`.`title`, `journalEntryProperties`.`title`) as journalEntryProperties_title, 
COALESCE(`_removed`.`journalEntryProperties`.`type`, `journalEntryProperties`.`type`) as journalEntryProperties_type, 
COALESCE(`_removed`.`_id`.`journalId`, `_id`.`journalId`) as id FROM src_core_journal_journal_havealooktodojournalentry
 src_core_journal_journal_havealooktodojournalentry 
 where `_removed`.`journalEntryProperties`.`type`='HaveALookTodoJournalEntry' or `journalEntryProperties`.`type`='HaveALookTodoJournalEntry';


!echo ------------------------;
!echo ------------------------ agent_todo_INTERVENTION_FEEDBACK;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_intervention_feedback
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_intervention_feedback(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`interventionRef`:STRING
,`interventionType`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`interventionRef`:STRING
,`interventionType`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_INTERVENTION_FEEDBACK;

CREATE TABLE agent_todo_intervention_feedback STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`interventionRef`, `toDoProperties`.`interventionRef`) as toDoProperties_interventionRef, 
COALESCE(`_removed`.`toDoProperties`.`interventionType`, `toDoProperties`.`interventionType`) as toDoProperties_interventionType, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_intervention_feedback
 src_agent_core_agenttodo_agent_todo_intervention_feedback 
 where `_removed`.`toDoProperties`.`type`='INTERVENTION_FEEDBACK' or `toDoProperties`.`type`='INTERVENTION_FEEDBACK';


!echo ------------------------;
!echo ------------------------ agent_todo_RECORD_OVERLAPPING_BENEFIT_TO_DO_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_record_overlapping_benefit_to_do_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_record_overlapping_benefit_to_do_properties(
`toDoProperties` STRUCT<`existingBenefit`:STRUCT<`benefitName`:STRING
,`endDate`:STRING
,`officeContactNumber`:STRING
,`officeDescription`:STRING
,`officeTypeDescription`:STRING
,`source`:STRING
,`startDate`:STRING>
,`backdating`:BOOLEAN
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`existingBenefit`:STRUCT<`benefitName`:STRING
,`endDate`:STRING
,`officeContactNumber`:STRING
,`officeDescription`:STRING
,`officeTypeDescription`:STRING
,`source`:STRING
,`startDate`:STRING>
,`backdating`:BOOLEAN
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_RECORD_OVERLAPPING_BENEFIT_TO_DO_PROPERTIES;

CREATE TABLE agent_todo_record_overlapping_benefit_to_do_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(CAST(`_removed`.`toDoProperties`.`backdating` as STRING), CAST(`toDoProperties`.`backdating` as STRING)) as toDoProperties_backdating, 
COALESCE(`_removed`.`toDoProperties`.`existingBenefit`.`benefitName`, `toDoProperties`.`existingBenefit`.`benefitName`) as toDoProperties_existingBenefit_benefitName, 
COALESCE(`_removed`.`toDoProperties`.`existingBenefit`.`endDate`, `toDoProperties`.`existingBenefit`.`endDate`) as toDoProperties_existingBenefit_endDate, 
COALESCE(`_removed`.`toDoProperties`.`existingBenefit`.`officeContactNumber`, `toDoProperties`.`existingBenefit`.`officeContactNumber`) as toDoProperties_existingBenefit_officeContactNumber, 
COALESCE(`_removed`.`toDoProperties`.`existingBenefit`.`officeDescription`, `toDoProperties`.`existingBenefit`.`officeDescription`) as toDoProperties_existingBenefit_officeDescription, 
COALESCE(`_removed`.`toDoProperties`.`existingBenefit`.`officeTypeDescription`, `toDoProperties`.`existingBenefit`.`officeTypeDescription`) as toDoProperties_existingBenefit_officeTypeDescription, 
COALESCE(`_removed`.`toDoProperties`.`existingBenefit`.`source`, `toDoProperties`.`existingBenefit`.`source`) as toDoProperties_existingBenefit_source, 
COALESCE(`_removed`.`toDoProperties`.`existingBenefit`.`startDate`, `toDoProperties`.`existingBenefit`.`startDate`) as toDoProperties_existingBenefit_startDate, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_record_overlapping_benefit_to_do_properties
 src_agent_core_agenttodo_agent_todo_record_overlapping_benefit_to_do_properties 
 where `_removed`.`toDoProperties`.`type`='RECORD_OVERLAPPING_BENEFIT_TO_DO_PROPERTIES' or `toDoProperties`.`type`='RECORD_OVERLAPPING_BENEFIT_TO_DO_PROPERTIES';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_FOR_ASSESSMENT_PERIOD_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_for_assessment_period_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_for_assessment_period_properties(
`toDoProperties` STRUCT<`untrustedAutoCalcReasons`:ARRAY<STRING>
,`assessmentPeriodId`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`untrustedAutoCalcReasons`:ARRAY<STRING>
,`assessmentPeriodId`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_FOR_ASSESSMENT_PERIOD_PROPERTIES;

CREATE TABLE agent_todo_archive_for_assessment_period_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`assessmentPeriodId`, `toDoProperties`.`assessmentPeriodId`) as toDoProperties_assessmentPeriodId, 
COALESCE(`removed_exploded_todoproperties_untrustedautocalcreasons`, `exploded_todoproperties_untrustedautocalcreasons`) as toDoProperties_untrustedAutoCalcReasons, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_for_assessment_period_properties
 LATERAL VIEW OUTER EXPLODE(`toDoProperties`.`untrustedAutoCalcReasons`) view_exploded_todoproperties_untrustedautocalcreasons AS exploded_todoproperties_untrustedautocalcreasons 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`toDoProperties`.`untrustedAutoCalcReasons`) view_removed_exploded_todoproperties_untrustedautocalcreasons AS removed_exploded_todoproperties_untrustedautocalcreasons 
 
 where `_removed`.`toDoProperties`.`type`='FOR_ASSESSMENT_PERIOD_PROPERTIES' or `toDoProperties`.`type`='FOR_ASSESSMENT_PERIOD_PROPERTIES';


!echo ------------------------;
!echo ------------------------ journal_FlexMoreFrequentPaymentsClaimantToDoJournalEntry;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_journal_journal_flexmorefrequentpaymentsclaimanttodojournalentry
;

CREATE EXTERNAL TABLE src_core_journal_journal_flexmorefrequentpaymentsclaimanttodojournalentry(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`journalEntryProperties` STRUCT<`moreFrequentPaymentsAccepted`:BOOLEAN
,`paymentDate`:STRING
,`type`:STRING>
,`_id` STRUCT<`journalId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`journalEntryProperties`:STRUCT<`moreFrequentPaymentsAccepted`:BOOLEAN
,`paymentDate`:STRING
,`type`:STRING>
,`_id`:STRUCT<`journalId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/journal';

DROP TABLE IF EXISTS journal_FlexMoreFrequentPaymentsClaimantToDoJournalEntry;

CREATE TABLE journal_flexmorefrequentpaymentsclaimanttodojournalentry STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`moreFrequentPaymentsAccepted` as STRING), CAST(`journalEntryProperties`.`moreFrequentPaymentsAccepted` as STRING)) as journalEntryProperties_moreFrequentPaymentsAccepted, 
COALESCE(`_removed`.`journalEntryProperties`.`paymentDate`, `journalEntryProperties`.`paymentDate`) as journalEntryProperties_paymentDate, 
COALESCE(`_removed`.`journalEntryProperties`.`type`, `journalEntryProperties`.`type`) as journalEntryProperties_type, 
COALESCE(`_removed`.`_id`.`journalId`, `_id`.`journalId`) as id FROM src_core_journal_journal_flexmorefrequentpaymentsclaimanttodojournalentry
 src_core_journal_journal_flexmorefrequentpaymentsclaimanttodojournalentry 
 where `_removed`.`journalEntryProperties`.`type`='FlexMoreFrequentPaymentsClaimantToDoJournalEntry' or `journalEntryProperties`.`type`='FlexMoreFrequentPaymentsClaimantToDoJournalEntry';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_INTERVENTION_FEEDBACK;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_intervention_feedback
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_intervention_feedback(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`interventionRef`:STRING
,`interventionType`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`interventionRef`:STRING
,`interventionType`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_INTERVENTION_FEEDBACK;

CREATE TABLE agent_todo_archive_intervention_feedback STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`interventionRef`, `toDoProperties`.`interventionRef`) as toDoProperties_interventionRef, 
COALESCE(`_removed`.`toDoProperties`.`interventionType`, `toDoProperties`.`interventionType`) as toDoProperties_interventionType, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_intervention_feedback
 src_agent_core_agenttodoarchive_agent_todo_archive_intervention_feedback 
 where `_removed`.`toDoProperties`.`type`='INTERVENTION_FEEDBACK' or `toDoProperties`.`type`='INTERVENTION_FEEDBACK';


!echo ------------------------;
!echo ------------------------ agent_todo_MAKE_AN_ADVANCE_PAYMENT;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_make_an_advance_payment
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_make_an_advance_payment(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`advanceGroupId`:STRING
,`automatedPaymentRejectionReason`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`advanceGroupId`:STRING
,`automatedPaymentRejectionReason`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_MAKE_AN_ADVANCE_PAYMENT;

CREATE TABLE agent_todo_make_an_advance_payment STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`advanceGroupId`, `toDoProperties`.`advanceGroupId`) as toDoProperties_advanceGroupId, 
COALESCE(`_removed`.`toDoProperties`.`automatedPaymentRejectionReason`, `toDoProperties`.`automatedPaymentRejectionReason`) as toDoProperties_automatedPaymentRejectionReason, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_make_an_advance_payment
 src_agent_core_agenttodo_agent_todo_make_an_advance_payment 
 where `_removed`.`toDoProperties`.`type`='MAKE_AN_ADVANCE_PAYMENT' or `toDoProperties`.`type`='MAKE_AN_ADVANCE_PAYMENT';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_OFFER_WCA_REFERRAL_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_offer_wca_referral_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_offer_wca_referral_properties(
`toDoProperties` STRUCT<`offerWcaReferralResult`:STRUCT<`referForWca`:BOOLEAN>
,`healthDeclarationId`:STRING
,`workDeclarationId`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`offerWcaReferralResult`:STRUCT<`referForWca`:BOOLEAN>
,`healthDeclarationId`:STRING
,`workDeclarationId`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_OFFER_WCA_REFERRAL_PROPERTIES;

CREATE TABLE agent_todo_archive_offer_wca_referral_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`healthDeclarationId`, `toDoProperties`.`healthDeclarationId`) as toDoProperties_healthDeclarationId, 
COALESCE(CAST(`_removed`.`toDoProperties`.`offerWcaReferralResult`.`referForWca` as STRING), CAST(`toDoProperties`.`offerWcaReferralResult`.`referForWca` as STRING)) as toDoProperties_offerWcaReferralResult_referForWca, 
COALESCE(`_removed`.`toDoProperties`.`workDeclarationId`, `toDoProperties`.`workDeclarationId`) as toDoProperties_workDeclarationId, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_offer_wca_referral_properties
 src_agent_core_agenttodoarchive_agent_todo_archive_offer_wca_referral_properties 
 where `_removed`.`toDoProperties`.`type`='OFFER_WCA_REFERRAL_PROPERTIES' or `toDoProperties`.`type`='OFFER_WCA_REFERRAL_PROPERTIES';


!echo ------------------------;
!echo ------------------------ agent_todo_INFORM_CLAIMANT_LENDER_END_SMI_TODO_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_inform_claimant_lender_end_smi_todo_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_inform_claimant_lender_end_smi_todo_properties(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`housingDeclarationId`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`housingDeclarationId`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_INFORM_CLAIMANT_LENDER_END_SMI_TODO_PROPERTIES;

CREATE TABLE agent_todo_inform_claimant_lender_end_smi_todo_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`housingDeclarationId`, `toDoProperties`.`housingDeclarationId`) as toDoProperties_housingDeclarationId, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_inform_claimant_lender_end_smi_todo_properties
 src_agent_core_agenttodo_agent_todo_inform_claimant_lender_end_smi_todo_properties 
 where `_removed`.`toDoProperties`.`type`='INFORM_CLAIMANT_LENDER_END_SMI_TODO_PROPERTIES' or `toDoProperties`.`type`='INFORM_CLAIMANT_LENDER_END_SMI_TODO_PROPERTIES';


!echo ------------------------;
!echo ------------------------ agent_todo_RTE_TO_DO_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_rte_to_do_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_rte_to_do_properties(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`assessmentPeriodId`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`assessmentPeriodId`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_RTE_TO_DO_PROPERTIES;

CREATE TABLE agent_todo_rte_to_do_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`assessmentPeriodId`, `toDoProperties`.`assessmentPeriodId`) as toDoProperties_assessmentPeriodId, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_rte_to_do_properties
 src_agent_core_agenttodo_agent_todo_rte_to_do_properties 
 where `_removed`.`toDoProperties`.`type`='RTE_TO_DO_PROPERTIES' or `toDoProperties`.`type`='RTE_TO_DO_PROPERTIES';


!echo ------------------------;
!echo ------------------------ agent_todo_WORK_ALLOWANCE_CHANGES_CONTACT_CLAIMANT;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_work_allowance_changes_contact_claimant
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_work_allowance_changes_contact_claimant(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`allowance`:STRING
,`totalEarnings`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`allowance`:STRING
,`totalEarnings`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_WORK_ALLOWANCE_CHANGES_CONTACT_CLAIMANT;

CREATE TABLE agent_todo_work_allowance_changes_contact_claimant STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`allowance`, `toDoProperties`.`allowance`) as toDoProperties_allowance, 
COALESCE(`_removed`.`toDoProperties`.`totalEarnings`, `toDoProperties`.`totalEarnings`) as toDoProperties_totalEarnings, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_work_allowance_changes_contact_claimant
 src_agent_core_agenttodo_agent_todo_work_allowance_changes_contact_claimant 
 where `_removed`.`toDoProperties`.`type`='WORK_ALLOWANCE_CHANGES_CONTACT_CLAIMANT' or `toDoProperties`.`type`='WORK_ALLOWANCE_CHANGES_CONTACT_CLAIMANT';


!echo ------------------------;
!echo ------------------------ journal_WhoLivesWithYouSummaryJournalEntry;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_journal_journal_wholiveswithyousummaryjournalentry
;

CREATE EXTERNAL TABLE src_core_journal_journal_wholiveswithyousummaryjournalentry(
`journalEntryProperties` STRUCT<`whoLivesWithYouSummary`:STRUCT<`children`:ARRAY<STRUCT<`disabilityDetails`:STRUCT<`dlaCareComponent`:STRING
,`pipDailyLivingComponent`:STRING
,`receivingDisabilityLivingAllowance`:BOOLEAN
,`receivingPersonalIndependencePayment`:BOOLEAN
,`registeredBlind`:BOOLEAN>
,`nonDependantDetails`:STRUCT<`awayOnArmedForcesOperations`:BOOLEAN
,`personIsClaimantsChild`:BOOLEAN
,`primaryCarer`:STRING
,`receivingArmedForcesIndependencePayment`:BOOLEAN
,`receivingAttendanceAllowance`:BOOLEAN
,`receivingCarersAllowance`:BOOLEAN
,`receivingDisabilityLivingAllowance`:BOOLEAN
,`receivingPersonalIndependencePayment`:BOOLEAN
,`receivingStatePensionCredit`:BOOLEAN>
,`temporaryAbsence`:STRUCT<`abroadForMoreThanOneMonth`:BOOLEAN
,`inPrison`:BOOLEAN
,`inTheCareOfLocalAuthority`:BOOLEAN>
,`adoptedOrUnderGuardianship`:BOOLEAN
,`childId`:STRING
,`dateOfBirth`:STRING
,`firstName`:STRING
,`fullName`:STRING
,`inQualifyingFullTimeEducation`:BOOLEAN
>>
,`dateOfChange`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`contractId`:STRING
,`hasExceptionToTwoChildPolicy`:BOOLEAN
,`primaryCarerName`:STRING
,`processId`:STRING
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`journalId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`journalEntryProperties`:STRUCT<`whoLivesWithYouSummary`:STRUCT<`children`:ARRAY<STRUCT<`disabilityDetails`:STRUCT<`dlaCareComponent`:STRING
,`pipDailyLivingComponent`:STRING
,`receivingDisabilityLivingAllowance`:BOOLEAN
,`receivingPersonalIndependencePayment`:BOOLEAN
,`registeredBlind`:BOOLEAN>
,`nonDependantDetails`:STRUCT<`awayOnArmedForcesOperations`:BOOLEAN
,`personIsClaimantsChild`:BOOLEAN
,`primaryCarer`:STRING
,`receivingArmedForcesIndependencePayment`:BOOLEAN
,`receivingAttendanceAllowance`:BOOLEAN
,`receivingCarersAllowance`:BOOLEAN
,`receivingDisabilityLivingAllowance`:BOOLEAN
,`receivingPersonalIndependencePayment`:BOOLEAN
,`receivingStatePensionCredit`:BOOLEAN>
,`temporaryAbsence`:STRUCT<`abroadForMoreThanOneMonth`:BOOLEAN
,`inPrison`:BOOLEAN
,`inTheCareOfLocalAuthority`:BOOLEAN>
,`adoptedOrUnderGuardianship`:BOOLEAN
,`childId`:STRING
,`dateOfBirth`:STRING
,`firstName`:STRING
,`fullName`:STRING
,`inQualifyingFullTimeEducation`:BOOLEAN
>>
,`dateOfChange`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`contractId`:STRING
,`hasExceptionToTwoChildPolicy`:BOOLEAN
,`primaryCarerName`:STRING
,`processId`:STRING
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`journalId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/journal';

DROP TABLE IF EXISTS journal_WhoLivesWithYouSummaryJournalEntry;

CREATE TABLE journal_wholiveswithyousummaryjournalentry STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(CAST(`removed_exploded_journalentryproperties_wholiveswithyousummary_children`.`adoptedOrUnderGuardianship` as STRING), CAST(`exploded_journalentryproperties_wholiveswithyousummary_children`.`adoptedOrUnderGuardianship` as STRING)) as journalEntryProperties_whoLivesWithYouSummary_children_adoptedOrUnderGuardianship, 
COALESCE(`removed_exploded_journalentryproperties_wholiveswithyousummary_children`.`childId`, `exploded_journalentryproperties_wholiveswithyousummary_children`.`childId`) as journalEntryProperties_whoLivesWithYouSummary_children_childId, 
COALESCE(`removed_exploded_journalentryproperties_wholiveswithyousummary_children`.`dateOfBirth`, `exploded_journalentryproperties_wholiveswithyousummary_children`.`dateOfBirth`) as journalEntryProperties_whoLivesWithYouSummary_children_dateOfBirth, 
COALESCE(`removed_exploded_journalentryproperties_wholiveswithyousummary_children`.`disabilityDetails`.`dlaCareComponent`, `exploded_journalentryproperties_wholiveswithyousummary_children`.`disabilityDetails`.`dlaCareComponent`) as journalEntryProperties_whoLivesWithYouSummary_children_disabilityDetails_dlaCareComponent, 
COALESCE(`removed_exploded_journalentryproperties_wholiveswithyousummary_children`.`disabilityDetails`.`pipDailyLivingComponent`, `exploded_journalentryproperties_wholiveswithyousummary_children`.`disabilityDetails`.`pipDailyLivingComponent`) as journalEntryProperties_whoLivesWithYouSummary_children_disabilityDetails_pipDailyLivingComponent, 
COALESCE(CAST(`removed_exploded_journalentryproperties_wholiveswithyousummary_children`.`disabilityDetails`.`receivingDisabilityLivingAllowance` as STRING), CAST(`exploded_journalentryproperties_wholiveswithyousummary_children`.`disabilityDetails`.`receivingDisabilityLivingAllowance` as STRING)) as journalEntryProperties_whoLivesWithYouSummary_children_disabilityDetails_receivingDisabilityLivingAllowance, 
COALESCE(CAST(`removed_exploded_journalentryproperties_wholiveswithyousummary_children`.`disabilityDetails`.`receivingPersonalIndependencePayment` as STRING), CAST(`exploded_journalentryproperties_wholiveswithyousummary_children`.`disabilityDetails`.`receivingPersonalIndependencePayment` as STRING)) as journalEntryProperties_whoLivesWithYouSummary_children_disabilityDetails_receivingPersonalIndependencePayment, 
COALESCE(CAST(`removed_exploded_journalentryproperties_wholiveswithyousummary_children`.`disabilityDetails`.`registeredBlind` as STRING), CAST(`exploded_journalentryproperties_wholiveswithyousummary_children`.`disabilityDetails`.`registeredBlind` as STRING)) as journalEntryProperties_whoLivesWithYouSummary_children_disabilityDetails_registeredBlind, 
COALESCE(`removed_exploded_journalentryproperties_wholiveswithyousummary_children`.`firstName`, `exploded_journalentryproperties_wholiveswithyousummary_children`.`firstName`) as journalEntryProperties_whoLivesWithYouSummary_children_firstName, 
COALESCE(`removed_exploded_journalentryproperties_wholiveswithyousummary_children`.`fullName`, `exploded_journalentryproperties_wholiveswithyousummary_children`.`fullName`) as journalEntryProperties_whoLivesWithYouSummary_children_fullName, 
COALESCE(CAST(`removed_exploded_journalentryproperties_wholiveswithyousummary_children`.`inQualifyingFullTimeEducation` as STRING), CAST(`exploded_journalentryproperties_wholiveswithyousummary_children`.`inQualifyingFullTimeEducation` as STRING)) as journalEntryProperties_whoLivesWithYouSummary_children_inQualifyingFullTimeEducation, 
COALESCE(CAST(`removed_exploded_journalentryproperties_wholiveswithyousummary_children`.`nonDependantDetails`.`awayOnArmedForcesOperations` as STRING), CAST(`exploded_journalentryproperties_wholiveswithyousummary_children`.`nonDependantDetails`.`awayOnArmedForcesOperations` as STRING)) as journalEntryProperties_whoLivesWithYouSummary_children_nonDependantDetails_awayOnArmedForcesOperations, 
COALESCE(CAST(`removed_exploded_journalentryproperties_wholiveswithyousummary_children`.`nonDependantDetails`.`personIsClaimantsChild` as STRING), CAST(`exploded_journalentryproperties_wholiveswithyousummary_children`.`nonDependantDetails`.`personIsClaimantsChild` as STRING)) as journalEntryProperties_whoLivesWithYouSummary_children_nonDependantDetails_personIsClaimantsChild, 
COALESCE(`removed_exploded_journalentryproperties_wholiveswithyousummary_children`.`nonDependantDetails`.`primaryCarer`, `exploded_journalentryproperties_wholiveswithyousummary_children`.`nonDependantDetails`.`primaryCarer`) as journalEntryProperties_whoLivesWithYouSummary_children_nonDependantDetails_primaryCarer, 
COALESCE(CAST(`removed_exploded_journalentryproperties_wholiveswithyousummary_children`.`nonDependantDetails`.`receivingArmedForcesIndependencePayment` as STRING), CAST(`exploded_journalentryproperties_wholiveswithyousummary_children`.`nonDependantDetails`.`receivingArmedForcesIndependencePayment` as STRING)) as journalEntryProperties_whoLivesWithYouSummary_children_nonDependantDetails_receivingArmedForcesIndependencePayment, 
COALESCE(CAST(`removed_exploded_journalentryproperties_wholiveswithyousummary_children`.`nonDependantDetails`.`receivingAttendanceAllowance` as STRING), CAST(`exploded_journalentryproperties_wholiveswithyousummary_children`.`nonDependantDetails`.`receivingAttendanceAllowance` as STRING)) as journalEntryProperties_whoLivesWithYouSummary_children_nonDependantDetails_receivingAttendanceAllowance, 
COALESCE(CAST(`removed_exploded_journalentryproperties_wholiveswithyousummary_children`.`nonDependantDetails`.`receivingCarersAllowance` as STRING), CAST(`exploded_journalentryproperties_wholiveswithyousummary_children`.`nonDependantDetails`.`receivingCarersAllowance` as STRING)) as journalEntryProperties_whoLivesWithYouSummary_children_nonDependantDetails_receivingCarersAllowance, 
COALESCE(CAST(`removed_exploded_journalentryproperties_wholiveswithyousummary_children`.`nonDependantDetails`.`receivingDisabilityLivingAllowance` as STRING), CAST(`exploded_journalentryproperties_wholiveswithyousummary_children`.`nonDependantDetails`.`receivingDisabilityLivingAllowance` as STRING)) as journalEntryProperties_whoLivesWithYouSummary_children_nonDependantDetails_receivingDisabilityLivingAllowance, 
COALESCE(CAST(`removed_exploded_journalentryproperties_wholiveswithyousummary_children`.`nonDependantDetails`.`receivingPersonalIndependencePayment` as STRING), CAST(`exploded_journalentryproperties_wholiveswithyousummary_children`.`nonDependantDetails`.`receivingPersonalIndependencePayment` as STRING)) as journalEntryProperties_whoLivesWithYouSummary_children_nonDependantDetails_receivingPersonalIndependencePayment, 
COALESCE(CAST(`removed_exploded_journalentryproperties_wholiveswithyousummary_children`.`nonDependantDetails`.`receivingStatePensionCredit` as STRING), CAST(`exploded_journalentryproperties_wholiveswithyousummary_children`.`nonDependantDetails`.`receivingStatePensionCredit` as STRING)) as journalEntryProperties_whoLivesWithYouSummary_children_nonDependantDetails_receivingStatePensionCredit, 
COALESCE(CAST(`removed_exploded_journalentryproperties_wholiveswithyousummary_children`.`temporaryAbsence`.`abroadForMoreThanOneMonth` as STRING), CAST(`exploded_journalentryproperties_wholiveswithyousummary_children`.`temporaryAbsence`.`abroadForMoreThanOneMonth` as STRING)) as journalEntryProperties_whoLivesWithYouSummary_children_temporaryAbsence_abroadForMoreThanOneMonth, 
COALESCE(CAST(`removed_exploded_journalentryproperties_wholiveswithyousummary_children`.`temporaryAbsence`.`inPrison` as STRING), CAST(`exploded_journalentryproperties_wholiveswithyousummary_children`.`temporaryAbsence`.`inPrison` as STRING)) as journalEntryProperties_whoLivesWithYouSummary_children_temporaryAbsence_inPrison, 
COALESCE(CAST(`removed_exploded_journalentryproperties_wholiveswithyousummary_children`.`temporaryAbsence`.`inTheCareOfLocalAuthority` as STRING), CAST(`exploded_journalentryproperties_wholiveswithyousummary_children`.`temporaryAbsence`.`inTheCareOfLocalAuthority` as STRING)) as journalEntryProperties_whoLivesWithYouSummary_children_temporaryAbsence_inTheCareOfLocalAuthority, 
COALESCE(`_removed`.`journalEntryProperties`.`whoLivesWithYouSummary`.`contractId`, `journalEntryProperties`.`whoLivesWithYouSummary`.`contractId`) as journalEntryProperties_whoLivesWithYouSummary_contractId, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`whoLivesWithYouSummary`.`dateOfChange`.`hasDate` as STRING), CAST(`journalEntryProperties`.`whoLivesWithYouSummary`.`dateOfChange`.`hasDate` as STRING)) as journalEntryProperties_whoLivesWithYouSummary_dateOfChange_hasDate, 
COALESCE(`_removed`.`journalEntryProperties`.`whoLivesWithYouSummary`.`dateOfChange`.`knownDate`, `journalEntryProperties`.`whoLivesWithYouSummary`.`dateOfChange`.`knownDate`) as journalEntryProperties_whoLivesWithYouSummary_dateOfChange_knownDate, 
COALESCE(`_removed`.`journalEntryProperties`.`whoLivesWithYouSummary`.`dateOfChange`.`type`, `journalEntryProperties`.`whoLivesWithYouSummary`.`dateOfChange`.`type`) as journalEntryProperties_whoLivesWithYouSummary_dateOfChange_type, 
COALESCE(`_removed`.`journalEntryProperties`.`whoLivesWithYouSummary`.`dateOfChange`.`date`, `journalEntryProperties`.`whoLivesWithYouSummary`.`dateOfChange`.`date`) as journalEntryProperties_whoLivesWithYouSummary_dateOfChange_date, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`whoLivesWithYouSummary`.`hasExceptionToTwoChildPolicy` as STRING), CAST(`journalEntryProperties`.`whoLivesWithYouSummary`.`hasExceptionToTwoChildPolicy` as STRING)) as journalEntryProperties_whoLivesWithYouSummary_hasExceptionToTwoChildPolicy, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`whoLivesWithYouSummary`.`paymentEffectiveDate`.`hasDate` as STRING), CAST(`journalEntryProperties`.`whoLivesWithYouSummary`.`paymentEffectiveDate`.`hasDate` as STRING)) as journalEntryProperties_whoLivesWithYouSummary_paymentEffectiveDate_hasDate, 
COALESCE(`_removed`.`journalEntryProperties`.`whoLivesWithYouSummary`.`paymentEffectiveDate`.`knownDate`, `journalEntryProperties`.`whoLivesWithYouSummary`.`paymentEffectiveDate`.`knownDate`) as journalEntryProperties_whoLivesWithYouSummary_paymentEffectiveDate_knownDate, 
COALESCE(`_removed`.`journalEntryProperties`.`whoLivesWithYouSummary`.`paymentEffectiveDate`.`type`, `journalEntryProperties`.`whoLivesWithYouSummary`.`paymentEffectiveDate`.`type`) as journalEntryProperties_whoLivesWithYouSummary_paymentEffectiveDate_type, 
COALESCE(`_removed`.`journalEntryProperties`.`whoLivesWithYouSummary`.`paymentEffectiveDate`.`date`, `journalEntryProperties`.`whoLivesWithYouSummary`.`paymentEffectiveDate`.`date`) as journalEntryProperties_whoLivesWithYouSummary_paymentEffectiveDate_date, 
COALESCE(`_removed`.`journalEntryProperties`.`whoLivesWithYouSummary`.`primaryCarerName`, `journalEntryProperties`.`whoLivesWithYouSummary`.`primaryCarerName`) as journalEntryProperties_whoLivesWithYouSummary_primaryCarerName, 
COALESCE(`_removed`.`journalEntryProperties`.`whoLivesWithYouSummary`.`processId`, `journalEntryProperties`.`whoLivesWithYouSummary`.`processId`) as journalEntryProperties_whoLivesWithYouSummary_processId, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`whoLivesWithYouSummary`.`confirmationRequired` as STRING), CAST(`journalEntryProperties`.`whoLivesWithYouSummary`.`confirmationRequired` as STRING)) as journalEntryProperties_whoLivesWithYouSummary_confirmationRequired, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`whoLivesWithYouSummary`.`hideDetailsForPartnerDeclaration` as STRING), CAST(`journalEntryProperties`.`whoLivesWithYouSummary`.`hideDetailsForPartnerDeclaration` as STRING)) as journalEntryProperties_whoLivesWithYouSummary_hideDetailsForPartnerDeclaration, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`whoLivesWithYouSummary`.`perClaimant` as STRING), CAST(`journalEntryProperties`.`whoLivesWithYouSummary`.`perClaimant` as STRING)) as journalEntryProperties_whoLivesWithYouSummary_perClaimant, 
COALESCE(`_removed`.`journalEntryProperties`.`whoLivesWithYouSummary`.`type`, `journalEntryProperties`.`whoLivesWithYouSummary`.`type`) as journalEntryProperties_whoLivesWithYouSummary_type, 
COALESCE(`_removed`.`journalEntryProperties`.`type`, `journalEntryProperties`.`type`) as journalEntryProperties_type, 
COALESCE(`_removed`.`_id`.`journalId`, `_id`.`journalId`) as id FROM src_core_journal_journal_wholiveswithyousummaryjournalentry
 LATERAL VIEW OUTER EXPLODE(`journalEntryProperties`.`whoLivesWithYouSummary`.`children`) view_exploded_journalentryproperties_wholiveswithyousummary_children AS exploded_journalentryproperties_wholiveswithyousummary_children 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`journalEntryProperties`.`whoLivesWithYouSummary`.`children`) view_removed_exploded_journalentryproperties_wholiveswithyousummary_children AS removed_exploded_journalentryproperties_wholiveswithyousummary_children 
 
 where `_removed`.`journalEntryProperties`.`type`='WhoLivesWithYouSummaryJournalEntry' or `journalEntryProperties`.`type`='WhoLivesWithYouSummaryJournalEntry';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_REVIEW_CLAIMANT_TODO;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_review_claimant_todo
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_review_claimant_todo(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`agentNotes`:STRING
,`claimantNotes`:STRING
,`dateTimeCompleted`:STRING
,`deadlineDate`:STRING
,`deadlineTime`:STRING
,`timeCompleted`:STRING
,`todoTitle`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`agentNotes`:STRING
,`claimantNotes`:STRING
,`dateTimeCompleted`:STRING
,`deadlineDate`:STRING
,`deadlineTime`:STRING
,`timeCompleted`:STRING
,`todoTitle`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_REVIEW_CLAIMANT_TODO;

CREATE TABLE agent_todo_archive_review_claimant_todo STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`agentNotes`, `toDoProperties`.`agentNotes`) as toDoProperties_agentNotes, 
COALESCE(`_removed`.`toDoProperties`.`claimantNotes`, `toDoProperties`.`claimantNotes`) as toDoProperties_claimantNotes, 
COALESCE(`_removed`.`toDoProperties`.`dateTimeCompleted`, `toDoProperties`.`dateTimeCompleted`) as toDoProperties_dateTimeCompleted, 
COALESCE(`_removed`.`toDoProperties`.`deadlineDate`, `toDoProperties`.`deadlineDate`) as toDoProperties_deadlineDate, 
COALESCE(`_removed`.`toDoProperties`.`deadlineTime`, `toDoProperties`.`deadlineTime`) as toDoProperties_deadlineTime, 
COALESCE(`_removed`.`toDoProperties`.`timeCompleted`, `toDoProperties`.`timeCompleted`) as toDoProperties_timeCompleted, 
COALESCE(`_removed`.`toDoProperties`.`todoTitle`, `toDoProperties`.`todoTitle`) as toDoProperties_todoTitle, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_review_claimant_todo
 src_agent_core_agenttodoarchive_agent_todo_archive_review_claimant_todo 
 where `_removed`.`toDoProperties`.`type`='REVIEW_CLAIMANT_TODO' or `toDoProperties`.`type`='REVIEW_CLAIMANT_TODO';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_WORK_AND_EARNINGS_SUMMARY;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_work_and_earnings_summary
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_work_and_earnings_summary(
`toDoProperties` STRUCT<`workAndEarningsSummary`:STRUCT<`dateOfChange`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`earnings`:STRUCT<`amount`:STRING
,`hoursPerWeek`:STRING
,`paymentFrequency`:STRING>
,`futureEmployment`:STRUCT<`expectedEarnings`:STRING
,`hoursPerWeek`:STRING
,`paymentFrequency`:STRING
,`startDate`:STRING
,`startingEmployment`:BOOLEAN>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`employerAndMaternityAllowanceSummary`:STRUCT<`maternityAllowance`:BOOLEAN
,`maternityAllowanceAmount`:STRING
,`maternityAllowancePaymentFrequency`:STRING
,`otherEmployerPaymentFrequency`:STRING
,`otherPayFromEmployer`:BOOLEAN
,`otherPayFromEmployerAmount`:STRING>
,`workStatusSummary`:STRUCT<`dateStoppedWorking`:STRING
,`stoppedWorkingInLast9Months`:BOOLEAN>
,`claimantId`:STRING
,`contractId`:STRING
,`employmentStatus`:STRING
,`expectedPreviousEarnings`:STRING
,`name`:STRING
,`processId`:STRING
,`startingSelfEmployment`:BOOLEAN
,`working`:BOOLEAN
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`workAndEarningsSummary`:STRUCT<`dateOfChange`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`earnings`:STRUCT<`amount`:STRING
,`hoursPerWeek`:STRING
,`paymentFrequency`:STRING>
,`futureEmployment`:STRUCT<`expectedEarnings`:STRING
,`hoursPerWeek`:STRING
,`paymentFrequency`:STRING
,`startDate`:STRING
,`startingEmployment`:BOOLEAN>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`employerAndMaternityAllowanceSummary`:STRUCT<`maternityAllowance`:BOOLEAN
,`maternityAllowanceAmount`:STRING
,`maternityAllowancePaymentFrequency`:STRING
,`otherEmployerPaymentFrequency`:STRING
,`otherPayFromEmployer`:BOOLEAN
,`otherPayFromEmployerAmount`:STRING>
,`workStatusSummary`:STRUCT<`dateStoppedWorking`:STRING
,`stoppedWorkingInLast9Months`:BOOLEAN>
,`claimantId`:STRING
,`contractId`:STRING
,`employmentStatus`:STRING
,`expectedPreviousEarnings`:STRING
,`name`:STRING
,`processId`:STRING
,`startingSelfEmployment`:BOOLEAN
,`working`:BOOLEAN
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_WORK_AND_EARNINGS_SUMMARY;

CREATE TABLE agent_todo_archive_work_and_earnings_summary STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`claimantId`, `toDoProperties`.`workAndEarningsSummary`.`claimantId`) as toDoProperties_workAndEarningsSummary_claimantId, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`contractId`, `toDoProperties`.`workAndEarningsSummary`.`contractId`) as toDoProperties_workAndEarningsSummary_contractId, 
COALESCE(CAST(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`dateOfChange`.`hasDate` as STRING), CAST(`toDoProperties`.`workAndEarningsSummary`.`dateOfChange`.`hasDate` as STRING)) as toDoProperties_workAndEarningsSummary_dateOfChange_hasDate, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`dateOfChange`.`knownDate`, `toDoProperties`.`workAndEarningsSummary`.`dateOfChange`.`knownDate`) as toDoProperties_workAndEarningsSummary_dateOfChange_knownDate, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`dateOfChange`.`type`, `toDoProperties`.`workAndEarningsSummary`.`dateOfChange`.`type`) as toDoProperties_workAndEarningsSummary_dateOfChange_type, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`dateOfChange`.`date`, `toDoProperties`.`workAndEarningsSummary`.`dateOfChange`.`date`) as toDoProperties_workAndEarningsSummary_dateOfChange_date, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`earnings`.`amount`, `toDoProperties`.`workAndEarningsSummary`.`earnings`.`amount`) as toDoProperties_workAndEarningsSummary_earnings_amount, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`earnings`.`hoursPerWeek`, `toDoProperties`.`workAndEarningsSummary`.`earnings`.`hoursPerWeek`) as toDoProperties_workAndEarningsSummary_earnings_hoursPerWeek, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`earnings`.`paymentFrequency`, `toDoProperties`.`workAndEarningsSummary`.`earnings`.`paymentFrequency`) as toDoProperties_workAndEarningsSummary_earnings_paymentFrequency, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`employmentStatus`, `toDoProperties`.`workAndEarningsSummary`.`employmentStatus`) as toDoProperties_workAndEarningsSummary_employmentStatus, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`expectedPreviousEarnings`, `toDoProperties`.`workAndEarningsSummary`.`expectedPreviousEarnings`) as toDoProperties_workAndEarningsSummary_expectedPreviousEarnings, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`futureEmployment`.`expectedEarnings`, `toDoProperties`.`workAndEarningsSummary`.`futureEmployment`.`expectedEarnings`) as toDoProperties_workAndEarningsSummary_futureEmployment_expectedEarnings, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`futureEmployment`.`hoursPerWeek`, `toDoProperties`.`workAndEarningsSummary`.`futureEmployment`.`hoursPerWeek`) as toDoProperties_workAndEarningsSummary_futureEmployment_hoursPerWeek, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`futureEmployment`.`paymentFrequency`, `toDoProperties`.`workAndEarningsSummary`.`futureEmployment`.`paymentFrequency`) as toDoProperties_workAndEarningsSummary_futureEmployment_paymentFrequency, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`futureEmployment`.`startDate`, `toDoProperties`.`workAndEarningsSummary`.`futureEmployment`.`startDate`) as toDoProperties_workAndEarningsSummary_futureEmployment_startDate, 
COALESCE(CAST(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`futureEmployment`.`startingEmployment` as STRING), CAST(`toDoProperties`.`workAndEarningsSummary`.`futureEmployment`.`startingEmployment` as STRING)) as toDoProperties_workAndEarningsSummary_futureEmployment_startingEmployment, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`name`, `toDoProperties`.`workAndEarningsSummary`.`name`) as toDoProperties_workAndEarningsSummary_name, 
COALESCE(CAST(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`paymentEffectiveDate`.`hasDate` as STRING), CAST(`toDoProperties`.`workAndEarningsSummary`.`paymentEffectiveDate`.`hasDate` as STRING)) as toDoProperties_workAndEarningsSummary_paymentEffectiveDate_hasDate, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`paymentEffectiveDate`.`knownDate`, `toDoProperties`.`workAndEarningsSummary`.`paymentEffectiveDate`.`knownDate`) as toDoProperties_workAndEarningsSummary_paymentEffectiveDate_knownDate, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`paymentEffectiveDate`.`type`, `toDoProperties`.`workAndEarningsSummary`.`paymentEffectiveDate`.`type`) as toDoProperties_workAndEarningsSummary_paymentEffectiveDate_type, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`paymentEffectiveDate`.`date`, `toDoProperties`.`workAndEarningsSummary`.`paymentEffectiveDate`.`date`) as toDoProperties_workAndEarningsSummary_paymentEffectiveDate_date, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`processId`, `toDoProperties`.`workAndEarningsSummary`.`processId`) as toDoProperties_workAndEarningsSummary_processId, 
COALESCE(CAST(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`startingSelfEmployment` as STRING), CAST(`toDoProperties`.`workAndEarningsSummary`.`startingSelfEmployment` as STRING)) as toDoProperties_workAndEarningsSummary_startingSelfEmployment, 
COALESCE(CAST(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`working` as STRING), CAST(`toDoProperties`.`workAndEarningsSummary`.`working` as STRING)) as toDoProperties_workAndEarningsSummary_working, 
COALESCE(CAST(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`confirmationRequired` as STRING), CAST(`toDoProperties`.`workAndEarningsSummary`.`confirmationRequired` as STRING)) as toDoProperties_workAndEarningsSummary_confirmationRequired, 
COALESCE(CAST(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`employerAndMaternityAllowanceSummary`.`maternityAllowance` as STRING), CAST(`toDoProperties`.`workAndEarningsSummary`.`employerAndMaternityAllowanceSummary`.`maternityAllowance` as STRING)) as toDoProperties_workAndEarningsSummary_employerAndMaternityAllowanceSummary_maternityAllowance, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`employerAndMaternityAllowanceSummary`.`maternityAllowanceAmount`, `toDoProperties`.`workAndEarningsSummary`.`employerAndMaternityAllowanceSummary`.`maternityAllowanceAmount`) as toDoProperties_workAndEarningsSummary_employerAndMaternityAllowanceSummary_maternityAllowanceAmount, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`employerAndMaternityAllowanceSummary`.`maternityAllowancePaymentFrequency`, `toDoProperties`.`workAndEarningsSummary`.`employerAndMaternityAllowanceSummary`.`maternityAllowancePaymentFrequency`) as toDoProperties_workAndEarningsSummary_employerAndMaternityAllowanceSummary_maternityAllowancePaymentFrequency, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`employerAndMaternityAllowanceSummary`.`otherEmployerPaymentFrequency`, `toDoProperties`.`workAndEarningsSummary`.`employerAndMaternityAllowanceSummary`.`otherEmployerPaymentFrequency`) as toDoProperties_workAndEarningsSummary_employerAndMaternityAllowanceSummary_otherEmployerPaymentFrequency, 
COALESCE(CAST(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`employerAndMaternityAllowanceSummary`.`otherPayFromEmployer` as STRING), CAST(`toDoProperties`.`workAndEarningsSummary`.`employerAndMaternityAllowanceSummary`.`otherPayFromEmployer` as STRING)) as toDoProperties_workAndEarningsSummary_employerAndMaternityAllowanceSummary_otherPayFromEmployer, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`employerAndMaternityAllowanceSummary`.`otherPayFromEmployerAmount`, `toDoProperties`.`workAndEarningsSummary`.`employerAndMaternityAllowanceSummary`.`otherPayFromEmployerAmount`) as toDoProperties_workAndEarningsSummary_employerAndMaternityAllowanceSummary_otherPayFromEmployerAmount, 
COALESCE(CAST(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`hideDetailsForPartnerDeclaration` as STRING), CAST(`toDoProperties`.`workAndEarningsSummary`.`hideDetailsForPartnerDeclaration` as STRING)) as toDoProperties_workAndEarningsSummary_hideDetailsForPartnerDeclaration, 
COALESCE(CAST(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`perClaimant` as STRING), CAST(`toDoProperties`.`workAndEarningsSummary`.`perClaimant` as STRING)) as toDoProperties_workAndEarningsSummary_perClaimant, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`workStatusSummary`.`dateStoppedWorking`, `toDoProperties`.`workAndEarningsSummary`.`workStatusSummary`.`dateStoppedWorking`) as toDoProperties_workAndEarningsSummary_workStatusSummary_dateStoppedWorking, 
COALESCE(CAST(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`workStatusSummary`.`stoppedWorkingInLast9Months` as STRING), CAST(`toDoProperties`.`workAndEarningsSummary`.`workStatusSummary`.`stoppedWorkingInLast9Months` as STRING)) as toDoProperties_workAndEarningsSummary_workStatusSummary_stoppedWorkingInLast9Months, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`type`, `toDoProperties`.`workAndEarningsSummary`.`type`) as toDoProperties_workAndEarningsSummary_type, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_work_and_earnings_summary
 src_agent_core_agenttodoarchive_agent_todo_archive_work_and_earnings_summary 
 where `_removed`.`toDoProperties`.`type`='WORK_AND_EARNINGS_SUMMARY' or `toDoProperties`.`type`='WORK_AND_EARNINGS_SUMMARY';


!echo ------------------------;
!echo ------------------------ journal_legacyFraudPenaltyAddedJournalEntry;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_journal_journal_legacyfraudpenaltyaddedjournalentry
;

CREATE EXTERNAL TABLE src_core_journal_journal_legacyfraudpenaltyaddedjournalentry(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`journalEntryProperties` STRUCT<`convictionDate`:STRING
,`determinationDate`:STRING
,`durationInDays`:STRING
,`originalBenefitType`:STRING
,`type`:STRING>
,`_id` STRUCT<`journalId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`journalEntryProperties`:STRUCT<`convictionDate`:STRING
,`determinationDate`:STRING
,`durationInDays`:STRING
,`originalBenefitType`:STRING
,`type`:STRING>
,`_id`:STRUCT<`journalId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/journal';

DROP TABLE IF EXISTS journal_legacyFraudPenaltyAddedJournalEntry;

CREATE TABLE journal_legacyfraudpenaltyaddedjournalentry STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`journalEntryProperties`.`convictionDate`, `journalEntryProperties`.`convictionDate`) as journalEntryProperties_convictionDate, 
COALESCE(`_removed`.`journalEntryProperties`.`determinationDate`, `journalEntryProperties`.`determinationDate`) as journalEntryProperties_determinationDate, 
COALESCE(`_removed`.`journalEntryProperties`.`durationInDays`, `journalEntryProperties`.`durationInDays`) as journalEntryProperties_durationInDays, 
COALESCE(`_removed`.`journalEntryProperties`.`originalBenefitType`, `journalEntryProperties`.`originalBenefitType`) as journalEntryProperties_originalBenefitType, 
COALESCE(`_removed`.`journalEntryProperties`.`type`, `journalEntryProperties`.`type`) as journalEntryProperties_type, 
COALESCE(`_removed`.`_id`.`journalId`, `_id`.`journalId`) as id FROM src_core_journal_journal_legacyfraudpenaltyaddedjournalentry
 src_core_journal_journal_legacyfraudpenaltyaddedjournalentry 
 where `_removed`.`journalEntryProperties`.`type`='legacyFraudPenaltyAddedJournalEntry' or `journalEntryProperties`.`type`='legacyFraudPenaltyAddedJournalEntry';


!echo ------------------------;
!echo ------------------------ agent_todo_CALL_TERMINALLY_ILL_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_call_terminally_ill_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_call_terminally_ill_properties(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`healthAndDisabilityDeclarationId`:STRING
,`startDate`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`healthAndDisabilityDeclarationId`:STRING
,`startDate`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_CALL_TERMINALLY_ILL_PROPERTIES;

CREATE TABLE agent_todo_call_terminally_ill_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`healthAndDisabilityDeclarationId`, `toDoProperties`.`healthAndDisabilityDeclarationId`) as toDoProperties_healthAndDisabilityDeclarationId, 
COALESCE(`_removed`.`toDoProperties`.`startDate`, `toDoProperties`.`startDate`) as toDoProperties_startDate, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_call_terminally_ill_properties
 src_agent_core_agenttodo_agent_todo_call_terminally_ill_properties 
 where `_removed`.`toDoProperties`.`type`='CALL_TERMINALLY_ILL_PROPERTIES' or `toDoProperties`.`type`='CALL_TERMINALLY_ILL_PROPERTIES';


!echo ------------------------;
!echo ------------------------ agent_todo_RELATIONSHIP_ENDED;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_relationship_ended
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_relationship_ended(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`message`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`message`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_RELATIONSHIP_ENDED;

CREATE TABLE agent_todo_relationship_ended STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`message`, `toDoProperties`.`message`) as toDoProperties_message, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_relationship_ended
 src_agent_core_agenttodo_agent_todo_relationship_ended 
 where `_removed`.`toDoProperties`.`type`='RELATIONSHIP_ENDED' or `toDoProperties`.`type`='RELATIONSHIP_ENDED';


!echo ------------------------;
!echo ------------------------ todo_UPLOAD_DOCUMENTS_TODO_CREATION;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_todo_todo_upload_documents_todo_creation
;

CREATE EXTERNAL TABLE src_core_todo_todo_upload_documents_todo_creation(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`properties` STRUCT<`deadlineDate`:STRING
,`instructions`:STRING
,`uploadDocumentsInstructionsType`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`properties`:STRUCT<`deadlineDate`:STRING
,`instructions`:STRING
,`uploadDocumentsInstructionsType`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/toDo';

DROP TABLE IF EXISTS todo_UPLOAD_DOCUMENTS_TODO_CREATION;

CREATE TABLE todo_upload_documents_todo_creation STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`properties`.`deadlineDate`, `properties`.`deadlineDate`) as properties_deadlineDate, 
COALESCE(`_removed`.`properties`.`instructions`, `properties`.`instructions`) as properties_instructions, 
COALESCE(`_removed`.`properties`.`uploadDocumentsInstructionsType`, `properties`.`uploadDocumentsInstructionsType`) as properties_uploadDocumentsInstructionsType, 
COALESCE(`_removed`.`properties`.`type`, `properties`.`type`) as properties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_core_todo_todo_upload_documents_todo_creation
 src_core_todo_todo_upload_documents_todo_creation 
 where `_removed`.`properties`.`type`='UPLOAD_DOCUMENTS_TODO_CREATION' or `properties`.`type`='UPLOAD_DOCUMENTS_TODO_CREATION';


!echo ------------------------;
!echo ------------------------ todo_VERIFY_YOUR_IDENTITY_TODO_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_todo_todo_verify_your_identity_todo_properties
;

CREATE EXTERNAL TABLE src_core_todo_todo_verify_your_identity_todo_properties(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`properties` STRUCT<`proveYourIdentityViaBankAccount`:BOOLEAN
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`properties`:STRUCT<`proveYourIdentityViaBankAccount`:BOOLEAN
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/toDo';

DROP TABLE IF EXISTS todo_VERIFY_YOUR_IDENTITY_TODO_PROPERTIES;

CREATE TABLE todo_verify_your_identity_todo_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(CAST(`_removed`.`properties`.`proveYourIdentityViaBankAccount` as STRING), CAST(`properties`.`proveYourIdentityViaBankAccount` as STRING)) as properties_proveYourIdentityViaBankAccount, 
COALESCE(`_removed`.`properties`.`type`, `properties`.`type`) as properties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_core_todo_todo_verify_your_identity_todo_properties
 src_core_todo_todo_verify_your_identity_todo_properties 
 where `_removed`.`properties`.`type`='VERIFY_YOUR_IDENTITY_TODO_PROPERTIES' or `properties`.`type`='VERIFY_YOUR_IDENTITY_TODO_PROPERTIES';


!echo ------------------------;
!echo ------------------------ todo_CHILDCARE_COSTS_PROVIDE_PROOF;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_todo_todo_childcare_costs_provide_proof
;

CREATE EXTERNAL TABLE src_core_todo_todo_childcare_costs_provide_proof(
`properties` STRUCT<`createdAt`:STRUCT<`d_date`:STRING>
,`declarationId`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`properties`:STRUCT<`createdAt`:STRUCT<`d_date`:STRING>
,`declarationId`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/toDo';

DROP TABLE IF EXISTS todo_CHILDCARE_COSTS_PROVIDE_PROOF;

CREATE TABLE todo_childcare_costs_provide_proof STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`properties`.`createdAt`.`d_date`, LENGTH(`_removed`.`properties`.`createdAt`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`properties`.`createdAt`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`properties`.`createdAt`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`properties`.`createdAt`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`properties`.`createdAt`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`properties`.`createdAt`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`properties`.`createdAt`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`properties`.`createdAt`.`d_date`, LENGTH(`properties`.`createdAt`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`properties`.`createdAt`.`d_date`, 1, 10), ' ', SUBSTR(`properties`.`createdAt`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`properties`.`createdAt`.`d_date`, 1, 10), ' ', SUBSTR(`properties`.`createdAt`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`properties`.`createdAt`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`properties`.`createdAt`.`d_date`, 21, 3)) AS TIMESTAMP) END) as properties_createdAt_d_date, 
COALESCE(`_removed`.`properties`.`declarationId`, `properties`.`declarationId`) as properties_declarationId, 
COALESCE(`_removed`.`properties`.`type`, `properties`.`type`) as properties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_core_todo_todo_childcare_costs_provide_proof
 src_core_todo_todo_childcare_costs_provide_proof 
 where `_removed`.`properties`.`type`='CHILDCARE_COSTS_PROVIDE_PROOF' or `properties`.`type`='CHILDCARE_COSTS_PROVIDE_PROOF';


!echo ------------------------;
!echo ------------------------ agent_todo_PERMITTED_PERIOD_EXPIRING_SOON;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_permitted_period_expiring_soon
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_permitted_period_expiring_soon(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`permittedPeriodExpiry`:STRING
,`permittedPeriodExpiryAsString`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`permittedPeriodExpiry`:STRING
,`permittedPeriodExpiryAsString`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_PERMITTED_PERIOD_EXPIRING_SOON;

CREATE TABLE agent_todo_permitted_period_expiring_soon STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`permittedPeriodExpiry`, `toDoProperties`.`permittedPeriodExpiry`) as toDoProperties_permittedPeriodExpiry, 
COALESCE(`_removed`.`toDoProperties`.`permittedPeriodExpiryAsString`, `toDoProperties`.`permittedPeriodExpiryAsString`) as toDoProperties_permittedPeriodExpiryAsString, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_permitted_period_expiring_soon
 src_agent_core_agenttodo_agent_todo_permitted_period_expiring_soon 
 where `_removed`.`toDoProperties`.`type`='PERMITTED_PERIOD_EXPIRING_SOON' or `toDoProperties`.`type`='PERMITTED_PERIOD_EXPIRING_SOON';


!echo ------------------------;
!echo ------------------------ agent_todo_INVESTIGATE_CIS_INTEREST_ERROR;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_investigate_cis_interest_error
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_investigate_cis_interest_error(
`toDoProperties` STRUCT<`errors`:ARRAY<STRING>
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`errors`:ARRAY<STRING>
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_INVESTIGATE_CIS_INTEREST_ERROR;

CREATE TABLE agent_todo_investigate_cis_interest_error STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`removed_exploded_todoproperties_errors`, `exploded_todoproperties_errors`) as toDoProperties_errors, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_investigate_cis_interest_error
 LATERAL VIEW OUTER EXPLODE(`toDoProperties`.`errors`) view_exploded_todoproperties_errors AS exploded_todoproperties_errors 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`toDoProperties`.`errors`) view_removed_exploded_todoproperties_errors AS removed_exploded_todoproperties_errors 
 
 where `_removed`.`toDoProperties`.`type`='INVESTIGATE_CIS_INTEREST_ERROR' or `toDoProperties`.`type`='INVESTIGATE_CIS_INTEREST_ERROR';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_INVESTIGATE_DUPLICATE_ACCOUNT_TODO_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_investigate_duplicate_account_todo_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_investigate_duplicate_account_todo_properties(
`toDoProperties` STRUCT<`duplicateContractIds`:ARRAY<STRING>
,`alreadyForwardedToFraudTeam`:BOOLEAN
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`duplicateContractIds`:ARRAY<STRING>
,`alreadyForwardedToFraudTeam`:BOOLEAN
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_INVESTIGATE_DUPLICATE_ACCOUNT_TODO_PROPERTIES;

CREATE TABLE agent_todo_archive_investigate_duplicate_account_todo_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(CAST(`_removed`.`toDoProperties`.`alreadyForwardedToFraudTeam` as STRING), CAST(`toDoProperties`.`alreadyForwardedToFraudTeam` as STRING)) as toDoProperties_alreadyForwardedToFraudTeam, 
COALESCE(`removed_exploded_todoproperties_duplicatecontractids`, `exploded_todoproperties_duplicatecontractids`) as toDoProperties_duplicateContractIds, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_investigate_duplicate_account_todo_properties
 LATERAL VIEW OUTER EXPLODE(`toDoProperties`.`duplicateContractIds`) view_exploded_todoproperties_duplicatecontractids AS exploded_todoproperties_duplicatecontractids 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`toDoProperties`.`duplicateContractIds`) view_removed_exploded_todoproperties_duplicatecontractids AS removed_exploded_todoproperties_duplicatecontractids 
 
 where `_removed`.`toDoProperties`.`type`='INVESTIGATE_DUPLICATE_ACCOUNT_TODO_PROPERTIES' or `toDoProperties`.`type`='INVESTIGATE_DUPLICATE_ACCOUNT_TODO_PROPERTIES';


!echo ------------------------;
!echo ------------------------ journal_advanceDeferredJournalEntry;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_journal_journal_advancedeferredjournalentry
;

CREATE EXTERNAL TABLE src_core_journal_journal_advancedeferredjournalentry(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`journalEntryProperties` STRUCT<`advanceAmount`:STRING
,`advanceApprovalDate`:STRING
,`advanceType`:STRING
,`deferredUntilDate`:STRING
,`type`:STRING>
,`_id` STRUCT<`journalId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`journalEntryProperties`:STRUCT<`advanceAmount`:STRING
,`advanceApprovalDate`:STRING
,`advanceType`:STRING
,`deferredUntilDate`:STRING
,`type`:STRING>
,`_id`:STRUCT<`journalId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/journal';

DROP TABLE IF EXISTS journal_advanceDeferredJournalEntry;

CREATE TABLE journal_advancedeferredjournalentry STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`journalEntryProperties`.`advanceAmount`, `journalEntryProperties`.`advanceAmount`) as journalEntryProperties_advanceAmount, 
COALESCE(`_removed`.`journalEntryProperties`.`advanceApprovalDate`, `journalEntryProperties`.`advanceApprovalDate`) as journalEntryProperties_advanceApprovalDate, 
COALESCE(`_removed`.`journalEntryProperties`.`advanceType`, `journalEntryProperties`.`advanceType`) as journalEntryProperties_advanceType, 
COALESCE(`_removed`.`journalEntryProperties`.`deferredUntilDate`, `journalEntryProperties`.`deferredUntilDate`) as journalEntryProperties_deferredUntilDate, 
COALESCE(`_removed`.`journalEntryProperties`.`type`, `journalEntryProperties`.`type`) as journalEntryProperties_type, 
COALESCE(`_removed`.`_id`.`journalId`, `_id`.`journalId`) as id FROM src_core_journal_journal_advancedeferredjournalentry
 src_core_journal_journal_advancedeferredjournalentry 
 where `_removed`.`journalEntryProperties`.`type`='advanceDeferredJournalEntry' or `journalEntryProperties`.`type`='advanceDeferredJournalEntry';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_MAKE_AN_AUTO_CALCULATED_PAYMENT;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_make_an_auto_calculated_payment
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_make_an_auto_calculated_payment(
`toDoProperties` STRUCT<`schedulingProperties`:STRUCT<`amount`:STRING
,`netAmount`:STRING
,`orderNumber`:STRING
,`paymentDueDate`:STRING
,`scheduledPaymentsId`:STRING
,`totalPaymentCount`:STRING>
,`assessmentPeriodId`:STRING
,`automatedPaymentRejectionReason`:STRING
,`calculationId`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`schedulingProperties`:STRUCT<`amount`:STRING
,`netAmount`:STRING
,`orderNumber`:STRING
,`paymentDueDate`:STRING
,`scheduledPaymentsId`:STRING
,`totalPaymentCount`:STRING>
,`assessmentPeriodId`:STRING
,`automatedPaymentRejectionReason`:STRING
,`calculationId`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_MAKE_AN_AUTO_CALCULATED_PAYMENT;

CREATE TABLE agent_todo_archive_make_an_auto_calculated_payment STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`assessmentPeriodId`, `toDoProperties`.`assessmentPeriodId`) as toDoProperties_assessmentPeriodId, 
COALESCE(`_removed`.`toDoProperties`.`automatedPaymentRejectionReason`, `toDoProperties`.`automatedPaymentRejectionReason`) as toDoProperties_automatedPaymentRejectionReason, 
COALESCE(`_removed`.`toDoProperties`.`calculationId`, `toDoProperties`.`calculationId`) as toDoProperties_calculationId, 
COALESCE(`_removed`.`toDoProperties`.`schedulingProperties`.`amount`, `toDoProperties`.`schedulingProperties`.`amount`) as toDoProperties_schedulingProperties_amount, 
COALESCE(`_removed`.`toDoProperties`.`schedulingProperties`.`netAmount`, `toDoProperties`.`schedulingProperties`.`netAmount`) as toDoProperties_schedulingProperties_netAmount, 
COALESCE(`_removed`.`toDoProperties`.`schedulingProperties`.`orderNumber`, `toDoProperties`.`schedulingProperties`.`orderNumber`) as toDoProperties_schedulingProperties_orderNumber, 
COALESCE(`_removed`.`toDoProperties`.`schedulingProperties`.`paymentDueDate`, `toDoProperties`.`schedulingProperties`.`paymentDueDate`) as toDoProperties_schedulingProperties_paymentDueDate, 
COALESCE(`_removed`.`toDoProperties`.`schedulingProperties`.`scheduledPaymentsId`, `toDoProperties`.`schedulingProperties`.`scheduledPaymentsId`) as toDoProperties_schedulingProperties_scheduledPaymentsId, 
COALESCE(`_removed`.`toDoProperties`.`schedulingProperties`.`totalPaymentCount`, `toDoProperties`.`schedulingProperties`.`totalPaymentCount`) as toDoProperties_schedulingProperties_totalPaymentCount, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_make_an_auto_calculated_payment
 src_agent_core_agenttodoarchive_agent_todo_archive_make_an_auto_calculated_payment 
 where `_removed`.`toDoProperties`.`type`='MAKE_AN_AUTO_CALCULATED_PAYMENT' or `toDoProperties`.`type`='MAKE_AN_AUTO_CALCULATED_PAYMENT';


!echo ------------------------;
!echo ------------------------ agent_todo_REPORT_THIS;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_report_this
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_report_this(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`declarationId`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`declarationId`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_REPORT_THIS;

CREATE TABLE agent_todo_report_this STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`declarationId`, `toDoProperties`.`declarationId`) as toDoProperties_declarationId, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_report_this
 src_agent_core_agenttodo_agent_todo_report_this 
 where `_removed`.`toDoProperties`.`type`='REPORT_THIS' or `toDoProperties`.`type`='REPORT_THIS';


!echo ------------------------;
!echo ------------------------ agent_todo_MAKE_A_PAYMENT;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_make_a_payment
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_make_a_payment(
`toDoProperties` STRUCT<`schedulingProperties`:STRUCT<`amount`:STRING
,`netAmount`:STRING
,`orderNumber`:STRING
,`paymentDueDate`:STRING
,`scheduledPaymentsId`:STRING
,`totalPaymentCount`:STRING>
,`assessmentPeriodId`:STRING
,`automatedPaymentRejectionReason`:STRING
,`calculationAttachmentId`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`schedulingProperties`:STRUCT<`amount`:STRING
,`netAmount`:STRING
,`orderNumber`:STRING
,`paymentDueDate`:STRING
,`scheduledPaymentsId`:STRING
,`totalPaymentCount`:STRING>
,`assessmentPeriodId`:STRING
,`automatedPaymentRejectionReason`:STRING
,`calculationAttachmentId`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_MAKE_A_PAYMENT;

CREATE TABLE agent_todo_make_a_payment STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`assessmentPeriodId`, `toDoProperties`.`assessmentPeriodId`) as toDoProperties_assessmentPeriodId, 
COALESCE(`_removed`.`toDoProperties`.`automatedPaymentRejectionReason`, `toDoProperties`.`automatedPaymentRejectionReason`) as toDoProperties_automatedPaymentRejectionReason, 
COALESCE(`_removed`.`toDoProperties`.`calculationAttachmentId`, `toDoProperties`.`calculationAttachmentId`) as toDoProperties_calculationAttachmentId, 
COALESCE(`_removed`.`toDoProperties`.`schedulingProperties`.`amount`, `toDoProperties`.`schedulingProperties`.`amount`) as toDoProperties_schedulingProperties_amount, 
COALESCE(`_removed`.`toDoProperties`.`schedulingProperties`.`netAmount`, `toDoProperties`.`schedulingProperties`.`netAmount`) as toDoProperties_schedulingProperties_netAmount, 
COALESCE(`_removed`.`toDoProperties`.`schedulingProperties`.`orderNumber`, `toDoProperties`.`schedulingProperties`.`orderNumber`) as toDoProperties_schedulingProperties_orderNumber, 
COALESCE(`_removed`.`toDoProperties`.`schedulingProperties`.`paymentDueDate`, `toDoProperties`.`schedulingProperties`.`paymentDueDate`) as toDoProperties_schedulingProperties_paymentDueDate, 
COALESCE(`_removed`.`toDoProperties`.`schedulingProperties`.`scheduledPaymentsId`, `toDoProperties`.`schedulingProperties`.`scheduledPaymentsId`) as toDoProperties_schedulingProperties_scheduledPaymentsId, 
COALESCE(`_removed`.`toDoProperties`.`schedulingProperties`.`totalPaymentCount`, `toDoProperties`.`schedulingProperties`.`totalPaymentCount`) as toDoProperties_schedulingProperties_totalPaymentCount, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_make_a_payment
 src_agent_core_agenttodo_agent_todo_make_a_payment 
 where `_removed`.`toDoProperties`.`type`='MAKE_A_PAYMENT' or `toDoProperties`.`type`='MAKE_A_PAYMENT';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_STOPPED_CARING;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_stopped_caring
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_stopped_caring(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`dueToDeath`:BOOLEAN
,`personCaredForName`:STRING
,`stoppedDate`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`dueToDeath`:BOOLEAN
,`personCaredForName`:STRING
,`stoppedDate`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_STOPPED_CARING;

CREATE TABLE agent_todo_archive_stopped_caring STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(CAST(`_removed`.`toDoProperties`.`dueToDeath` as STRING), CAST(`toDoProperties`.`dueToDeath` as STRING)) as toDoProperties_dueToDeath, 
COALESCE(`_removed`.`toDoProperties`.`personCaredForName`, `toDoProperties`.`personCaredForName`) as toDoProperties_personCaredForName, 
COALESCE(`_removed`.`toDoProperties`.`stoppedDate`, `toDoProperties`.`stoppedDate`) as toDoProperties_stoppedDate, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_stopped_caring
 src_agent_core_agenttodoarchive_agent_todo_archive_stopped_caring 
 where `_removed`.`toDoProperties`.`type`='STOPPED_CARING' or `toDoProperties`.`type`='STOPPED_CARING';


!echo ------------------------;
!echo ------------------------ todo_PREPARE_TO_MEET_WORK_COACH_TODO_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_todo_todo_prepare_to_meet_work_coach_todo_properties
;

CREATE EXTERNAL TABLE src_core_todo_todo_prepare_to_meet_work_coach_todo_properties(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`properties` STRUCT<`prepareToMeetWorkCoachJourney`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`properties`:STRUCT<`prepareToMeetWorkCoachJourney`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/toDo';

DROP TABLE IF EXISTS todo_PREPARE_TO_MEET_WORK_COACH_TODO_PROPERTIES;

CREATE TABLE todo_prepare_to_meet_work_coach_todo_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`properties`.`prepareToMeetWorkCoachJourney`, `properties`.`prepareToMeetWorkCoachJourney`) as properties_prepareToMeetWorkCoachJourney, 
COALESCE(`_removed`.`properties`.`type`, `properties`.`type`) as properties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_core_todo_todo_prepare_to_meet_work_coach_todo_properties
 src_core_todo_todo_prepare_to_meet_work_coach_todo_properties 
 where `_removed`.`properties`.`type`='PREPARE_TO_MEET_WORK_COACH_TODO_PROPERTIES' or `properties`.`type`='PREPARE_TO_MEET_WORK_COACH_TODO_PROPERTIES';


!echo ------------------------;
!echo ------------------------ agent_todo_ADD_CHILD;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_add_child
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_add_child(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`dateOfBirth`:STRING
,`fullName`:STRING
,`gender`:STRING
,`message`:STRING
,`placementDate`:STRING
,`primaryCarerId`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`dateOfBirth`:STRING
,`fullName`:STRING
,`gender`:STRING
,`message`:STRING
,`placementDate`:STRING
,`primaryCarerId`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_ADD_CHILD;

CREATE TABLE agent_todo_add_child STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`dateOfBirth`, `toDoProperties`.`dateOfBirth`) as toDoProperties_dateOfBirth, 
COALESCE(`_removed`.`toDoProperties`.`fullName`, `toDoProperties`.`fullName`) as toDoProperties_fullName, 
COALESCE(`_removed`.`toDoProperties`.`gender`, `toDoProperties`.`gender`) as toDoProperties_gender, 
COALESCE(`_removed`.`toDoProperties`.`message`, `toDoProperties`.`message`) as toDoProperties_message, 
COALESCE(`_removed`.`toDoProperties`.`placementDate`, `toDoProperties`.`placementDate`) as toDoProperties_placementDate, 
COALESCE(`_removed`.`toDoProperties`.`primaryCarerId`, `toDoProperties`.`primaryCarerId`) as toDoProperties_primaryCarerId, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_add_child
 src_agent_core_agenttodo_agent_todo_add_child 
 where `_removed`.`toDoProperties`.`type`='ADD_CHILD' or `toDoProperties`.`type`='ADD_CHILD';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_NON_DEPENDENT_HOUSING_COST_CONTRIBUTION;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_non_dependent_housing_cost_contribution
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_non_dependent_housing_cost_contribution(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`childId`:STRING
,`dateOfBirth`:STRING
,`dla`:BOOLEAN
,`gender`:STRING
,`name`:STRING
,`pip`:BOOLEAN
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`childId`:STRING
,`dateOfBirth`:STRING
,`dla`:BOOLEAN
,`gender`:STRING
,`name`:STRING
,`pip`:BOOLEAN
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_NON_DEPENDENT_HOUSING_COST_CONTRIBUTION;

CREATE TABLE agent_todo_archive_non_dependent_housing_cost_contribution STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`childId`, `toDoProperties`.`childId`) as toDoProperties_childId, 
COALESCE(`_removed`.`toDoProperties`.`dateOfBirth`, `toDoProperties`.`dateOfBirth`) as toDoProperties_dateOfBirth, 
COALESCE(CAST(`_removed`.`toDoProperties`.`dla` as STRING), CAST(`toDoProperties`.`dla` as STRING)) as toDoProperties_dla, 
COALESCE(`_removed`.`toDoProperties`.`gender`, `toDoProperties`.`gender`) as toDoProperties_gender, 
COALESCE(`_removed`.`toDoProperties`.`name`, `toDoProperties`.`name`) as toDoProperties_name, 
COALESCE(CAST(`_removed`.`toDoProperties`.`pip` as STRING), CAST(`toDoProperties`.`pip` as STRING)) as toDoProperties_pip, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_non_dependent_housing_cost_contribution
 src_agent_core_agenttodoarchive_agent_todo_archive_non_dependent_housing_cost_contribution 
 where `_removed`.`toDoProperties`.`type`='NON_DEPENDENT_HOUSING_COST_CONTRIBUTION' or `toDoProperties`.`type`='NON_DEPENDENT_HOUSING_COST_CONTRIBUTION';


!echo ------------------------;
!echo ------------------------ journal_SubmitClaimJournalEntry;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_journal_journal_submitclaimjournalentry
;

CREATE EXTERNAL TABLE src_core_journal_journal_submitclaimjournalentry(
`journalEntryProperties` STRUCT<`declarationSummaryDto`:STRUCT<`childcareSummary`:STRUCT<`childcareProviderSummaries`:ARRAY<STRUCT<`childcareProviderCostsSummaries`:ARRAY<STRUCT<`childcareProviderChildren`:ARRAY<STRUCT<`age`:STRING
,`firstName`:STRING
,`underOne`:BOOLEAN
>>
,`amountPaid`:STRING
,`costId`:STRING
,`datePaid`:STRING
,`periodEnd`:STRING
,`periodStart`:STRING
,`datePaidAsString`:STRING
,`periodEndAsString`:STRING
,`periodStartAsString`:STRING
>>
,`postcode`:STRING
,`providerName`:STRING
,`registrationNumber`:STRING
>>
,`dateOfChange`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`contractId`:STRING
,`hasChildcareCosts`:BOOLEAN
,`processId`:STRING
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`housingSummary`:STRUCT<`rentalSummary`:STRUCT<`jointTenancySummary`:STRUCT<`totalRent`:STRUCT<`monthlyAmount`:STRING
,`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`totalServiceChargePayment`:STRUCT<`monthlyAmount`:STRING
,`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`numberLivingWith`:STRING>
,`socialRentalSummary`:STRUCT<`serviceChargePayment`:STRUCT<`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`rentFreeWeeks`:STRING>
,`privateRentalSummary`:STRUCT<`financialInterest`:BOOLEAN
,`landlordLivesWithYou`:BOOLEAN
,`landlordRelative`:BOOLEAN>
,`rentalPayment`:STRUCT<`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`tenancyAgreementSummary`:STRUCT<`bothYouAndPartnerNamedOnTenancyOrRentalAgreement`:BOOLEAN
,`jointTenancyWithSomeoneOtherThanPartner`:BOOLEAN>
,`dateMovedToAddress`:STRING
,`landlordName`:STRING
,`numberBedrooms`:STRING>
,`ownHomeSummary`:STRUCT<`mortgageDetailsList`:ARRAY<STRUCT<`amount`:STRING
,`forDisabilityAdaptation`:BOOLEAN
,`lender`:STRING
,`lenderCode`:STRING
,`loanReferenceNumber`:STRING
,`mortgageDetailsId`:STRING
>>
,`serviceChargeDetails`:STRUCT<`amount`:STRING
,`frequency`:STRING>
,`hasMortgage`:BOOLEAN
,`paysServiceCharges`:BOOLEAN>
,`councilTax`:STRUCT<`appliedToCouncilTaxReduction`:STRING
,`councilTaxInClaimantName`:BOOLEAN>
,`dateOfChange`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`noApplicableHousingCostsSummary`:STRUCT<`noApplicableHousingCostsType`:STRING>
,`otherHousingTypeSummary`:STRUCT<`otherAccommodationType`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`councilTaxSummary`:STRUCT<`appliedToCouncilTaxReduction`:STRING
,`councilTaxInClaimantName`:BOOLEAN>
,`contractId`:STRING
,`housingTypeMessagePostfix`:STRING
,`processId`:STRING
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`whoLivesWithYouSummary`:STRUCT<`children`:ARRAY<STRUCT<`disabilityDetails`:STRUCT<`dlaCareComponent`:STRING
,`pipDailyLivingComponent`:STRING
,`receivingDisabilityLivingAllowance`:BOOLEAN
,`receivingPersonalIndependencePayment`:BOOLEAN
,`registeredBlind`:BOOLEAN>
,`nonDependantDetails`:STRUCT<`awayOnArmedForcesOperations`:BOOLEAN
,`personIsClaimantsChild`:BOOLEAN
,`primaryCarer`:STRING
,`receivingArmedForcesIndependencePayment`:BOOLEAN
,`receivingAttendanceAllowance`:BOOLEAN
,`receivingCarersAllowance`:BOOLEAN
,`receivingDisabilityLivingAllowance`:BOOLEAN
,`receivingPersonalIndependencePayment`:BOOLEAN
,`receivingStatePensionCredit`:BOOLEAN>
,`temporaryAbsence`:STRUCT<`abroadForMoreThanOneMonth`:BOOLEAN
,`inPrison`:BOOLEAN
,`inTheCareOfLocalAuthority`:BOOLEAN>
,`adoptedOrUnderGuardianship`:BOOLEAN
,`childId`:STRING
,`dateOfBirth`:STRING
,`firstName`:STRING
,`fullName`:STRING
,`inQualifyingFullTimeEducation`:BOOLEAN
>>
,`dateOfChange`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`contractId`:STRING
,`hasExceptionToTwoChildPolicy`:BOOLEAN
,`primaryCarerName`:STRING
,`processId`:STRING
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`healthSummaries`:ARRAY<STRUCT<`dateOfChange`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`armedForcesIndependencePayment`:BOOLEAN
,`attendanceAllowance`:BOOLEAN
,`claimantId`:STRING
,`constantAttendanceAllowance`:BOOLEAN
,`contractId`:STRING
,`dlaAllowance`:BOOLEAN
,`name`:STRING
,`piPayment`:BOOLEAN
,`processId`:STRING
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING
>>
,`workAndEarningsSummaries`:ARRAY<STRUCT<`dateOfChange`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`earnings`:STRUCT<`amount`:STRING
,`hoursPerWeek`:STRING
,`paymentFrequency`:STRING>
,`futureEmployment`:STRUCT<`expectedEarnings`:STRING
,`hoursPerWeek`:STRING
,`paymentFrequency`:STRING
,`startDate`:STRING
,`startingEmployment`:BOOLEAN>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`employerAndMaternityAllowanceSummary`:STRUCT<`maternityAllowance`:BOOLEAN
,`maternityAllowanceAmount`:STRING
,`maternityAllowancePaymentFrequency`:STRING
,`otherEmployerPaymentFrequency`:STRING
,`otherPayFromEmployer`:BOOLEAN
,`otherPayFromEmployerAmount`:STRING>
,`workStatusSummary`:STRUCT<`dateStoppedWorking`:STRING
,`stoppedWorkingInLast9Months`:BOOLEAN>
,`claimantId`:STRING
,`contractId`:STRING
,`employmentStatus`:STRING
,`expectedPreviousEarnings`:STRING
,`name`:STRING
,`processId`:STRING
,`startingSelfEmployment`:BOOLEAN
,`working`:BOOLEAN
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING
>>
,`carerSummaries`:ARRAY<STRUCT<`caringCircumstancesSummary`:STRUCT<`caringForSomeone`:BOOLEAN
,`personReceivesBenefit`:BOOLEAN>
,`claimantDeclaredChanges`:STRUCT<`d_date`:STRING>
,`dateOfChange`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`otherCaringResponsibilitiesSummary`:STRUCT<`caringForSomeoneElse`:BOOLEAN
,`personReceivesBenefit`:BOOLEAN>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`stoppedCaringCircumstancesSummary`:STRUCT<`dateStoppedCaring`:STRING
,`dueToDeath`:BOOLEAN>
,`timeOffCircumstancesSummary`:STRUCT<`endDate`:STRING
,`startDate`:STRING>
,`whoYouCareForCircumstancesSummary`:STRUCT<`addressNumber`:STRING
,`dateOfBirth`:STRING
,`firstName`:STRING
,`lastName`:STRING
,`middleName`:STRING
,`postcode`:STRING
,`relationship`:STRING
,`townCity`:STRING>
,`claimantId`:STRING
,`contractId`:STRING
,`moreThan35Hours`:BOOLEAN
,`name`:STRING
,`processId`:STRING
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING
>>
,`addressSummary`:STRUCT<`effectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`contractId`:STRING
,`postcode`:STRING
,`processId`:STRING
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`bankDetailsSummary`:STRUCT<`effectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`accountNumberLast4Digits`:STRING
,`contractId`:STRING
,`obfuscatedRollNumber`:STRING
,`processId`:STRING
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`partner`:STRUCT<`effectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`contactPreference`:STRING
,`contractId`:STRING
,`emailAddress`:STRING
,`firstName`:STRING
,`lastName`:STRING
,`middleName`:STRING
,`mobileNumber`:STRING
,`name`:STRING
,`processId`:STRING
,`claimantId`:STRING
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`person`:STRUCT<`effectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`contactPreference`:STRING
,`contractId`:STRING
,`emailAddress`:STRING
,`firstName`:STRING
,`lastName`:STRING
,`middleName`:STRING
,`mobileNumber`:STRING
,`name`:STRING
,`processId`:STRING
,`claimantId`:STRING
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`healthAndDisabilitySummaries`:ARRAY<STRUCT<`agentToCallTerminallyIllClaimant`:BOOLEAN
,`claimantId`:STRING
,`contractId`:STRING
,`copiedFromDeclarationId`:STRING
,`name`:STRING
,`partnerDeclaration`:BOOLEAN
,`processId`:STRING
,`reportingIllness`:BOOLEAN
,`restrictedAbilityToWork`:BOOLEAN
,`confirmationRequired`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING
>>
,`nationalitySummaries`:ARRAY<STRUCT<`claimantId`:STRING
,`contractId`:STRING
,`name`:STRING
,`processId`:STRING
,`returnAfterAbsence`:BOOLEAN
,`ukNational`:BOOLEAN
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING
>>
,`partnerQuestion`:STRUCT<`claimType`:STRING
,`claimantId`:STRING
,`claimantName`:STRING
,`confirmationRequired`:BOOLEAN
,`contractId`:STRING
,`partnerName`:STRING
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>>
,`newDeclarationSummaryDto`:STRUCT<`addressSummary`:STRUCT<`declarationSummaryKey`:STRUCT<`claimantId`:STRING
,`claimantToDoType`:STRING>
,`summary`:STRUCT<`confirmationRequired`:BOOLEAN
,`contractId`:STRING
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN>
,`hasFullDetails`:BOOLEAN>
,`bankDetailsSummary`:STRUCT<`declarationSummaryKey`:STRUCT<`claimantId`:STRING
,`claimantToDoType`:STRING>
,`summary`:STRUCT<`confirmationRequired`:BOOLEAN
,`contractId`:STRING
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN>
,`hasFullDetails`:BOOLEAN>
,`childcareSummary`:STRUCT<`declarationSummaryKey`:STRUCT<`claimantId`:STRING
,`claimantToDoType`:STRING>
,`summary`:STRUCT<`confirmationRequired`:BOOLEAN
,`contractId`:STRING
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN>
,`hasFullDetails`:BOOLEAN>
,`housingSummary`:STRUCT<`declarationSummaryKey`:STRUCT<`claimantId`:STRING
,`claimantToDoType`:STRING>
,`summary`:STRUCT<`confirmationRequired`:BOOLEAN
,`contractId`:STRING
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN>
,`hasFullDetails`:BOOLEAN>
,`partner`:STRUCT<`declarationSummaryKey`:STRUCT<`claimantId`:STRING
,`claimantToDoType`:STRING>
,`summary`:STRUCT<`confirmationRequired`:BOOLEAN
,`contractId`:STRING
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN>
,`hasFullDetails`:BOOLEAN>
,`partnerQuestion`:STRUCT<`declarationSummaryKey`:STRUCT<`claimantId`:STRING
,`claimantToDoType`:STRING>
,`summary`:STRUCT<`confirmationRequired`:BOOLEAN
,`contractId`:STRING
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN>
,`hasFullDetails`:BOOLEAN>
,`person`:STRUCT<`declarationSummaryKey`:STRUCT<`claimantId`:STRING
,`claimantToDoType`:STRING>
,`summary`:STRUCT<`confirmationRequired`:BOOLEAN
,`contractId`:STRING
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN>
,`hasFullDetails`:BOOLEAN>
,`whoLivesWithYouSummary`:STRUCT<`declarationSummaryKey`:STRUCT<`claimantId`:STRING
,`claimantToDoType`:STRING>
,`summary`:STRUCT<`confirmationRequired`:BOOLEAN
,`contractId`:STRING
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN>
,`hasFullDetails`:BOOLEAN>
,`savingsAndInvestmentSummary`:STRUCT<`declarationSummaryKey`:STRUCT<`claimantId`:STRING
,`claimantToDoType`:STRING>
,`summary`:STRUCT<`confirmationRequired`:BOOLEAN
,`contractId`:STRING
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN>
,`hasFullDetails`:BOOLEAN>>
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`journalId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`journalEntryProperties`:STRUCT<`declarationSummaryDto`:STRUCT<`childcareSummary`:STRUCT<`childcareProviderSummaries`:ARRAY<STRUCT<`childcareProviderCostsSummaries`:ARRAY<STRUCT<`childcareProviderChildren`:ARRAY<STRUCT<`age`:STRING
,`firstName`:STRING
,`underOne`:BOOLEAN
>>
,`amountPaid`:STRING
,`costId`:STRING
,`datePaid`:STRING
,`periodEnd`:STRING
,`periodStart`:STRING
,`datePaidAsString`:STRING
,`periodEndAsString`:STRING
,`periodStartAsString`:STRING
>>
,`postcode`:STRING
,`providerName`:STRING
,`registrationNumber`:STRING
>>
,`dateOfChange`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`contractId`:STRING
,`hasChildcareCosts`:BOOLEAN
,`processId`:STRING
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`housingSummary`:STRUCT<`rentalSummary`:STRUCT<`jointTenancySummary`:STRUCT<`totalRent`:STRUCT<`monthlyAmount`:STRING
,`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`totalServiceChargePayment`:STRUCT<`monthlyAmount`:STRING
,`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`numberLivingWith`:STRING>
,`socialRentalSummary`:STRUCT<`serviceChargePayment`:STRUCT<`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`rentFreeWeeks`:STRING>
,`privateRentalSummary`:STRUCT<`financialInterest`:BOOLEAN
,`landlordLivesWithYou`:BOOLEAN
,`landlordRelative`:BOOLEAN>
,`rentalPayment`:STRUCT<`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`tenancyAgreementSummary`:STRUCT<`bothYouAndPartnerNamedOnTenancyOrRentalAgreement`:BOOLEAN
,`jointTenancyWithSomeoneOtherThanPartner`:BOOLEAN>
,`dateMovedToAddress`:STRING
,`landlordName`:STRING
,`numberBedrooms`:STRING>
,`ownHomeSummary`:STRUCT<`mortgageDetailsList`:ARRAY<STRUCT<`amount`:STRING
,`forDisabilityAdaptation`:BOOLEAN
,`lender`:STRING
,`lenderCode`:STRING
,`loanReferenceNumber`:STRING
,`mortgageDetailsId`:STRING
>>
,`serviceChargeDetails`:STRUCT<`amount`:STRING
,`frequency`:STRING>
,`hasMortgage`:BOOLEAN
,`paysServiceCharges`:BOOLEAN>
,`councilTax`:STRUCT<`appliedToCouncilTaxReduction`:STRING
,`councilTaxInClaimantName`:BOOLEAN>
,`dateOfChange`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`noApplicableHousingCostsSummary`:STRUCT<`noApplicableHousingCostsType`:STRING>
,`otherHousingTypeSummary`:STRUCT<`otherAccommodationType`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`councilTaxSummary`:STRUCT<`appliedToCouncilTaxReduction`:STRING
,`councilTaxInClaimantName`:BOOLEAN>
,`contractId`:STRING
,`housingTypeMessagePostfix`:STRING
,`processId`:STRING
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`whoLivesWithYouSummary`:STRUCT<`children`:ARRAY<STRUCT<`disabilityDetails`:STRUCT<`dlaCareComponent`:STRING
,`pipDailyLivingComponent`:STRING
,`receivingDisabilityLivingAllowance`:BOOLEAN
,`receivingPersonalIndependencePayment`:BOOLEAN
,`registeredBlind`:BOOLEAN>
,`nonDependantDetails`:STRUCT<`awayOnArmedForcesOperations`:BOOLEAN
,`personIsClaimantsChild`:BOOLEAN
,`primaryCarer`:STRING
,`receivingArmedForcesIndependencePayment`:BOOLEAN
,`receivingAttendanceAllowance`:BOOLEAN
,`receivingCarersAllowance`:BOOLEAN
,`receivingDisabilityLivingAllowance`:BOOLEAN
,`receivingPersonalIndependencePayment`:BOOLEAN
,`receivingStatePensionCredit`:BOOLEAN>
,`temporaryAbsence`:STRUCT<`abroadForMoreThanOneMonth`:BOOLEAN
,`inPrison`:BOOLEAN
,`inTheCareOfLocalAuthority`:BOOLEAN>
,`adoptedOrUnderGuardianship`:BOOLEAN
,`childId`:STRING
,`dateOfBirth`:STRING
,`firstName`:STRING
,`fullName`:STRING
,`inQualifyingFullTimeEducation`:BOOLEAN
>>
,`dateOfChange`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`contractId`:STRING
,`hasExceptionToTwoChildPolicy`:BOOLEAN
,`primaryCarerName`:STRING
,`processId`:STRING
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`healthSummaries`:ARRAY<STRUCT<`dateOfChange`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`armedForcesIndependencePayment`:BOOLEAN
,`attendanceAllowance`:BOOLEAN
,`claimantId`:STRING
,`constantAttendanceAllowance`:BOOLEAN
,`contractId`:STRING
,`dlaAllowance`:BOOLEAN
,`name`:STRING
,`piPayment`:BOOLEAN
,`processId`:STRING
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING
>>
,`workAndEarningsSummaries`:ARRAY<STRUCT<`dateOfChange`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`earnings`:STRUCT<`amount`:STRING
,`hoursPerWeek`:STRING
,`paymentFrequency`:STRING>
,`futureEmployment`:STRUCT<`expectedEarnings`:STRING
,`hoursPerWeek`:STRING
,`paymentFrequency`:STRING
,`startDate`:STRING
,`startingEmployment`:BOOLEAN>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`employerAndMaternityAllowanceSummary`:STRUCT<`maternityAllowance`:BOOLEAN
,`maternityAllowanceAmount`:STRING
,`maternityAllowancePaymentFrequency`:STRING
,`otherEmployerPaymentFrequency`:STRING
,`otherPayFromEmployer`:BOOLEAN
,`otherPayFromEmployerAmount`:STRING>
,`workStatusSummary`:STRUCT<`dateStoppedWorking`:STRING
,`stoppedWorkingInLast9Months`:BOOLEAN>
,`claimantId`:STRING
,`contractId`:STRING
,`employmentStatus`:STRING
,`expectedPreviousEarnings`:STRING
,`name`:STRING
,`processId`:STRING
,`startingSelfEmployment`:BOOLEAN
,`working`:BOOLEAN
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING
>>
,`carerSummaries`:ARRAY<STRUCT<`caringCircumstancesSummary`:STRUCT<`caringForSomeone`:BOOLEAN
,`personReceivesBenefit`:BOOLEAN>
,`claimantDeclaredChanges`:STRUCT<`d_date`:STRING>
,`dateOfChange`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`otherCaringResponsibilitiesSummary`:STRUCT<`caringForSomeoneElse`:BOOLEAN
,`personReceivesBenefit`:BOOLEAN>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`stoppedCaringCircumstancesSummary`:STRUCT<`dateStoppedCaring`:STRING
,`dueToDeath`:BOOLEAN>
,`timeOffCircumstancesSummary`:STRUCT<`endDate`:STRING
,`startDate`:STRING>
,`whoYouCareForCircumstancesSummary`:STRUCT<`addressNumber`:STRING
,`dateOfBirth`:STRING
,`firstName`:STRING
,`lastName`:STRING
,`middleName`:STRING
,`postcode`:STRING
,`relationship`:STRING
,`townCity`:STRING>
,`claimantId`:STRING
,`contractId`:STRING
,`moreThan35Hours`:BOOLEAN
,`name`:STRING
,`processId`:STRING
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING
>>
,`addressSummary`:STRUCT<`effectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`contractId`:STRING
,`postcode`:STRING
,`processId`:STRING
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`bankDetailsSummary`:STRUCT<`effectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`accountNumberLast4Digits`:STRING
,`contractId`:STRING
,`obfuscatedRollNumber`:STRING
,`processId`:STRING
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`partner`:STRUCT<`effectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`contactPreference`:STRING
,`contractId`:STRING
,`emailAddress`:STRING
,`firstName`:STRING
,`lastName`:STRING
,`middleName`:STRING
,`mobileNumber`:STRING
,`name`:STRING
,`processId`:STRING
,`claimantId`:STRING
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`person`:STRUCT<`effectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`contactPreference`:STRING
,`contractId`:STRING
,`emailAddress`:STRING
,`firstName`:STRING
,`lastName`:STRING
,`middleName`:STRING
,`mobileNumber`:STRING
,`name`:STRING
,`processId`:STRING
,`claimantId`:STRING
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`healthAndDisabilitySummaries`:ARRAY<STRUCT<`agentToCallTerminallyIllClaimant`:BOOLEAN
,`claimantId`:STRING
,`contractId`:STRING
,`copiedFromDeclarationId`:STRING
,`name`:STRING
,`partnerDeclaration`:BOOLEAN
,`processId`:STRING
,`reportingIllness`:BOOLEAN
,`restrictedAbilityToWork`:BOOLEAN
,`confirmationRequired`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING
>>
,`nationalitySummaries`:ARRAY<STRUCT<`claimantId`:STRING
,`contractId`:STRING
,`name`:STRING
,`processId`:STRING
,`returnAfterAbsence`:BOOLEAN
,`ukNational`:BOOLEAN
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING
>>
,`partnerQuestion`:STRUCT<`claimType`:STRING
,`claimantId`:STRING
,`claimantName`:STRING
,`confirmationRequired`:BOOLEAN
,`contractId`:STRING
,`partnerName`:STRING
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>>
,`newDeclarationSummaryDto`:STRUCT<`addressSummary`:STRUCT<`declarationSummaryKey`:STRUCT<`claimantId`:STRING
,`claimantToDoType`:STRING>
,`summary`:STRUCT<`confirmationRequired`:BOOLEAN
,`contractId`:STRING
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN>
,`hasFullDetails`:BOOLEAN>
,`bankDetailsSummary`:STRUCT<`declarationSummaryKey`:STRUCT<`claimantId`:STRING
,`claimantToDoType`:STRING>
,`summary`:STRUCT<`confirmationRequired`:BOOLEAN
,`contractId`:STRING
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN>
,`hasFullDetails`:BOOLEAN>
,`childcareSummary`:STRUCT<`declarationSummaryKey`:STRUCT<`claimantId`:STRING
,`claimantToDoType`:STRING>
,`summary`:STRUCT<`confirmationRequired`:BOOLEAN
,`contractId`:STRING
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN>
,`hasFullDetails`:BOOLEAN>
,`housingSummary`:STRUCT<`declarationSummaryKey`:STRUCT<`claimantId`:STRING
,`claimantToDoType`:STRING>
,`summary`:STRUCT<`confirmationRequired`:BOOLEAN
,`contractId`:STRING
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN>
,`hasFullDetails`:BOOLEAN>
,`partner`:STRUCT<`declarationSummaryKey`:STRUCT<`claimantId`:STRING
,`claimantToDoType`:STRING>
,`summary`:STRUCT<`confirmationRequired`:BOOLEAN
,`contractId`:STRING
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN>
,`hasFullDetails`:BOOLEAN>
,`partnerQuestion`:STRUCT<`declarationSummaryKey`:STRUCT<`claimantId`:STRING
,`claimantToDoType`:STRING>
,`summary`:STRUCT<`confirmationRequired`:BOOLEAN
,`contractId`:STRING
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN>
,`hasFullDetails`:BOOLEAN>
,`person`:STRUCT<`declarationSummaryKey`:STRUCT<`claimantId`:STRING
,`claimantToDoType`:STRING>
,`summary`:STRUCT<`confirmationRequired`:BOOLEAN
,`contractId`:STRING
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN>
,`hasFullDetails`:BOOLEAN>
,`whoLivesWithYouSummary`:STRUCT<`declarationSummaryKey`:STRUCT<`claimantId`:STRING
,`claimantToDoType`:STRING>
,`summary`:STRUCT<`confirmationRequired`:BOOLEAN
,`contractId`:STRING
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN>
,`hasFullDetails`:BOOLEAN>
,`savingsAndInvestmentSummary`:STRUCT<`declarationSummaryKey`:STRUCT<`claimantId`:STRING
,`claimantToDoType`:STRING>
,`summary`:STRUCT<`confirmationRequired`:BOOLEAN
,`contractId`:STRING
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN>
,`hasFullDetails`:BOOLEAN>>
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`journalId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/journal';

DROP TABLE IF EXISTS journal_SubmitClaimJournalEntry;

CREATE TABLE journal_submitclaimjournalentry STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`addressSummary`.`contractId`, `journalEntryProperties`.`declarationSummaryDto`.`addressSummary`.`contractId`) as journalEntryProperties_declarationSummaryDto_addressSummary_contractId, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`addressSummary`.`effectiveDate`.`hasDate` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`addressSummary`.`effectiveDate`.`hasDate` as STRING)) as journalEntryProperties_declarationSummaryDto_addressSummary_effectiveDate_hasDate, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`addressSummary`.`effectiveDate`.`knownDate`, `journalEntryProperties`.`declarationSummaryDto`.`addressSummary`.`effectiveDate`.`knownDate`) as journalEntryProperties_declarationSummaryDto_addressSummary_effectiveDate_knownDate, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`addressSummary`.`effectiveDate`.`type`, `journalEntryProperties`.`declarationSummaryDto`.`addressSummary`.`effectiveDate`.`type`) as journalEntryProperties_declarationSummaryDto_addressSummary_effectiveDate_type, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`addressSummary`.`effectiveDate`.`date`, `journalEntryProperties`.`declarationSummaryDto`.`addressSummary`.`effectiveDate`.`date`) as journalEntryProperties_declarationSummaryDto_addressSummary_effectiveDate_date, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`addressSummary`.`paymentEffectiveDate`.`hasDate` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`addressSummary`.`paymentEffectiveDate`.`hasDate` as STRING)) as journalEntryProperties_declarationSummaryDto_addressSummary_paymentEffectiveDate_hasDate, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`addressSummary`.`paymentEffectiveDate`.`knownDate`, `journalEntryProperties`.`declarationSummaryDto`.`addressSummary`.`paymentEffectiveDate`.`knownDate`) as journalEntryProperties_declarationSummaryDto_addressSummary_paymentEffectiveDate_knownDate, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`addressSummary`.`paymentEffectiveDate`.`type`, `journalEntryProperties`.`declarationSummaryDto`.`addressSummary`.`paymentEffectiveDate`.`type`) as journalEntryProperties_declarationSummaryDto_addressSummary_paymentEffectiveDate_type, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`addressSummary`.`paymentEffectiveDate`.`date`, `journalEntryProperties`.`declarationSummaryDto`.`addressSummary`.`paymentEffectiveDate`.`date`) as journalEntryProperties_declarationSummaryDto_addressSummary_paymentEffectiveDate_date, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`addressSummary`.`postcode`, `journalEntryProperties`.`declarationSummaryDto`.`addressSummary`.`postcode`) as journalEntryProperties_declarationSummaryDto_addressSummary_postcode, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`addressSummary`.`processId`, `journalEntryProperties`.`declarationSummaryDto`.`addressSummary`.`processId`) as journalEntryProperties_declarationSummaryDto_addressSummary_processId, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`addressSummary`.`confirmationRequired` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`addressSummary`.`confirmationRequired` as STRING)) as journalEntryProperties_declarationSummaryDto_addressSummary_confirmationRequired, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`addressSummary`.`hideDetailsForPartnerDeclaration` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`addressSummary`.`hideDetailsForPartnerDeclaration` as STRING)) as journalEntryProperties_declarationSummaryDto_addressSummary_hideDetailsForPartnerDeclaration, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`addressSummary`.`perClaimant` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`addressSummary`.`perClaimant` as STRING)) as journalEntryProperties_declarationSummaryDto_addressSummary_perClaimant, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`addressSummary`.`type`, `journalEntryProperties`.`declarationSummaryDto`.`addressSummary`.`type`) as journalEntryProperties_declarationSummaryDto_addressSummary_type, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`bankDetailsSummary`.`accountNumberLast4Digits`, `journalEntryProperties`.`declarationSummaryDto`.`bankDetailsSummary`.`accountNumberLast4Digits`) as journalEntryProperties_declarationSummaryDto_bankDetailsSummary_accountNumberLast4Digits, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`bankDetailsSummary`.`contractId`, `journalEntryProperties`.`declarationSummaryDto`.`bankDetailsSummary`.`contractId`) as journalEntryProperties_declarationSummaryDto_bankDetailsSummary_contractId, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`bankDetailsSummary`.`effectiveDate`.`hasDate` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`bankDetailsSummary`.`effectiveDate`.`hasDate` as STRING)) as journalEntryProperties_declarationSummaryDto_bankDetailsSummary_effectiveDate_hasDate, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`bankDetailsSummary`.`effectiveDate`.`knownDate`, `journalEntryProperties`.`declarationSummaryDto`.`bankDetailsSummary`.`effectiveDate`.`knownDate`) as journalEntryProperties_declarationSummaryDto_bankDetailsSummary_effectiveDate_knownDate, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`bankDetailsSummary`.`effectiveDate`.`type`, `journalEntryProperties`.`declarationSummaryDto`.`bankDetailsSummary`.`effectiveDate`.`type`) as journalEntryProperties_declarationSummaryDto_bankDetailsSummary_effectiveDate_type, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`bankDetailsSummary`.`effectiveDate`.`date`, `journalEntryProperties`.`declarationSummaryDto`.`bankDetailsSummary`.`effectiveDate`.`date`) as journalEntryProperties_declarationSummaryDto_bankDetailsSummary_effectiveDate_date, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`bankDetailsSummary`.`obfuscatedRollNumber`, `journalEntryProperties`.`declarationSummaryDto`.`bankDetailsSummary`.`obfuscatedRollNumber`) as journalEntryProperties_declarationSummaryDto_bankDetailsSummary_obfuscatedRollNumber, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`bankDetailsSummary`.`paymentEffectiveDate`.`hasDate` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`bankDetailsSummary`.`paymentEffectiveDate`.`hasDate` as STRING)) as journalEntryProperties_declarationSummaryDto_bankDetailsSummary_paymentEffectiveDate_hasDate, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`bankDetailsSummary`.`paymentEffectiveDate`.`knownDate`, `journalEntryProperties`.`declarationSummaryDto`.`bankDetailsSummary`.`paymentEffectiveDate`.`knownDate`) as journalEntryProperties_declarationSummaryDto_bankDetailsSummary_paymentEffectiveDate_knownDate, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`bankDetailsSummary`.`paymentEffectiveDate`.`type`, `journalEntryProperties`.`declarationSummaryDto`.`bankDetailsSummary`.`paymentEffectiveDate`.`type`) as journalEntryProperties_declarationSummaryDto_bankDetailsSummary_paymentEffectiveDate_type, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`bankDetailsSummary`.`paymentEffectiveDate`.`date`, `journalEntryProperties`.`declarationSummaryDto`.`bankDetailsSummary`.`paymentEffectiveDate`.`date`) as journalEntryProperties_declarationSummaryDto_bankDetailsSummary_paymentEffectiveDate_date, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`bankDetailsSummary`.`processId`, `journalEntryProperties`.`declarationSummaryDto`.`bankDetailsSummary`.`processId`) as journalEntryProperties_declarationSummaryDto_bankDetailsSummary_processId, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`bankDetailsSummary`.`confirmationRequired` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`bankDetailsSummary`.`confirmationRequired` as STRING)) as journalEntryProperties_declarationSummaryDto_bankDetailsSummary_confirmationRequired, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`bankDetailsSummary`.`hideDetailsForPartnerDeclaration` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`bankDetailsSummary`.`hideDetailsForPartnerDeclaration` as STRING)) as journalEntryProperties_declarationSummaryDto_bankDetailsSummary_hideDetailsForPartnerDeclaration, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`bankDetailsSummary`.`perClaimant` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`bankDetailsSummary`.`perClaimant` as STRING)) as journalEntryProperties_declarationSummaryDto_bankDetailsSummary_perClaimant, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`bankDetailsSummary`.`type`, `journalEntryProperties`.`declarationSummaryDto`.`bankDetailsSummary`.`type`) as journalEntryProperties_declarationSummaryDto_bankDetailsSummary_type, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_childcaresummary_childcareprovidersummaries_exploded_childcareprovidercostssummaries`.`amountPaid`, `exploded_journalentryproperties_declarationsummarydto_childcaresummary_childcareprovidersummaries_exploded_childcareprovidercostssummaries`.`amountPaid`) as journalEntryProperties_declarationSummaryDto_childcareSummary_childcareProviderSummaries_childcareProviderCostsSummaries_amountPaid, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_childcaresummary_childcareprovidersummaries_exploded_childcareprovidercostssummaries_exploded_childcareproviderchildren`.`age`, `exploded_journalentryproperties_declarationsummarydto_childcaresummary_childcareprovidersummaries_exploded_childcareprovidercostssummaries_exploded_childcareproviderchildren`.`age`) as journalEntryProperties_declarationSummaryDto_childcareSummary_childcareProviderSummaries_childcareProviderCostsSummaries_childcareProviderChildren_age, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_childcaresummary_childcareprovidersummaries_exploded_childcareprovidercostssummaries_exploded_childcareproviderchildren`.`firstName`, `exploded_journalentryproperties_declarationsummarydto_childcaresummary_childcareprovidersummaries_exploded_childcareprovidercostssummaries_exploded_childcareproviderchildren`.`firstName`) as journalEntryProperties_declarationSummaryDto_childcareSummary_childcareProviderSummaries_childcareProviderCostsSummaries_childcareProviderChildren_firstName, 
COALESCE(CAST(`removed_exploded_journalentryproperties_declarationsummarydto_childcaresummary_childcareprovidersummaries_exploded_childcareprovidercostssummaries_exploded_childcareproviderchildren`.`underOne` as STRING), CAST(`exploded_journalentryproperties_declarationsummarydto_childcaresummary_childcareprovidersummaries_exploded_childcareprovidercostssummaries_exploded_childcareproviderchildren`.`underOne` as STRING)) as journalEntryProperties_declarationSummaryDto_childcareSummary_childcareProviderSummaries_childcareProviderCostsSummaries_childcareProviderChildren_underOne, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_childcaresummary_childcareprovidersummaries_exploded_childcareprovidercostssummaries`.`costId`, `exploded_journalentryproperties_declarationsummarydto_childcaresummary_childcareprovidersummaries_exploded_childcareprovidercostssummaries`.`costId`) as journalEntryProperties_declarationSummaryDto_childcareSummary_childcareProviderSummaries_childcareProviderCostsSummaries_costId, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_childcaresummary_childcareprovidersummaries_exploded_childcareprovidercostssummaries`.`datePaid`, `exploded_journalentryproperties_declarationsummarydto_childcaresummary_childcareprovidersummaries_exploded_childcareprovidercostssummaries`.`datePaid`) as journalEntryProperties_declarationSummaryDto_childcareSummary_childcareProviderSummaries_childcareProviderCostsSummaries_datePaid, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_childcaresummary_childcareprovidersummaries_exploded_childcareprovidercostssummaries`.`periodEnd`, `exploded_journalentryproperties_declarationsummarydto_childcaresummary_childcareprovidersummaries_exploded_childcareprovidercostssummaries`.`periodEnd`) as journalEntryProperties_declarationSummaryDto_childcareSummary_childcareProviderSummaries_childcareProviderCostsSummaries_periodEnd, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_childcaresummary_childcareprovidersummaries_exploded_childcareprovidercostssummaries`.`periodStart`, `exploded_journalentryproperties_declarationsummarydto_childcaresummary_childcareprovidersummaries_exploded_childcareprovidercostssummaries`.`periodStart`) as journalEntryProperties_declarationSummaryDto_childcareSummary_childcareProviderSummaries_childcareProviderCostsSummaries_periodStart, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_childcaresummary_childcareprovidersummaries_exploded_childcareprovidercostssummaries`.`datePaidAsString`, `exploded_journalentryproperties_declarationsummarydto_childcaresummary_childcareprovidersummaries_exploded_childcareprovidercostssummaries`.`datePaidAsString`) as journalEntryProperties_declarationSummaryDto_childcareSummary_childcareProviderSummaries_childcareProviderCostsSummaries_datePaidAsString, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_childcaresummary_childcareprovidersummaries_exploded_childcareprovidercostssummaries`.`periodEndAsString`, `exploded_journalentryproperties_declarationsummarydto_childcaresummary_childcareprovidersummaries_exploded_childcareprovidercostssummaries`.`periodEndAsString`) as journalEntryProperties_declarationSummaryDto_childcareSummary_childcareProviderSummaries_childcareProviderCostsSummaries_periodEndAsString, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_childcaresummary_childcareprovidersummaries_exploded_childcareprovidercostssummaries`.`periodStartAsString`, `exploded_journalentryproperties_declarationsummarydto_childcaresummary_childcareprovidersummaries_exploded_childcareprovidercostssummaries`.`periodStartAsString`) as journalEntryProperties_declarationSummaryDto_childcareSummary_childcareProviderSummaries_childcareProviderCostsSummaries_periodStartAsString, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_childcaresummary_childcareprovidersummaries`.`postcode`, `exploded_journalentryproperties_declarationsummarydto_childcaresummary_childcareprovidersummaries`.`postcode`) as journalEntryProperties_declarationSummaryDto_childcareSummary_childcareProviderSummaries_postcode, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_childcaresummary_childcareprovidersummaries`.`providerName`, `exploded_journalentryproperties_declarationsummarydto_childcaresummary_childcareprovidersummaries`.`providerName`) as journalEntryProperties_declarationSummaryDto_childcareSummary_childcareProviderSummaries_providerName, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_childcaresummary_childcareprovidersummaries`.`registrationNumber`, `exploded_journalentryproperties_declarationsummarydto_childcaresummary_childcareprovidersummaries`.`registrationNumber`) as journalEntryProperties_declarationSummaryDto_childcareSummary_childcareProviderSummaries_registrationNumber, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`childcareSummary`.`contractId`, `journalEntryProperties`.`declarationSummaryDto`.`childcareSummary`.`contractId`) as journalEntryProperties_declarationSummaryDto_childcareSummary_contractId, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`childcareSummary`.`dateOfChange`.`hasDate` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`childcareSummary`.`dateOfChange`.`hasDate` as STRING)) as journalEntryProperties_declarationSummaryDto_childcareSummary_dateOfChange_hasDate, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`childcareSummary`.`dateOfChange`.`knownDate`, `journalEntryProperties`.`declarationSummaryDto`.`childcareSummary`.`dateOfChange`.`knownDate`) as journalEntryProperties_declarationSummaryDto_childcareSummary_dateOfChange_knownDate, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`childcareSummary`.`dateOfChange`.`type`, `journalEntryProperties`.`declarationSummaryDto`.`childcareSummary`.`dateOfChange`.`type`) as journalEntryProperties_declarationSummaryDto_childcareSummary_dateOfChange_type, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`childcareSummary`.`dateOfChange`.`date`, `journalEntryProperties`.`declarationSummaryDto`.`childcareSummary`.`dateOfChange`.`date`) as journalEntryProperties_declarationSummaryDto_childcareSummary_dateOfChange_date, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`childcareSummary`.`hasChildcareCosts` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`childcareSummary`.`hasChildcareCosts` as STRING)) as journalEntryProperties_declarationSummaryDto_childcareSummary_hasChildcareCosts, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`childcareSummary`.`paymentEffectiveDate`.`hasDate` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`childcareSummary`.`paymentEffectiveDate`.`hasDate` as STRING)) as journalEntryProperties_declarationSummaryDto_childcareSummary_paymentEffectiveDate_hasDate, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`childcareSummary`.`paymentEffectiveDate`.`knownDate`, `journalEntryProperties`.`declarationSummaryDto`.`childcareSummary`.`paymentEffectiveDate`.`knownDate`) as journalEntryProperties_declarationSummaryDto_childcareSummary_paymentEffectiveDate_knownDate, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`childcareSummary`.`paymentEffectiveDate`.`type`, `journalEntryProperties`.`declarationSummaryDto`.`childcareSummary`.`paymentEffectiveDate`.`type`) as journalEntryProperties_declarationSummaryDto_childcareSummary_paymentEffectiveDate_type, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`childcareSummary`.`paymentEffectiveDate`.`date`, `journalEntryProperties`.`declarationSummaryDto`.`childcareSummary`.`paymentEffectiveDate`.`date`) as journalEntryProperties_declarationSummaryDto_childcareSummary_paymentEffectiveDate_date, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`childcareSummary`.`processId`, `journalEntryProperties`.`declarationSummaryDto`.`childcareSummary`.`processId`) as journalEntryProperties_declarationSummaryDto_childcareSummary_processId, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`childcareSummary`.`confirmationRequired` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`childcareSummary`.`confirmationRequired` as STRING)) as journalEntryProperties_declarationSummaryDto_childcareSummary_confirmationRequired, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`childcareSummary`.`hideDetailsForPartnerDeclaration` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`childcareSummary`.`hideDetailsForPartnerDeclaration` as STRING)) as journalEntryProperties_declarationSummaryDto_childcareSummary_hideDetailsForPartnerDeclaration, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`childcareSummary`.`perClaimant` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`childcareSummary`.`perClaimant` as STRING)) as journalEntryProperties_declarationSummaryDto_childcareSummary_perClaimant, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`childcareSummary`.`type`, `journalEntryProperties`.`declarationSummaryDto`.`childcareSummary`.`type`) as journalEntryProperties_declarationSummaryDto_childcareSummary_type, 
COALESCE(CAST(`removed_exploded_journalentryproperties_declarationsummarydto_healthanddisabilitysummaries`.`agentToCallTerminallyIllClaimant` as STRING), CAST(`exploded_journalentryproperties_declarationsummarydto_healthanddisabilitysummaries`.`agentToCallTerminallyIllClaimant` as STRING)) as journalEntryProperties_declarationSummaryDto_healthAndDisabilitySummaries_agentToCallTerminallyIllClaimant, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_healthanddisabilitysummaries`.`claimantId`, `exploded_journalentryproperties_declarationsummarydto_healthanddisabilitysummaries`.`claimantId`) as journalEntryProperties_declarationSummaryDto_healthAndDisabilitySummaries_claimantId, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_healthanddisabilitysummaries`.`contractId`, `exploded_journalentryproperties_declarationsummarydto_healthanddisabilitysummaries`.`contractId`) as journalEntryProperties_declarationSummaryDto_healthAndDisabilitySummaries_contractId, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_healthanddisabilitysummaries`.`copiedFromDeclarationId`, `exploded_journalentryproperties_declarationsummarydto_healthanddisabilitysummaries`.`copiedFromDeclarationId`) as journalEntryProperties_declarationSummaryDto_healthAndDisabilitySummaries_copiedFromDeclarationId, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_healthanddisabilitysummaries`.`name`, `exploded_journalentryproperties_declarationsummarydto_healthanddisabilitysummaries`.`name`) as journalEntryProperties_declarationSummaryDto_healthAndDisabilitySummaries_name, 
COALESCE(CAST(`removed_exploded_journalentryproperties_declarationsummarydto_healthanddisabilitysummaries`.`partnerDeclaration` as STRING), CAST(`exploded_journalentryproperties_declarationsummarydto_healthanddisabilitysummaries`.`partnerDeclaration` as STRING)) as journalEntryProperties_declarationSummaryDto_healthAndDisabilitySummaries_partnerDeclaration, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_healthanddisabilitysummaries`.`processId`, `exploded_journalentryproperties_declarationsummarydto_healthanddisabilitysummaries`.`processId`) as journalEntryProperties_declarationSummaryDto_healthAndDisabilitySummaries_processId, 
COALESCE(CAST(`removed_exploded_journalentryproperties_declarationsummarydto_healthanddisabilitysummaries`.`reportingIllness` as STRING), CAST(`exploded_journalentryproperties_declarationsummarydto_healthanddisabilitysummaries`.`reportingIllness` as STRING)) as journalEntryProperties_declarationSummaryDto_healthAndDisabilitySummaries_reportingIllness, 
COALESCE(CAST(`removed_exploded_journalentryproperties_declarationsummarydto_healthanddisabilitysummaries`.`restrictedAbilityToWork` as STRING), CAST(`exploded_journalentryproperties_declarationsummarydto_healthanddisabilitysummaries`.`restrictedAbilityToWork` as STRING)) as journalEntryProperties_declarationSummaryDto_healthAndDisabilitySummaries_restrictedAbilityToWork, 
COALESCE(CAST(`removed_exploded_journalentryproperties_declarationsummarydto_healthanddisabilitysummaries`.`confirmationRequired` as STRING), CAST(`exploded_journalentryproperties_declarationsummarydto_healthanddisabilitysummaries`.`confirmationRequired` as STRING)) as journalEntryProperties_declarationSummaryDto_healthAndDisabilitySummaries_confirmationRequired, 
COALESCE(CAST(`removed_exploded_journalentryproperties_declarationsummarydto_healthanddisabilitysummaries`.`perClaimant` as STRING), CAST(`exploded_journalentryproperties_declarationsummarydto_healthanddisabilitysummaries`.`perClaimant` as STRING)) as journalEntryProperties_declarationSummaryDto_healthAndDisabilitySummaries_perClaimant, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_healthanddisabilitysummaries`.`type`, `exploded_journalentryproperties_declarationsummarydto_healthanddisabilitysummaries`.`type`) as journalEntryProperties_declarationSummaryDto_healthAndDisabilitySummaries_type, 
COALESCE(CAST(`removed_exploded_journalentryproperties_declarationsummarydto_healthsummaries`.`armedForcesIndependencePayment` as STRING), CAST(`exploded_journalentryproperties_declarationsummarydto_healthsummaries`.`armedForcesIndependencePayment` as STRING)) as journalEntryProperties_declarationSummaryDto_healthSummaries_armedForcesIndependencePayment, 
COALESCE(CAST(`removed_exploded_journalentryproperties_declarationsummarydto_healthsummaries`.`attendanceAllowance` as STRING), CAST(`exploded_journalentryproperties_declarationsummarydto_healthsummaries`.`attendanceAllowance` as STRING)) as journalEntryProperties_declarationSummaryDto_healthSummaries_attendanceAllowance, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_healthsummaries`.`claimantId`, `exploded_journalentryproperties_declarationsummarydto_healthsummaries`.`claimantId`) as journalEntryProperties_declarationSummaryDto_healthSummaries_claimantId, 
COALESCE(CAST(`removed_exploded_journalentryproperties_declarationsummarydto_healthsummaries`.`constantAttendanceAllowance` as STRING), CAST(`exploded_journalentryproperties_declarationsummarydto_healthsummaries`.`constantAttendanceAllowance` as STRING)) as journalEntryProperties_declarationSummaryDto_healthSummaries_constantAttendanceAllowance, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_healthsummaries`.`contractId`, `exploded_journalentryproperties_declarationsummarydto_healthsummaries`.`contractId`) as journalEntryProperties_declarationSummaryDto_healthSummaries_contractId, 
COALESCE(CAST(`removed_exploded_journalentryproperties_declarationsummarydto_healthsummaries`.`dateOfChange`.`hasDate` as STRING), CAST(`exploded_journalentryproperties_declarationsummarydto_healthsummaries`.`dateOfChange`.`hasDate` as STRING)) as journalEntryProperties_declarationSummaryDto_healthSummaries_dateOfChange_hasDate, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_healthsummaries`.`dateOfChange`.`knownDate`, `exploded_journalentryproperties_declarationsummarydto_healthsummaries`.`dateOfChange`.`knownDate`) as journalEntryProperties_declarationSummaryDto_healthSummaries_dateOfChange_knownDate, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_healthsummaries`.`dateOfChange`.`type`, `exploded_journalentryproperties_declarationsummarydto_healthsummaries`.`dateOfChange`.`type`) as journalEntryProperties_declarationSummaryDto_healthSummaries_dateOfChange_type, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_healthsummaries`.`dateOfChange`.`date`, `exploded_journalentryproperties_declarationsummarydto_healthsummaries`.`dateOfChange`.`date`) as journalEntryProperties_declarationSummaryDto_healthSummaries_dateOfChange_date, 
COALESCE(CAST(`removed_exploded_journalentryproperties_declarationsummarydto_healthsummaries`.`dlaAllowance` as STRING), CAST(`exploded_journalentryproperties_declarationsummarydto_healthsummaries`.`dlaAllowance` as STRING)) as journalEntryProperties_declarationSummaryDto_healthSummaries_dlaAllowance, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_healthsummaries`.`name`, `exploded_journalentryproperties_declarationsummarydto_healthsummaries`.`name`) as journalEntryProperties_declarationSummaryDto_healthSummaries_name, 
COALESCE(CAST(`removed_exploded_journalentryproperties_declarationsummarydto_healthsummaries`.`paymentEffectiveDate`.`hasDate` as STRING), CAST(`exploded_journalentryproperties_declarationsummarydto_healthsummaries`.`paymentEffectiveDate`.`hasDate` as STRING)) as journalEntryProperties_declarationSummaryDto_healthSummaries_paymentEffectiveDate_hasDate, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_healthsummaries`.`paymentEffectiveDate`.`knownDate`, `exploded_journalentryproperties_declarationsummarydto_healthsummaries`.`paymentEffectiveDate`.`knownDate`) as journalEntryProperties_declarationSummaryDto_healthSummaries_paymentEffectiveDate_knownDate, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_healthsummaries`.`paymentEffectiveDate`.`type`, `exploded_journalentryproperties_declarationsummarydto_healthsummaries`.`paymentEffectiveDate`.`type`) as journalEntryProperties_declarationSummaryDto_healthSummaries_paymentEffectiveDate_type, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_healthsummaries`.`paymentEffectiveDate`.`date`, `exploded_journalentryproperties_declarationsummarydto_healthsummaries`.`paymentEffectiveDate`.`date`) as journalEntryProperties_declarationSummaryDto_healthSummaries_paymentEffectiveDate_date, 
COALESCE(CAST(`removed_exploded_journalentryproperties_declarationsummarydto_healthsummaries`.`piPayment` as STRING), CAST(`exploded_journalentryproperties_declarationsummarydto_healthsummaries`.`piPayment` as STRING)) as journalEntryProperties_declarationSummaryDto_healthSummaries_piPayment, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_healthsummaries`.`processId`, `exploded_journalentryproperties_declarationsummarydto_healthsummaries`.`processId`) as journalEntryProperties_declarationSummaryDto_healthSummaries_processId, 
COALESCE(CAST(`removed_exploded_journalentryproperties_declarationsummarydto_healthsummaries`.`confirmationRequired` as STRING), CAST(`exploded_journalentryproperties_declarationsummarydto_healthsummaries`.`confirmationRequired` as STRING)) as journalEntryProperties_declarationSummaryDto_healthSummaries_confirmationRequired, 
COALESCE(CAST(`removed_exploded_journalentryproperties_declarationsummarydto_healthsummaries`.`hideDetailsForPartnerDeclaration` as STRING), CAST(`exploded_journalentryproperties_declarationsummarydto_healthsummaries`.`hideDetailsForPartnerDeclaration` as STRING)) as journalEntryProperties_declarationSummaryDto_healthSummaries_hideDetailsForPartnerDeclaration, 
COALESCE(CAST(`removed_exploded_journalentryproperties_declarationsummarydto_healthsummaries`.`perClaimant` as STRING), CAST(`exploded_journalentryproperties_declarationsummarydto_healthsummaries`.`perClaimant` as STRING)) as journalEntryProperties_declarationSummaryDto_healthSummaries_perClaimant, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_healthsummaries`.`type`, `exploded_journalentryproperties_declarationsummarydto_healthsummaries`.`type`) as journalEntryProperties_declarationSummaryDto_healthSummaries_type, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`contractId`, `journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`contractId`) as journalEntryProperties_declarationSummaryDto_housingSummary_contractId, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`councilTax`.`appliedToCouncilTaxReduction`, `journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`councilTax`.`appliedToCouncilTaxReduction`) as journalEntryProperties_declarationSummaryDto_housingSummary_councilTax_appliedToCouncilTaxReduction, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`councilTax`.`councilTaxInClaimantName` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`councilTax`.`councilTaxInClaimantName` as STRING)) as journalEntryProperties_declarationSummaryDto_housingSummary_councilTax_councilTaxInClaimantName, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`dateOfChange`.`hasDate` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`dateOfChange`.`hasDate` as STRING)) as journalEntryProperties_declarationSummaryDto_housingSummary_dateOfChange_hasDate, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`dateOfChange`.`knownDate`, `journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`dateOfChange`.`knownDate`) as journalEntryProperties_declarationSummaryDto_housingSummary_dateOfChange_knownDate, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`dateOfChange`.`type`, `journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`dateOfChange`.`type`) as journalEntryProperties_declarationSummaryDto_housingSummary_dateOfChange_type, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`dateOfChange`.`date`, `journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`dateOfChange`.`date`) as journalEntryProperties_declarationSummaryDto_housingSummary_dateOfChange_date, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`housingTypeMessagePostfix`, `journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`housingTypeMessagePostfix`) as journalEntryProperties_declarationSummaryDto_housingSummary_housingTypeMessagePostfix, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`noApplicableHousingCostsSummary`.`noApplicableHousingCostsType`, `journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`noApplicableHousingCostsSummary`.`noApplicableHousingCostsType`) as journalEntryProperties_declarationSummaryDto_housingSummary_noApplicableHousingCostsSummary_noApplicableHousingCostsType, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`otherHousingTypeSummary`.`otherAccommodationType`, `journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`otherHousingTypeSummary`.`otherAccommodationType`) as journalEntryProperties_declarationSummaryDto_housingSummary_otherHousingTypeSummary_otherAccommodationType, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`ownHomeSummary`.`hasMortgage` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`ownHomeSummary`.`hasMortgage` as STRING)) as journalEntryProperties_declarationSummaryDto_housingSummary_ownHomeSummary_hasMortgage, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`ownHomeSummary`.`paysServiceCharges` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`ownHomeSummary`.`paysServiceCharges` as STRING)) as journalEntryProperties_declarationSummaryDto_housingSummary_ownHomeSummary_paysServiceCharges, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_housingsummary_ownhomesummary_mortgagedetailslist`.`amount`, `exploded_journalentryproperties_declarationsummarydto_housingsummary_ownhomesummary_mortgagedetailslist`.`amount`) as journalEntryProperties_declarationSummaryDto_housingSummary_ownHomeSummary_mortgageDetailsList_amount, 
COALESCE(CAST(`removed_exploded_journalentryproperties_declarationsummarydto_housingsummary_ownhomesummary_mortgagedetailslist`.`forDisabilityAdaptation` as STRING), CAST(`exploded_journalentryproperties_declarationsummarydto_housingsummary_ownhomesummary_mortgagedetailslist`.`forDisabilityAdaptation` as STRING)) as journalEntryProperties_declarationSummaryDto_housingSummary_ownHomeSummary_mortgageDetailsList_forDisabilityAdaptation, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_housingsummary_ownhomesummary_mortgagedetailslist`.`lender`, `exploded_journalentryproperties_declarationsummarydto_housingsummary_ownhomesummary_mortgagedetailslist`.`lender`) as journalEntryProperties_declarationSummaryDto_housingSummary_ownHomeSummary_mortgageDetailsList_lender, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_housingsummary_ownhomesummary_mortgagedetailslist`.`lenderCode`, `exploded_journalentryproperties_declarationsummarydto_housingsummary_ownhomesummary_mortgagedetailslist`.`lenderCode`) as journalEntryProperties_declarationSummaryDto_housingSummary_ownHomeSummary_mortgageDetailsList_lenderCode, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_housingsummary_ownhomesummary_mortgagedetailslist`.`loanReferenceNumber`, `exploded_journalentryproperties_declarationsummarydto_housingsummary_ownhomesummary_mortgagedetailslist`.`loanReferenceNumber`) as journalEntryProperties_declarationSummaryDto_housingSummary_ownHomeSummary_mortgageDetailsList_loanReferenceNumber, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_housingsummary_ownhomesummary_mortgagedetailslist`.`mortgageDetailsId`, `exploded_journalentryproperties_declarationsummarydto_housingsummary_ownhomesummary_mortgagedetailslist`.`mortgageDetailsId`) as journalEntryProperties_declarationSummaryDto_housingSummary_ownHomeSummary_mortgageDetailsList_mortgageDetailsId, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`ownHomeSummary`.`serviceChargeDetails`.`amount`, `journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`ownHomeSummary`.`serviceChargeDetails`.`amount`) as journalEntryProperties_declarationSummaryDto_housingSummary_ownHomeSummary_serviceChargeDetails_amount, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`ownHomeSummary`.`serviceChargeDetails`.`frequency`, `journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`ownHomeSummary`.`serviceChargeDetails`.`frequency`) as journalEntryProperties_declarationSummaryDto_housingSummary_ownHomeSummary_serviceChargeDetails_frequency, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`paymentEffectiveDate`.`hasDate` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`paymentEffectiveDate`.`hasDate` as STRING)) as journalEntryProperties_declarationSummaryDto_housingSummary_paymentEffectiveDate_hasDate, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`paymentEffectiveDate`.`knownDate`, `journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`paymentEffectiveDate`.`knownDate`) as journalEntryProperties_declarationSummaryDto_housingSummary_paymentEffectiveDate_knownDate, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`paymentEffectiveDate`.`type`, `journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`paymentEffectiveDate`.`type`) as journalEntryProperties_declarationSummaryDto_housingSummary_paymentEffectiveDate_type, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`paymentEffectiveDate`.`date`, `journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`paymentEffectiveDate`.`date`) as journalEntryProperties_declarationSummaryDto_housingSummary_paymentEffectiveDate_date, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`processId`, `journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`processId`) as journalEntryProperties_declarationSummaryDto_housingSummary_processId, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`rentalSummary`.`dateMovedToAddress`, `journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`rentalSummary`.`dateMovedToAddress`) as journalEntryProperties_declarationSummaryDto_housingSummary_rentalSummary_dateMovedToAddress, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`rentalSummary`.`jointTenancySummary`.`numberLivingWith`, `journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`rentalSummary`.`jointTenancySummary`.`numberLivingWith`) as journalEntryProperties_declarationSummaryDto_housingSummary_rentalSummary_jointTenancySummary_numberLivingWith, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`rentalSummary`.`jointTenancySummary`.`totalRent`.`monthlyAmount`, `journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`rentalSummary`.`jointTenancySummary`.`totalRent`.`monthlyAmount`) as journalEntryProperties_declarationSummaryDto_housingSummary_rentalSummary_jointTenancySummary_totalRent_monthlyAmount, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`rentalSummary`.`jointTenancySummary`.`totalRent`.`amount`, `journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`rentalSummary`.`jointTenancySummary`.`totalRent`.`amount`) as journalEntryProperties_declarationSummaryDto_housingSummary_rentalSummary_jointTenancySummary_totalRent_amount, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`rentalSummary`.`jointTenancySummary`.`totalRent`.`paymentFrequency`, `journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`rentalSummary`.`jointTenancySummary`.`totalRent`.`paymentFrequency`) as journalEntryProperties_declarationSummaryDto_housingSummary_rentalSummary_jointTenancySummary_totalRent_paymentFrequency, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`rentalSummary`.`jointTenancySummary`.`totalRent`.`type`, `journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`rentalSummary`.`jointTenancySummary`.`totalRent`.`type`) as journalEntryProperties_declarationSummaryDto_housingSummary_rentalSummary_jointTenancySummary_totalRent_type, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`rentalSummary`.`jointTenancySummary`.`totalServiceChargePayment`.`monthlyAmount`, `journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`rentalSummary`.`jointTenancySummary`.`totalServiceChargePayment`.`monthlyAmount`) as journalEntryProperties_declarationSummaryDto_housingSummary_rentalSummary_jointTenancySummary_totalServiceChargePayment_monthlyAmount, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`rentalSummary`.`jointTenancySummary`.`totalServiceChargePayment`.`amount`, `journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`rentalSummary`.`jointTenancySummary`.`totalServiceChargePayment`.`amount`) as journalEntryProperties_declarationSummaryDto_housingSummary_rentalSummary_jointTenancySummary_totalServiceChargePayment_amount, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`rentalSummary`.`jointTenancySummary`.`totalServiceChargePayment`.`paymentFrequency`, `journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`rentalSummary`.`jointTenancySummary`.`totalServiceChargePayment`.`paymentFrequency`) as journalEntryProperties_declarationSummaryDto_housingSummary_rentalSummary_jointTenancySummary_totalServiceChargePayment_paymentFrequency, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`rentalSummary`.`jointTenancySummary`.`totalServiceChargePayment`.`type`, `journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`rentalSummary`.`jointTenancySummary`.`totalServiceChargePayment`.`type`) as journalEntryProperties_declarationSummaryDto_housingSummary_rentalSummary_jointTenancySummary_totalServiceChargePayment_type, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`rentalSummary`.`landlordName`, `journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`rentalSummary`.`landlordName`) as journalEntryProperties_declarationSummaryDto_housingSummary_rentalSummary_landlordName, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`rentalSummary`.`numberBedrooms`, `journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`rentalSummary`.`numberBedrooms`) as journalEntryProperties_declarationSummaryDto_housingSummary_rentalSummary_numberBedrooms, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`rentalSummary`.`privateRentalSummary`.`financialInterest` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`rentalSummary`.`privateRentalSummary`.`financialInterest` as STRING)) as journalEntryProperties_declarationSummaryDto_housingSummary_rentalSummary_privateRentalSummary_financialInterest, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`rentalSummary`.`privateRentalSummary`.`landlordLivesWithYou` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`rentalSummary`.`privateRentalSummary`.`landlordLivesWithYou` as STRING)) as journalEntryProperties_declarationSummaryDto_housingSummary_rentalSummary_privateRentalSummary_landlordLivesWithYou, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`rentalSummary`.`privateRentalSummary`.`landlordRelative` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`rentalSummary`.`privateRentalSummary`.`landlordRelative` as STRING)) as journalEntryProperties_declarationSummaryDto_housingSummary_rentalSummary_privateRentalSummary_landlordRelative, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`rentalSummary`.`rentalPayment`.`amount`, `journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`rentalSummary`.`rentalPayment`.`amount`) as journalEntryProperties_declarationSummaryDto_housingSummary_rentalSummary_rentalPayment_amount, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`rentalSummary`.`rentalPayment`.`paymentFrequency`, `journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`rentalSummary`.`rentalPayment`.`paymentFrequency`) as journalEntryProperties_declarationSummaryDto_housingSummary_rentalSummary_rentalPayment_paymentFrequency, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`rentalSummary`.`rentalPayment`.`type`, `journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`rentalSummary`.`rentalPayment`.`type`) as journalEntryProperties_declarationSummaryDto_housingSummary_rentalSummary_rentalPayment_type, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`rentalSummary`.`socialRentalSummary`.`rentFreeWeeks`, `journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`rentalSummary`.`socialRentalSummary`.`rentFreeWeeks`) as journalEntryProperties_declarationSummaryDto_housingSummary_rentalSummary_socialRentalSummary_rentFreeWeeks, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`rentalSummary`.`socialRentalSummary`.`serviceChargePayment`.`amount`, `journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`rentalSummary`.`socialRentalSummary`.`serviceChargePayment`.`amount`) as journalEntryProperties_declarationSummaryDto_housingSummary_rentalSummary_socialRentalSummary_serviceChargePayment_amount, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`rentalSummary`.`socialRentalSummary`.`serviceChargePayment`.`paymentFrequency`, `journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`rentalSummary`.`socialRentalSummary`.`serviceChargePayment`.`paymentFrequency`) as journalEntryProperties_declarationSummaryDto_housingSummary_rentalSummary_socialRentalSummary_serviceChargePayment_paymentFrequency, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`rentalSummary`.`socialRentalSummary`.`serviceChargePayment`.`type`, `journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`rentalSummary`.`socialRentalSummary`.`serviceChargePayment`.`type`) as journalEntryProperties_declarationSummaryDto_housingSummary_rentalSummary_socialRentalSummary_serviceChargePayment_type, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`rentalSummary`.`tenancyAgreementSummary`.`bothYouAndPartnerNamedOnTenancyOrRentalAgreement` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`rentalSummary`.`tenancyAgreementSummary`.`bothYouAndPartnerNamedOnTenancyOrRentalAgreement` as STRING)) as journalEntryProperties_declarationSummaryDto_housingSummary_rentalSummary_tenancyAgreementSummary_bothYouAndPartnerNamedOnTenancyOrRentalAgreement, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`rentalSummary`.`tenancyAgreementSummary`.`jointTenancyWithSomeoneOtherThanPartner` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`rentalSummary`.`tenancyAgreementSummary`.`jointTenancyWithSomeoneOtherThanPartner` as STRING)) as journalEntryProperties_declarationSummaryDto_housingSummary_rentalSummary_tenancyAgreementSummary_jointTenancyWithSomeoneOtherThanPartner, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`confirmationRequired` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`confirmationRequired` as STRING)) as journalEntryProperties_declarationSummaryDto_housingSummary_confirmationRequired, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`councilTaxSummary`.`appliedToCouncilTaxReduction`, `journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`councilTaxSummary`.`appliedToCouncilTaxReduction`) as journalEntryProperties_declarationSummaryDto_housingSummary_councilTaxSummary_appliedToCouncilTaxReduction, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`councilTaxSummary`.`councilTaxInClaimantName` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`councilTaxSummary`.`councilTaxInClaimantName` as STRING)) as journalEntryProperties_declarationSummaryDto_housingSummary_councilTaxSummary_councilTaxInClaimantName, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`hideDetailsForPartnerDeclaration` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`hideDetailsForPartnerDeclaration` as STRING)) as journalEntryProperties_declarationSummaryDto_housingSummary_hideDetailsForPartnerDeclaration, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`perClaimant` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`perClaimant` as STRING)) as journalEntryProperties_declarationSummaryDto_housingSummary_perClaimant, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`type`, `journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`type`) as journalEntryProperties_declarationSummaryDto_housingSummary_type, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_nationalitysummaries`.`claimantId`, `exploded_journalentryproperties_declarationsummarydto_nationalitysummaries`.`claimantId`) as journalEntryProperties_declarationSummaryDto_nationalitySummaries_claimantId, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_nationalitysummaries`.`contractId`, `exploded_journalentryproperties_declarationsummarydto_nationalitysummaries`.`contractId`) as journalEntryProperties_declarationSummaryDto_nationalitySummaries_contractId, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_nationalitysummaries`.`name`, `exploded_journalentryproperties_declarationsummarydto_nationalitysummaries`.`name`) as journalEntryProperties_declarationSummaryDto_nationalitySummaries_name, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_nationalitysummaries`.`processId`, `exploded_journalentryproperties_declarationsummarydto_nationalitysummaries`.`processId`) as journalEntryProperties_declarationSummaryDto_nationalitySummaries_processId, 
COALESCE(CAST(`removed_exploded_journalentryproperties_declarationsummarydto_nationalitysummaries`.`returnAfterAbsence` as STRING), CAST(`exploded_journalentryproperties_declarationsummarydto_nationalitysummaries`.`returnAfterAbsence` as STRING)) as journalEntryProperties_declarationSummaryDto_nationalitySummaries_returnAfterAbsence, 
COALESCE(CAST(`removed_exploded_journalentryproperties_declarationsummarydto_nationalitysummaries`.`ukNational` as STRING), CAST(`exploded_journalentryproperties_declarationsummarydto_nationalitysummaries`.`ukNational` as STRING)) as journalEntryProperties_declarationSummaryDto_nationalitySummaries_ukNational, 
COALESCE(CAST(`removed_exploded_journalentryproperties_declarationsummarydto_nationalitysummaries`.`confirmationRequired` as STRING), CAST(`exploded_journalentryproperties_declarationsummarydto_nationalitysummaries`.`confirmationRequired` as STRING)) as journalEntryProperties_declarationSummaryDto_nationalitySummaries_confirmationRequired, 
COALESCE(CAST(`removed_exploded_journalentryproperties_declarationsummarydto_nationalitysummaries`.`hideDetailsForPartnerDeclaration` as STRING), CAST(`exploded_journalentryproperties_declarationsummarydto_nationalitysummaries`.`hideDetailsForPartnerDeclaration` as STRING)) as journalEntryProperties_declarationSummaryDto_nationalitySummaries_hideDetailsForPartnerDeclaration, 
COALESCE(CAST(`removed_exploded_journalentryproperties_declarationsummarydto_nationalitysummaries`.`perClaimant` as STRING), CAST(`exploded_journalentryproperties_declarationsummarydto_nationalitysummaries`.`perClaimant` as STRING)) as journalEntryProperties_declarationSummaryDto_nationalitySummaries_perClaimant, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_nationalitysummaries`.`type`, `exploded_journalentryproperties_declarationsummarydto_nationalitysummaries`.`type`) as journalEntryProperties_declarationSummaryDto_nationalitySummaries_type, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`partner`.`contactPreference`, `journalEntryProperties`.`declarationSummaryDto`.`partner`.`contactPreference`) as journalEntryProperties_declarationSummaryDto_partner_contactPreference, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`partner`.`contractId`, `journalEntryProperties`.`declarationSummaryDto`.`partner`.`contractId`) as journalEntryProperties_declarationSummaryDto_partner_contractId, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`partner`.`effectiveDate`.`hasDate` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`partner`.`effectiveDate`.`hasDate` as STRING)) as journalEntryProperties_declarationSummaryDto_partner_effectiveDate_hasDate, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`partner`.`effectiveDate`.`knownDate`, `journalEntryProperties`.`declarationSummaryDto`.`partner`.`effectiveDate`.`knownDate`) as journalEntryProperties_declarationSummaryDto_partner_effectiveDate_knownDate, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`partner`.`effectiveDate`.`type`, `journalEntryProperties`.`declarationSummaryDto`.`partner`.`effectiveDate`.`type`) as journalEntryProperties_declarationSummaryDto_partner_effectiveDate_type, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`partner`.`effectiveDate`.`date`, `journalEntryProperties`.`declarationSummaryDto`.`partner`.`effectiveDate`.`date`) as journalEntryProperties_declarationSummaryDto_partner_effectiveDate_date, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`partner`.`emailAddress`, `journalEntryProperties`.`declarationSummaryDto`.`partner`.`emailAddress`) as journalEntryProperties_declarationSummaryDto_partner_emailAddress, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`partner`.`firstName`, `journalEntryProperties`.`declarationSummaryDto`.`partner`.`firstName`) as journalEntryProperties_declarationSummaryDto_partner_firstName, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`partner`.`lastName`, `journalEntryProperties`.`declarationSummaryDto`.`partner`.`lastName`) as journalEntryProperties_declarationSummaryDto_partner_lastName, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`partner`.`middleName`, `journalEntryProperties`.`declarationSummaryDto`.`partner`.`middleName`) as journalEntryProperties_declarationSummaryDto_partner_middleName, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`partner`.`mobileNumber`, `journalEntryProperties`.`declarationSummaryDto`.`partner`.`mobileNumber`) as journalEntryProperties_declarationSummaryDto_partner_mobileNumber, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`partner`.`name`, `journalEntryProperties`.`declarationSummaryDto`.`partner`.`name`) as journalEntryProperties_declarationSummaryDto_partner_name, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`partner`.`paymentEffectiveDate`.`hasDate` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`partner`.`paymentEffectiveDate`.`hasDate` as STRING)) as journalEntryProperties_declarationSummaryDto_partner_paymentEffectiveDate_hasDate, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`partner`.`paymentEffectiveDate`.`knownDate`, `journalEntryProperties`.`declarationSummaryDto`.`partner`.`paymentEffectiveDate`.`knownDate`) as journalEntryProperties_declarationSummaryDto_partner_paymentEffectiveDate_knownDate, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`partner`.`paymentEffectiveDate`.`type`, `journalEntryProperties`.`declarationSummaryDto`.`partner`.`paymentEffectiveDate`.`type`) as journalEntryProperties_declarationSummaryDto_partner_paymentEffectiveDate_type, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`partner`.`paymentEffectiveDate`.`date`, `journalEntryProperties`.`declarationSummaryDto`.`partner`.`paymentEffectiveDate`.`date`) as journalEntryProperties_declarationSummaryDto_partner_paymentEffectiveDate_date, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`partner`.`processId`, `journalEntryProperties`.`declarationSummaryDto`.`partner`.`processId`) as journalEntryProperties_declarationSummaryDto_partner_processId, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`partner`.`claimantId`, `journalEntryProperties`.`declarationSummaryDto`.`partner`.`claimantId`) as journalEntryProperties_declarationSummaryDto_partner_claimantId, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`partner`.`confirmationRequired` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`partner`.`confirmationRequired` as STRING)) as journalEntryProperties_declarationSummaryDto_partner_confirmationRequired, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`partner`.`hideDetailsForPartnerDeclaration` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`partner`.`hideDetailsForPartnerDeclaration` as STRING)) as journalEntryProperties_declarationSummaryDto_partner_hideDetailsForPartnerDeclaration, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`partner`.`perClaimant` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`partner`.`perClaimant` as STRING)) as journalEntryProperties_declarationSummaryDto_partner_perClaimant, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`partner`.`type`, `journalEntryProperties`.`declarationSummaryDto`.`partner`.`type`) as journalEntryProperties_declarationSummaryDto_partner_type, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`partnerQuestion`.`claimType`, `journalEntryProperties`.`declarationSummaryDto`.`partnerQuestion`.`claimType`) as journalEntryProperties_declarationSummaryDto_partnerQuestion_claimType, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`partnerQuestion`.`claimantId`, `journalEntryProperties`.`declarationSummaryDto`.`partnerQuestion`.`claimantId`) as journalEntryProperties_declarationSummaryDto_partnerQuestion_claimantId, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`partnerQuestion`.`claimantName`, `journalEntryProperties`.`declarationSummaryDto`.`partnerQuestion`.`claimantName`) as journalEntryProperties_declarationSummaryDto_partnerQuestion_claimantName, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`partnerQuestion`.`confirmationRequired` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`partnerQuestion`.`confirmationRequired` as STRING)) as journalEntryProperties_declarationSummaryDto_partnerQuestion_confirmationRequired, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`partnerQuestion`.`contractId`, `journalEntryProperties`.`declarationSummaryDto`.`partnerQuestion`.`contractId`) as journalEntryProperties_declarationSummaryDto_partnerQuestion_contractId, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`partnerQuestion`.`partnerName`, `journalEntryProperties`.`declarationSummaryDto`.`partnerQuestion`.`partnerName`) as journalEntryProperties_declarationSummaryDto_partnerQuestion_partnerName, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`partnerQuestion`.`hideDetailsForPartnerDeclaration` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`partnerQuestion`.`hideDetailsForPartnerDeclaration` as STRING)) as journalEntryProperties_declarationSummaryDto_partnerQuestion_hideDetailsForPartnerDeclaration, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`partnerQuestion`.`perClaimant` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`partnerQuestion`.`perClaimant` as STRING)) as journalEntryProperties_declarationSummaryDto_partnerQuestion_perClaimant, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`partnerQuestion`.`type`, `journalEntryProperties`.`declarationSummaryDto`.`partnerQuestion`.`type`) as journalEntryProperties_declarationSummaryDto_partnerQuestion_type, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`person`.`contactPreference`, `journalEntryProperties`.`declarationSummaryDto`.`person`.`contactPreference`) as journalEntryProperties_declarationSummaryDto_person_contactPreference, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`person`.`contractId`, `journalEntryProperties`.`declarationSummaryDto`.`person`.`contractId`) as journalEntryProperties_declarationSummaryDto_person_contractId, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`person`.`effectiveDate`.`hasDate` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`person`.`effectiveDate`.`hasDate` as STRING)) as journalEntryProperties_declarationSummaryDto_person_effectiveDate_hasDate, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`person`.`effectiveDate`.`knownDate`, `journalEntryProperties`.`declarationSummaryDto`.`person`.`effectiveDate`.`knownDate`) as journalEntryProperties_declarationSummaryDto_person_effectiveDate_knownDate, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`person`.`effectiveDate`.`type`, `journalEntryProperties`.`declarationSummaryDto`.`person`.`effectiveDate`.`type`) as journalEntryProperties_declarationSummaryDto_person_effectiveDate_type, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`person`.`effectiveDate`.`date`, `journalEntryProperties`.`declarationSummaryDto`.`person`.`effectiveDate`.`date`) as journalEntryProperties_declarationSummaryDto_person_effectiveDate_date, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`person`.`emailAddress`, `journalEntryProperties`.`declarationSummaryDto`.`person`.`emailAddress`) as journalEntryProperties_declarationSummaryDto_person_emailAddress, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`person`.`firstName`, `journalEntryProperties`.`declarationSummaryDto`.`person`.`firstName`) as journalEntryProperties_declarationSummaryDto_person_firstName, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`person`.`lastName`, `journalEntryProperties`.`declarationSummaryDto`.`person`.`lastName`) as journalEntryProperties_declarationSummaryDto_person_lastName, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`person`.`middleName`, `journalEntryProperties`.`declarationSummaryDto`.`person`.`middleName`) as journalEntryProperties_declarationSummaryDto_person_middleName, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`person`.`mobileNumber`, `journalEntryProperties`.`declarationSummaryDto`.`person`.`mobileNumber`) as journalEntryProperties_declarationSummaryDto_person_mobileNumber, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`person`.`name`, `journalEntryProperties`.`declarationSummaryDto`.`person`.`name`) as journalEntryProperties_declarationSummaryDto_person_name, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`person`.`paymentEffectiveDate`.`hasDate` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`person`.`paymentEffectiveDate`.`hasDate` as STRING)) as journalEntryProperties_declarationSummaryDto_person_paymentEffectiveDate_hasDate, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`person`.`paymentEffectiveDate`.`knownDate`, `journalEntryProperties`.`declarationSummaryDto`.`person`.`paymentEffectiveDate`.`knownDate`) as journalEntryProperties_declarationSummaryDto_person_paymentEffectiveDate_knownDate, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`person`.`paymentEffectiveDate`.`type`, `journalEntryProperties`.`declarationSummaryDto`.`person`.`paymentEffectiveDate`.`type`) as journalEntryProperties_declarationSummaryDto_person_paymentEffectiveDate_type, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`person`.`paymentEffectiveDate`.`date`, `journalEntryProperties`.`declarationSummaryDto`.`person`.`paymentEffectiveDate`.`date`) as journalEntryProperties_declarationSummaryDto_person_paymentEffectiveDate_date, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`person`.`processId`, `journalEntryProperties`.`declarationSummaryDto`.`person`.`processId`) as journalEntryProperties_declarationSummaryDto_person_processId, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`person`.`claimantId`, `journalEntryProperties`.`declarationSummaryDto`.`person`.`claimantId`) as journalEntryProperties_declarationSummaryDto_person_claimantId, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`person`.`confirmationRequired` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`person`.`confirmationRequired` as STRING)) as journalEntryProperties_declarationSummaryDto_person_confirmationRequired, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`person`.`hideDetailsForPartnerDeclaration` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`person`.`hideDetailsForPartnerDeclaration` as STRING)) as journalEntryProperties_declarationSummaryDto_person_hideDetailsForPartnerDeclaration, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`person`.`perClaimant` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`person`.`perClaimant` as STRING)) as journalEntryProperties_declarationSummaryDto_person_perClaimant, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`person`.`type`, `journalEntryProperties`.`declarationSummaryDto`.`person`.`type`) as journalEntryProperties_declarationSummaryDto_person_type, 
COALESCE(CAST(`removed_exploded_journalentryproperties_declarationsummarydto_wholiveswithyousummary_children`.`adoptedOrUnderGuardianship` as STRING), CAST(`exploded_journalentryproperties_declarationsummarydto_wholiveswithyousummary_children`.`adoptedOrUnderGuardianship` as STRING)) as journalEntryProperties_declarationSummaryDto_whoLivesWithYouSummary_children_adoptedOrUnderGuardianship, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_wholiveswithyousummary_children`.`childId`, `exploded_journalentryproperties_declarationsummarydto_wholiveswithyousummary_children`.`childId`) as journalEntryProperties_declarationSummaryDto_whoLivesWithYouSummary_children_childId, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_wholiveswithyousummary_children`.`dateOfBirth`, `exploded_journalentryproperties_declarationsummarydto_wholiveswithyousummary_children`.`dateOfBirth`) as journalEntryProperties_declarationSummaryDto_whoLivesWithYouSummary_children_dateOfBirth, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_wholiveswithyousummary_children`.`disabilityDetails`.`dlaCareComponent`, `exploded_journalentryproperties_declarationsummarydto_wholiveswithyousummary_children`.`disabilityDetails`.`dlaCareComponent`) as journalEntryProperties_declarationSummaryDto_whoLivesWithYouSummary_children_disabilityDetails_dlaCareComponent, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_wholiveswithyousummary_children`.`disabilityDetails`.`pipDailyLivingComponent`, `exploded_journalentryproperties_declarationsummarydto_wholiveswithyousummary_children`.`disabilityDetails`.`pipDailyLivingComponent`) as journalEntryProperties_declarationSummaryDto_whoLivesWithYouSummary_children_disabilityDetails_pipDailyLivingComponent, 
COALESCE(CAST(`removed_exploded_journalentryproperties_declarationsummarydto_wholiveswithyousummary_children`.`disabilityDetails`.`receivingDisabilityLivingAllowance` as STRING), CAST(`exploded_journalentryproperties_declarationsummarydto_wholiveswithyousummary_children`.`disabilityDetails`.`receivingDisabilityLivingAllowance` as STRING)) as journalEntryProperties_declarationSummaryDto_whoLivesWithYouSummary_children_disabilityDetails_receivingDisabilityLivingAllowance, 
COALESCE(CAST(`removed_exploded_journalentryproperties_declarationsummarydto_wholiveswithyousummary_children`.`disabilityDetails`.`receivingPersonalIndependencePayment` as STRING), CAST(`exploded_journalentryproperties_declarationsummarydto_wholiveswithyousummary_children`.`disabilityDetails`.`receivingPersonalIndependencePayment` as STRING)) as journalEntryProperties_declarationSummaryDto_whoLivesWithYouSummary_children_disabilityDetails_receivingPersonalIndependencePayment, 
COALESCE(CAST(`removed_exploded_journalentryproperties_declarationsummarydto_wholiveswithyousummary_children`.`disabilityDetails`.`registeredBlind` as STRING), CAST(`exploded_journalentryproperties_declarationsummarydto_wholiveswithyousummary_children`.`disabilityDetails`.`registeredBlind` as STRING)) as journalEntryProperties_declarationSummaryDto_whoLivesWithYouSummary_children_disabilityDetails_registeredBlind, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_wholiveswithyousummary_children`.`firstName`, `exploded_journalentryproperties_declarationsummarydto_wholiveswithyousummary_children`.`firstName`) as journalEntryProperties_declarationSummaryDto_whoLivesWithYouSummary_children_firstName, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_wholiveswithyousummary_children`.`fullName`, `exploded_journalentryproperties_declarationsummarydto_wholiveswithyousummary_children`.`fullName`) as journalEntryProperties_declarationSummaryDto_whoLivesWithYouSummary_children_fullName, 
COALESCE(CAST(`removed_exploded_journalentryproperties_declarationsummarydto_wholiveswithyousummary_children`.`inQualifyingFullTimeEducation` as STRING), CAST(`exploded_journalentryproperties_declarationsummarydto_wholiveswithyousummary_children`.`inQualifyingFullTimeEducation` as STRING)) as journalEntryProperties_declarationSummaryDto_whoLivesWithYouSummary_children_inQualifyingFullTimeEducation, 
COALESCE(CAST(`removed_exploded_journalentryproperties_declarationsummarydto_wholiveswithyousummary_children`.`nonDependantDetails`.`awayOnArmedForcesOperations` as STRING), CAST(`exploded_journalentryproperties_declarationsummarydto_wholiveswithyousummary_children`.`nonDependantDetails`.`awayOnArmedForcesOperations` as STRING)) as journalEntryProperties_declarationSummaryDto_whoLivesWithYouSummary_children_nonDependantDetails_awayOnArmedForcesOperations, 
COALESCE(CAST(`removed_exploded_journalentryproperties_declarationsummarydto_wholiveswithyousummary_children`.`nonDependantDetails`.`personIsClaimantsChild` as STRING), CAST(`exploded_journalentryproperties_declarationsummarydto_wholiveswithyousummary_children`.`nonDependantDetails`.`personIsClaimantsChild` as STRING)) as journalEntryProperties_declarationSummaryDto_whoLivesWithYouSummary_children_nonDependantDetails_personIsClaimantsChild, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_wholiveswithyousummary_children`.`nonDependantDetails`.`primaryCarer`, `exploded_journalentryproperties_declarationsummarydto_wholiveswithyousummary_children`.`nonDependantDetails`.`primaryCarer`) as journalEntryProperties_declarationSummaryDto_whoLivesWithYouSummary_children_nonDependantDetails_primaryCarer, 
COALESCE(CAST(`removed_exploded_journalentryproperties_declarationsummarydto_wholiveswithyousummary_children`.`nonDependantDetails`.`receivingArmedForcesIndependencePayment` as STRING), CAST(`exploded_journalentryproperties_declarationsummarydto_wholiveswithyousummary_children`.`nonDependantDetails`.`receivingArmedForcesIndependencePayment` as STRING)) as journalEntryProperties_declarationSummaryDto_whoLivesWithYouSummary_children_nonDependantDetails_receivingArmedForcesIndependencePayment, 
COALESCE(CAST(`removed_exploded_journalentryproperties_declarationsummarydto_wholiveswithyousummary_children`.`nonDependantDetails`.`receivingAttendanceAllowance` as STRING), CAST(`exploded_journalentryproperties_declarationsummarydto_wholiveswithyousummary_children`.`nonDependantDetails`.`receivingAttendanceAllowance` as STRING)) as journalEntryProperties_declarationSummaryDto_whoLivesWithYouSummary_children_nonDependantDetails_receivingAttendanceAllowance, 
COALESCE(CAST(`removed_exploded_journalentryproperties_declarationsummarydto_wholiveswithyousummary_children`.`nonDependantDetails`.`receivingCarersAllowance` as STRING), CAST(`exploded_journalentryproperties_declarationsummarydto_wholiveswithyousummary_children`.`nonDependantDetails`.`receivingCarersAllowance` as STRING)) as journalEntryProperties_declarationSummaryDto_whoLivesWithYouSummary_children_nonDependantDetails_receivingCarersAllowance, 
COALESCE(CAST(`removed_exploded_journalentryproperties_declarationsummarydto_wholiveswithyousummary_children`.`nonDependantDetails`.`receivingDisabilityLivingAllowance` as STRING), CAST(`exploded_journalentryproperties_declarationsummarydto_wholiveswithyousummary_children`.`nonDependantDetails`.`receivingDisabilityLivingAllowance` as STRING)) as journalEntryProperties_declarationSummaryDto_whoLivesWithYouSummary_children_nonDependantDetails_receivingDisabilityLivingAllowance, 
COALESCE(CAST(`removed_exploded_journalentryproperties_declarationsummarydto_wholiveswithyousummary_children`.`nonDependantDetails`.`receivingPersonalIndependencePayment` as STRING), CAST(`exploded_journalentryproperties_declarationsummarydto_wholiveswithyousummary_children`.`nonDependantDetails`.`receivingPersonalIndependencePayment` as STRING)) as journalEntryProperties_declarationSummaryDto_whoLivesWithYouSummary_children_nonDependantDetails_receivingPersonalIndependencePayment, 
COALESCE(CAST(`removed_exploded_journalentryproperties_declarationsummarydto_wholiveswithyousummary_children`.`nonDependantDetails`.`receivingStatePensionCredit` as STRING), CAST(`exploded_journalentryproperties_declarationsummarydto_wholiveswithyousummary_children`.`nonDependantDetails`.`receivingStatePensionCredit` as STRING)) as journalEntryProperties_declarationSummaryDto_whoLivesWithYouSummary_children_nonDependantDetails_receivingStatePensionCredit, 
COALESCE(CAST(`removed_exploded_journalentryproperties_declarationsummarydto_wholiveswithyousummary_children`.`temporaryAbsence`.`abroadForMoreThanOneMonth` as STRING), CAST(`exploded_journalentryproperties_declarationsummarydto_wholiveswithyousummary_children`.`temporaryAbsence`.`abroadForMoreThanOneMonth` as STRING)) as journalEntryProperties_declarationSummaryDto_whoLivesWithYouSummary_children_temporaryAbsence_abroadForMoreThanOneMonth, 
COALESCE(CAST(`removed_exploded_journalentryproperties_declarationsummarydto_wholiveswithyousummary_children`.`temporaryAbsence`.`inPrison` as STRING), CAST(`exploded_journalentryproperties_declarationsummarydto_wholiveswithyousummary_children`.`temporaryAbsence`.`inPrison` as STRING)) as journalEntryProperties_declarationSummaryDto_whoLivesWithYouSummary_children_temporaryAbsence_inPrison, 
COALESCE(CAST(`removed_exploded_journalentryproperties_declarationsummarydto_wholiveswithyousummary_children`.`temporaryAbsence`.`inTheCareOfLocalAuthority` as STRING), CAST(`exploded_journalentryproperties_declarationsummarydto_wholiveswithyousummary_children`.`temporaryAbsence`.`inTheCareOfLocalAuthority` as STRING)) as journalEntryProperties_declarationSummaryDto_whoLivesWithYouSummary_children_temporaryAbsence_inTheCareOfLocalAuthority, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`whoLivesWithYouSummary`.`contractId`, `journalEntryProperties`.`declarationSummaryDto`.`whoLivesWithYouSummary`.`contractId`) as journalEntryProperties_declarationSummaryDto_whoLivesWithYouSummary_contractId, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`whoLivesWithYouSummary`.`dateOfChange`.`hasDate` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`whoLivesWithYouSummary`.`dateOfChange`.`hasDate` as STRING)) as journalEntryProperties_declarationSummaryDto_whoLivesWithYouSummary_dateOfChange_hasDate, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`whoLivesWithYouSummary`.`dateOfChange`.`knownDate`, `journalEntryProperties`.`declarationSummaryDto`.`whoLivesWithYouSummary`.`dateOfChange`.`knownDate`) as journalEntryProperties_declarationSummaryDto_whoLivesWithYouSummary_dateOfChange_knownDate, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`whoLivesWithYouSummary`.`dateOfChange`.`type`, `journalEntryProperties`.`declarationSummaryDto`.`whoLivesWithYouSummary`.`dateOfChange`.`type`) as journalEntryProperties_declarationSummaryDto_whoLivesWithYouSummary_dateOfChange_type, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`whoLivesWithYouSummary`.`dateOfChange`.`date`, `journalEntryProperties`.`declarationSummaryDto`.`whoLivesWithYouSummary`.`dateOfChange`.`date`) as journalEntryProperties_declarationSummaryDto_whoLivesWithYouSummary_dateOfChange_date, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`whoLivesWithYouSummary`.`hasExceptionToTwoChildPolicy` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`whoLivesWithYouSummary`.`hasExceptionToTwoChildPolicy` as STRING)) as journalEntryProperties_declarationSummaryDto_whoLivesWithYouSummary_hasExceptionToTwoChildPolicy, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`whoLivesWithYouSummary`.`paymentEffectiveDate`.`hasDate` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`whoLivesWithYouSummary`.`paymentEffectiveDate`.`hasDate` as STRING)) as journalEntryProperties_declarationSummaryDto_whoLivesWithYouSummary_paymentEffectiveDate_hasDate, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`whoLivesWithYouSummary`.`paymentEffectiveDate`.`knownDate`, `journalEntryProperties`.`declarationSummaryDto`.`whoLivesWithYouSummary`.`paymentEffectiveDate`.`knownDate`) as journalEntryProperties_declarationSummaryDto_whoLivesWithYouSummary_paymentEffectiveDate_knownDate, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`whoLivesWithYouSummary`.`paymentEffectiveDate`.`type`, `journalEntryProperties`.`declarationSummaryDto`.`whoLivesWithYouSummary`.`paymentEffectiveDate`.`type`) as journalEntryProperties_declarationSummaryDto_whoLivesWithYouSummary_paymentEffectiveDate_type, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`whoLivesWithYouSummary`.`paymentEffectiveDate`.`date`, `journalEntryProperties`.`declarationSummaryDto`.`whoLivesWithYouSummary`.`paymentEffectiveDate`.`date`) as journalEntryProperties_declarationSummaryDto_whoLivesWithYouSummary_paymentEffectiveDate_date, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`whoLivesWithYouSummary`.`primaryCarerName`, `journalEntryProperties`.`declarationSummaryDto`.`whoLivesWithYouSummary`.`primaryCarerName`) as journalEntryProperties_declarationSummaryDto_whoLivesWithYouSummary_primaryCarerName, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`whoLivesWithYouSummary`.`processId`, `journalEntryProperties`.`declarationSummaryDto`.`whoLivesWithYouSummary`.`processId`) as journalEntryProperties_declarationSummaryDto_whoLivesWithYouSummary_processId, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`whoLivesWithYouSummary`.`confirmationRequired` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`whoLivesWithYouSummary`.`confirmationRequired` as STRING)) as journalEntryProperties_declarationSummaryDto_whoLivesWithYouSummary_confirmationRequired, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`whoLivesWithYouSummary`.`hideDetailsForPartnerDeclaration` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`whoLivesWithYouSummary`.`hideDetailsForPartnerDeclaration` as STRING)) as journalEntryProperties_declarationSummaryDto_whoLivesWithYouSummary_hideDetailsForPartnerDeclaration, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`whoLivesWithYouSummary`.`perClaimant` as STRING), CAST(`journalEntryProperties`.`declarationSummaryDto`.`whoLivesWithYouSummary`.`perClaimant` as STRING)) as journalEntryProperties_declarationSummaryDto_whoLivesWithYouSummary_perClaimant, 
COALESCE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`whoLivesWithYouSummary`.`type`, `journalEntryProperties`.`declarationSummaryDto`.`whoLivesWithYouSummary`.`type`) as journalEntryProperties_declarationSummaryDto_whoLivesWithYouSummary_type, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`claimantId`, `exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`claimantId`) as journalEntryProperties_declarationSummaryDto_workAndEarningsSummaries_claimantId, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`contractId`, `exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`contractId`) as journalEntryProperties_declarationSummaryDto_workAndEarningsSummaries_contractId, 
COALESCE(CAST(`removed_exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`dateOfChange`.`hasDate` as STRING), CAST(`exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`dateOfChange`.`hasDate` as STRING)) as journalEntryProperties_declarationSummaryDto_workAndEarningsSummaries_dateOfChange_hasDate, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`dateOfChange`.`knownDate`, `exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`dateOfChange`.`knownDate`) as journalEntryProperties_declarationSummaryDto_workAndEarningsSummaries_dateOfChange_knownDate, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`dateOfChange`.`type`, `exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`dateOfChange`.`type`) as journalEntryProperties_declarationSummaryDto_workAndEarningsSummaries_dateOfChange_type, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`dateOfChange`.`date`, `exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`dateOfChange`.`date`) as journalEntryProperties_declarationSummaryDto_workAndEarningsSummaries_dateOfChange_date, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`earnings`.`amount`, `exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`earnings`.`amount`) as journalEntryProperties_declarationSummaryDto_workAndEarningsSummaries_earnings_amount, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`earnings`.`hoursPerWeek`, `exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`earnings`.`hoursPerWeek`) as journalEntryProperties_declarationSummaryDto_workAndEarningsSummaries_earnings_hoursPerWeek, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`earnings`.`paymentFrequency`, `exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`earnings`.`paymentFrequency`) as journalEntryProperties_declarationSummaryDto_workAndEarningsSummaries_earnings_paymentFrequency, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`employmentStatus`, `exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`employmentStatus`) as journalEntryProperties_declarationSummaryDto_workAndEarningsSummaries_employmentStatus, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`expectedPreviousEarnings`, `exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`expectedPreviousEarnings`) as journalEntryProperties_declarationSummaryDto_workAndEarningsSummaries_expectedPreviousEarnings, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`futureEmployment`.`expectedEarnings`, `exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`futureEmployment`.`expectedEarnings`) as journalEntryProperties_declarationSummaryDto_workAndEarningsSummaries_futureEmployment_expectedEarnings, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`futureEmployment`.`hoursPerWeek`, `exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`futureEmployment`.`hoursPerWeek`) as journalEntryProperties_declarationSummaryDto_workAndEarningsSummaries_futureEmployment_hoursPerWeek, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`futureEmployment`.`paymentFrequency`, `exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`futureEmployment`.`paymentFrequency`) as journalEntryProperties_declarationSummaryDto_workAndEarningsSummaries_futureEmployment_paymentFrequency, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`futureEmployment`.`startDate`, `exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`futureEmployment`.`startDate`) as journalEntryProperties_declarationSummaryDto_workAndEarningsSummaries_futureEmployment_startDate, 
COALESCE(CAST(`removed_exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`futureEmployment`.`startingEmployment` as STRING), CAST(`exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`futureEmployment`.`startingEmployment` as STRING)) as journalEntryProperties_declarationSummaryDto_workAndEarningsSummaries_futureEmployment_startingEmployment, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`name`, `exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`name`) as journalEntryProperties_declarationSummaryDto_workAndEarningsSummaries_name, 
COALESCE(CAST(`removed_exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`paymentEffectiveDate`.`hasDate` as STRING), CAST(`exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`paymentEffectiveDate`.`hasDate` as STRING)) as journalEntryProperties_declarationSummaryDto_workAndEarningsSummaries_paymentEffectiveDate_hasDate, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`paymentEffectiveDate`.`knownDate`, `exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`paymentEffectiveDate`.`knownDate`) as journalEntryProperties_declarationSummaryDto_workAndEarningsSummaries_paymentEffectiveDate_knownDate, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`paymentEffectiveDate`.`type`, `exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`paymentEffectiveDate`.`type`) as journalEntryProperties_declarationSummaryDto_workAndEarningsSummaries_paymentEffectiveDate_type, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`paymentEffectiveDate`.`date`, `exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`paymentEffectiveDate`.`date`) as journalEntryProperties_declarationSummaryDto_workAndEarningsSummaries_paymentEffectiveDate_date, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`processId`, `exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`processId`) as journalEntryProperties_declarationSummaryDto_workAndEarningsSummaries_processId, 
COALESCE(CAST(`removed_exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`startingSelfEmployment` as STRING), CAST(`exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`startingSelfEmployment` as STRING)) as journalEntryProperties_declarationSummaryDto_workAndEarningsSummaries_startingSelfEmployment, 
COALESCE(CAST(`removed_exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`working` as STRING), CAST(`exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`working` as STRING)) as journalEntryProperties_declarationSummaryDto_workAndEarningsSummaries_working, 
COALESCE(CAST(`removed_exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`confirmationRequired` as STRING), CAST(`exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`confirmationRequired` as STRING)) as journalEntryProperties_declarationSummaryDto_workAndEarningsSummaries_confirmationRequired, 
COALESCE(CAST(`removed_exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`employerAndMaternityAllowanceSummary`.`maternityAllowance` as STRING), CAST(`exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`employerAndMaternityAllowanceSummary`.`maternityAllowance` as STRING)) as journalEntryProperties_declarationSummaryDto_workAndEarningsSummaries_employerAndMaternityAllowanceSummary_maternityAllowance, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`employerAndMaternityAllowanceSummary`.`maternityAllowanceAmount`, `exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`employerAndMaternityAllowanceSummary`.`maternityAllowanceAmount`) as journalEntryProperties_declarationSummaryDto_workAndEarningsSummaries_employerAndMaternityAllowanceSummary_maternityAllowanceAmount, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`employerAndMaternityAllowanceSummary`.`maternityAllowancePaymentFrequency`, `exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`employerAndMaternityAllowanceSummary`.`maternityAllowancePaymentFrequency`) as journalEntryProperties_declarationSummaryDto_workAndEarningsSummaries_employerAndMaternityAllowanceSummary_maternityAllowancePaymentFrequency, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`employerAndMaternityAllowanceSummary`.`otherEmployerPaymentFrequency`, `exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`employerAndMaternityAllowanceSummary`.`otherEmployerPaymentFrequency`) as journalEntryProperties_declarationSummaryDto_workAndEarningsSummaries_employerAndMaternityAllowanceSummary_otherEmployerPaymentFrequency, 
COALESCE(CAST(`removed_exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`employerAndMaternityAllowanceSummary`.`otherPayFromEmployer` as STRING), CAST(`exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`employerAndMaternityAllowanceSummary`.`otherPayFromEmployer` as STRING)) as journalEntryProperties_declarationSummaryDto_workAndEarningsSummaries_employerAndMaternityAllowanceSummary_otherPayFromEmployer, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`employerAndMaternityAllowanceSummary`.`otherPayFromEmployerAmount`, `exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`employerAndMaternityAllowanceSummary`.`otherPayFromEmployerAmount`) as journalEntryProperties_declarationSummaryDto_workAndEarningsSummaries_employerAndMaternityAllowanceSummary_otherPayFromEmployerAmount, 
COALESCE(CAST(`removed_exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`hideDetailsForPartnerDeclaration` as STRING), CAST(`exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`hideDetailsForPartnerDeclaration` as STRING)) as journalEntryProperties_declarationSummaryDto_workAndEarningsSummaries_hideDetailsForPartnerDeclaration, 
COALESCE(CAST(`removed_exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`perClaimant` as STRING), CAST(`exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`perClaimant` as STRING)) as journalEntryProperties_declarationSummaryDto_workAndEarningsSummaries_perClaimant, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`workStatusSummary`.`dateStoppedWorking`, `exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`workStatusSummary`.`dateStoppedWorking`) as journalEntryProperties_declarationSummaryDto_workAndEarningsSummaries_workStatusSummary_dateStoppedWorking, 
COALESCE(CAST(`removed_exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`workStatusSummary`.`stoppedWorkingInLast9Months` as STRING), CAST(`exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`workStatusSummary`.`stoppedWorkingInLast9Months` as STRING)) as journalEntryProperties_declarationSummaryDto_workAndEarningsSummaries_workStatusSummary_stoppedWorkingInLast9Months, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`type`, `exploded_journalentryproperties_declarationsummarydto_workandearningssummaries`.`type`) as journalEntryProperties_declarationSummaryDto_workAndEarningsSummaries_type, 
COALESCE(CAST(`removed_exploded_journalentryproperties_declarationsummarydto_carersummaries`.`caringCircumstancesSummary`.`caringForSomeone` as STRING), CAST(`exploded_journalentryproperties_declarationsummarydto_carersummaries`.`caringCircumstancesSummary`.`caringForSomeone` as STRING)) as journalEntryProperties_declarationSummaryDto_carerSummaries_caringCircumstancesSummary_caringForSomeone, 
COALESCE(CAST(`removed_exploded_journalentryproperties_declarationsummarydto_carersummaries`.`caringCircumstancesSummary`.`personReceivesBenefit` as STRING), CAST(`exploded_journalentryproperties_declarationsummarydto_carersummaries`.`caringCircumstancesSummary`.`personReceivesBenefit` as STRING)) as journalEntryProperties_declarationSummaryDto_carerSummaries_caringCircumstancesSummary_personReceivesBenefit, 
COALESCE(CASE WHEN SUBSTRING(`removed_exploded_journalentryproperties_declarationsummarydto_carersummaries`.`claimantDeclaredChanges`.`d_date`, LENGTH(`removed_exploded_journalentryproperties_declarationsummarydto_carersummaries`.`claimantDeclaredChanges`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`removed_exploded_journalentryproperties_declarationsummarydto_carersummaries`.`claimantDeclaredChanges`.`d_date`, 1, 10), ' ', SUBSTR(`removed_exploded_journalentryproperties_declarationsummarydto_carersummaries`.`claimantDeclaredChanges`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`removed_exploded_journalentryproperties_declarationsummarydto_carersummaries`.`claimantDeclaredChanges`.`d_date`, 1, 10), ' ', SUBSTR(`removed_exploded_journalentryproperties_declarationsummarydto_carersummaries`.`claimantDeclaredChanges`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`removed_exploded_journalentryproperties_declarationsummarydto_carersummaries`.`claimantDeclaredChanges`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`removed_exploded_journalentryproperties_declarationsummarydto_carersummaries`.`claimantDeclaredChanges`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`exploded_journalentryproperties_declarationsummarydto_carersummaries`.`claimantDeclaredChanges`.`d_date`, LENGTH(`exploded_journalentryproperties_declarationsummarydto_carersummaries`.`claimantDeclaredChanges`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`exploded_journalentryproperties_declarationsummarydto_carersummaries`.`claimantDeclaredChanges`.`d_date`, 1, 10), ' ', SUBSTR(`exploded_journalentryproperties_declarationsummarydto_carersummaries`.`claimantDeclaredChanges`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`exploded_journalentryproperties_declarationsummarydto_carersummaries`.`claimantDeclaredChanges`.`d_date`, 1, 10), ' ', SUBSTR(`exploded_journalentryproperties_declarationsummarydto_carersummaries`.`claimantDeclaredChanges`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`exploded_journalentryproperties_declarationsummarydto_carersummaries`.`claimantDeclaredChanges`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`exploded_journalentryproperties_declarationsummarydto_carersummaries`.`claimantDeclaredChanges`.`d_date`, 21, 3)) AS TIMESTAMP) END) as journalEntryProperties_declarationSummaryDto_carerSummaries_claimantDeclaredChanges_d_date, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_carersummaries`.`claimantId`, `exploded_journalentryproperties_declarationsummarydto_carersummaries`.`claimantId`) as journalEntryProperties_declarationSummaryDto_carerSummaries_claimantId, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_carersummaries`.`contractId`, `exploded_journalentryproperties_declarationsummarydto_carersummaries`.`contractId`) as journalEntryProperties_declarationSummaryDto_carerSummaries_contractId, 
COALESCE(CAST(`removed_exploded_journalentryproperties_declarationsummarydto_carersummaries`.`dateOfChange`.`hasDate` as STRING), CAST(`exploded_journalentryproperties_declarationsummarydto_carersummaries`.`dateOfChange`.`hasDate` as STRING)) as journalEntryProperties_declarationSummaryDto_carerSummaries_dateOfChange_hasDate, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_carersummaries`.`dateOfChange`.`knownDate`, `exploded_journalentryproperties_declarationsummarydto_carersummaries`.`dateOfChange`.`knownDate`) as journalEntryProperties_declarationSummaryDto_carerSummaries_dateOfChange_knownDate, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_carersummaries`.`dateOfChange`.`type`, `exploded_journalentryproperties_declarationsummarydto_carersummaries`.`dateOfChange`.`type`) as journalEntryProperties_declarationSummaryDto_carerSummaries_dateOfChange_type, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_carersummaries`.`dateOfChange`.`date`, `exploded_journalentryproperties_declarationsummarydto_carersummaries`.`dateOfChange`.`date`) as journalEntryProperties_declarationSummaryDto_carerSummaries_dateOfChange_date, 
COALESCE(CAST(`removed_exploded_journalentryproperties_declarationsummarydto_carersummaries`.`moreThan35Hours` as STRING), CAST(`exploded_journalentryproperties_declarationsummarydto_carersummaries`.`moreThan35Hours` as STRING)) as journalEntryProperties_declarationSummaryDto_carerSummaries_moreThan35Hours, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_carersummaries`.`name`, `exploded_journalentryproperties_declarationsummarydto_carersummaries`.`name`) as journalEntryProperties_declarationSummaryDto_carerSummaries_name, 
COALESCE(CAST(`removed_exploded_journalentryproperties_declarationsummarydto_carersummaries`.`otherCaringResponsibilitiesSummary`.`caringForSomeoneElse` as STRING), CAST(`exploded_journalentryproperties_declarationsummarydto_carersummaries`.`otherCaringResponsibilitiesSummary`.`caringForSomeoneElse` as STRING)) as journalEntryProperties_declarationSummaryDto_carerSummaries_otherCaringResponsibilitiesSummary_caringForSomeoneElse, 
COALESCE(CAST(`removed_exploded_journalentryproperties_declarationsummarydto_carersummaries`.`otherCaringResponsibilitiesSummary`.`personReceivesBenefit` as STRING), CAST(`exploded_journalentryproperties_declarationsummarydto_carersummaries`.`otherCaringResponsibilitiesSummary`.`personReceivesBenefit` as STRING)) as journalEntryProperties_declarationSummaryDto_carerSummaries_otherCaringResponsibilitiesSummary_personReceivesBenefit, 
COALESCE(CAST(`removed_exploded_journalentryproperties_declarationsummarydto_carersummaries`.`paymentEffectiveDate`.`hasDate` as STRING), CAST(`exploded_journalentryproperties_declarationsummarydto_carersummaries`.`paymentEffectiveDate`.`hasDate` as STRING)) as journalEntryProperties_declarationSummaryDto_carerSummaries_paymentEffectiveDate_hasDate, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_carersummaries`.`paymentEffectiveDate`.`knownDate`, `exploded_journalentryproperties_declarationsummarydto_carersummaries`.`paymentEffectiveDate`.`knownDate`) as journalEntryProperties_declarationSummaryDto_carerSummaries_paymentEffectiveDate_knownDate, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_carersummaries`.`paymentEffectiveDate`.`type`, `exploded_journalentryproperties_declarationsummarydto_carersummaries`.`paymentEffectiveDate`.`type`) as journalEntryProperties_declarationSummaryDto_carerSummaries_paymentEffectiveDate_type, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_carersummaries`.`paymentEffectiveDate`.`date`, `exploded_journalentryproperties_declarationsummarydto_carersummaries`.`paymentEffectiveDate`.`date`) as journalEntryProperties_declarationSummaryDto_carerSummaries_paymentEffectiveDate_date, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_carersummaries`.`processId`, `exploded_journalentryproperties_declarationsummarydto_carersummaries`.`processId`) as journalEntryProperties_declarationSummaryDto_carerSummaries_processId, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_carersummaries`.`stoppedCaringCircumstancesSummary`.`dateStoppedCaring`, `exploded_journalentryproperties_declarationsummarydto_carersummaries`.`stoppedCaringCircumstancesSummary`.`dateStoppedCaring`) as journalEntryProperties_declarationSummaryDto_carerSummaries_stoppedCaringCircumstancesSummary_dateStoppedCaring, 
COALESCE(CAST(`removed_exploded_journalentryproperties_declarationsummarydto_carersummaries`.`stoppedCaringCircumstancesSummary`.`dueToDeath` as STRING), CAST(`exploded_journalentryproperties_declarationsummarydto_carersummaries`.`stoppedCaringCircumstancesSummary`.`dueToDeath` as STRING)) as journalEntryProperties_declarationSummaryDto_carerSummaries_stoppedCaringCircumstancesSummary_dueToDeath, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_carersummaries`.`timeOffCircumstancesSummary`.`endDate`, `exploded_journalentryproperties_declarationsummarydto_carersummaries`.`timeOffCircumstancesSummary`.`endDate`) as journalEntryProperties_declarationSummaryDto_carerSummaries_timeOffCircumstancesSummary_endDate, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_carersummaries`.`timeOffCircumstancesSummary`.`startDate`, `exploded_journalentryproperties_declarationsummarydto_carersummaries`.`timeOffCircumstancesSummary`.`startDate`) as journalEntryProperties_declarationSummaryDto_carerSummaries_timeOffCircumstancesSummary_startDate, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_carersummaries`.`whoYouCareForCircumstancesSummary`.`addressNumber`, `exploded_journalentryproperties_declarationsummarydto_carersummaries`.`whoYouCareForCircumstancesSummary`.`addressNumber`) as journalEntryProperties_declarationSummaryDto_carerSummaries_whoYouCareForCircumstancesSummary_addressNumber, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_carersummaries`.`whoYouCareForCircumstancesSummary`.`dateOfBirth`, `exploded_journalentryproperties_declarationsummarydto_carersummaries`.`whoYouCareForCircumstancesSummary`.`dateOfBirth`) as journalEntryProperties_declarationSummaryDto_carerSummaries_whoYouCareForCircumstancesSummary_dateOfBirth, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_carersummaries`.`whoYouCareForCircumstancesSummary`.`firstName`, `exploded_journalentryproperties_declarationsummarydto_carersummaries`.`whoYouCareForCircumstancesSummary`.`firstName`) as journalEntryProperties_declarationSummaryDto_carerSummaries_whoYouCareForCircumstancesSummary_firstName, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_carersummaries`.`whoYouCareForCircumstancesSummary`.`lastName`, `exploded_journalentryproperties_declarationsummarydto_carersummaries`.`whoYouCareForCircumstancesSummary`.`lastName`) as journalEntryProperties_declarationSummaryDto_carerSummaries_whoYouCareForCircumstancesSummary_lastName, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_carersummaries`.`whoYouCareForCircumstancesSummary`.`middleName`, `exploded_journalentryproperties_declarationsummarydto_carersummaries`.`whoYouCareForCircumstancesSummary`.`middleName`) as journalEntryProperties_declarationSummaryDto_carerSummaries_whoYouCareForCircumstancesSummary_middleName, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_carersummaries`.`whoYouCareForCircumstancesSummary`.`postcode`, `exploded_journalentryproperties_declarationsummarydto_carersummaries`.`whoYouCareForCircumstancesSummary`.`postcode`) as journalEntryProperties_declarationSummaryDto_carerSummaries_whoYouCareForCircumstancesSummary_postcode, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_carersummaries`.`whoYouCareForCircumstancesSummary`.`relationship`, `exploded_journalentryproperties_declarationsummarydto_carersummaries`.`whoYouCareForCircumstancesSummary`.`relationship`) as journalEntryProperties_declarationSummaryDto_carerSummaries_whoYouCareForCircumstancesSummary_relationship, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_carersummaries`.`whoYouCareForCircumstancesSummary`.`townCity`, `exploded_journalentryproperties_declarationsummarydto_carersummaries`.`whoYouCareForCircumstancesSummary`.`townCity`) as journalEntryProperties_declarationSummaryDto_carerSummaries_whoYouCareForCircumstancesSummary_townCity, 
COALESCE(CAST(`removed_exploded_journalentryproperties_declarationsummarydto_carersummaries`.`confirmationRequired` as STRING), CAST(`exploded_journalentryproperties_declarationsummarydto_carersummaries`.`confirmationRequired` as STRING)) as journalEntryProperties_declarationSummaryDto_carerSummaries_confirmationRequired, 
COALESCE(CAST(`removed_exploded_journalentryproperties_declarationsummarydto_carersummaries`.`hideDetailsForPartnerDeclaration` as STRING), CAST(`exploded_journalentryproperties_declarationsummarydto_carersummaries`.`hideDetailsForPartnerDeclaration` as STRING)) as journalEntryProperties_declarationSummaryDto_carerSummaries_hideDetailsForPartnerDeclaration, 
COALESCE(CAST(`removed_exploded_journalentryproperties_declarationsummarydto_carersummaries`.`perClaimant` as STRING), CAST(`exploded_journalentryproperties_declarationsummarydto_carersummaries`.`perClaimant` as STRING)) as journalEntryProperties_declarationSummaryDto_carerSummaries_perClaimant, 
COALESCE(`removed_exploded_journalentryproperties_declarationsummarydto_carersummaries`.`type`, `exploded_journalentryproperties_declarationsummarydto_carersummaries`.`type`) as journalEntryProperties_declarationSummaryDto_carerSummaries_type, 
COALESCE(`_removed`.`journalEntryProperties`.`newDeclarationSummaryDto`.`addressSummary`.`declarationSummaryKey`.`claimantId`, `journalEntryProperties`.`newDeclarationSummaryDto`.`addressSummary`.`declarationSummaryKey`.`claimantId`) as journalEntryProperties_newDeclarationSummaryDto_addressSummary_declarationSummaryKey_claimantId, 
COALESCE(`_removed`.`journalEntryProperties`.`newDeclarationSummaryDto`.`addressSummary`.`declarationSummaryKey`.`claimantToDoType`, `journalEntryProperties`.`newDeclarationSummaryDto`.`addressSummary`.`declarationSummaryKey`.`claimantToDoType`) as journalEntryProperties_newDeclarationSummaryDto_addressSummary_declarationSummaryKey_claimantToDoType, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`newDeclarationSummaryDto`.`addressSummary`.`hasFullDetails` as STRING), CAST(`journalEntryProperties`.`newDeclarationSummaryDto`.`addressSummary`.`hasFullDetails` as STRING)) as journalEntryProperties_newDeclarationSummaryDto_addressSummary_hasFullDetails, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`newDeclarationSummaryDto`.`addressSummary`.`summary`.`confirmationRequired` as STRING), CAST(`journalEntryProperties`.`newDeclarationSummaryDto`.`addressSummary`.`summary`.`confirmationRequired` as STRING)) as journalEntryProperties_newDeclarationSummaryDto_addressSummary_summary_confirmationRequired, 
COALESCE(`_removed`.`journalEntryProperties`.`newDeclarationSummaryDto`.`addressSummary`.`summary`.`contractId`, `journalEntryProperties`.`newDeclarationSummaryDto`.`addressSummary`.`summary`.`contractId`) as journalEntryProperties_newDeclarationSummaryDto_addressSummary_summary_contractId, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`newDeclarationSummaryDto`.`addressSummary`.`summary`.`hideDetailsForPartnerDeclaration` as STRING), CAST(`journalEntryProperties`.`newDeclarationSummaryDto`.`addressSummary`.`summary`.`hideDetailsForPartnerDeclaration` as STRING)) as journalEntryProperties_newDeclarationSummaryDto_addressSummary_summary_hideDetailsForPartnerDeclaration, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`newDeclarationSummaryDto`.`addressSummary`.`summary`.`perClaimant` as STRING), CAST(`journalEntryProperties`.`newDeclarationSummaryDto`.`addressSummary`.`summary`.`perClaimant` as STRING)) as journalEntryProperties_newDeclarationSummaryDto_addressSummary_summary_perClaimant, 
COALESCE(`_removed`.`journalEntryProperties`.`newDeclarationSummaryDto`.`bankDetailsSummary`.`declarationSummaryKey`.`claimantId`, `journalEntryProperties`.`newDeclarationSummaryDto`.`bankDetailsSummary`.`declarationSummaryKey`.`claimantId`) as journalEntryProperties_newDeclarationSummaryDto_bankDetailsSummary_declarationSummaryKey_claimantId, 
COALESCE(`_removed`.`journalEntryProperties`.`newDeclarationSummaryDto`.`bankDetailsSummary`.`declarationSummaryKey`.`claimantToDoType`, `journalEntryProperties`.`newDeclarationSummaryDto`.`bankDetailsSummary`.`declarationSummaryKey`.`claimantToDoType`) as journalEntryProperties_newDeclarationSummaryDto_bankDetailsSummary_declarationSummaryKey_claimantToDoType, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`newDeclarationSummaryDto`.`bankDetailsSummary`.`hasFullDetails` as STRING), CAST(`journalEntryProperties`.`newDeclarationSummaryDto`.`bankDetailsSummary`.`hasFullDetails` as STRING)) as journalEntryProperties_newDeclarationSummaryDto_bankDetailsSummary_hasFullDetails, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`newDeclarationSummaryDto`.`bankDetailsSummary`.`summary`.`confirmationRequired` as STRING), CAST(`journalEntryProperties`.`newDeclarationSummaryDto`.`bankDetailsSummary`.`summary`.`confirmationRequired` as STRING)) as journalEntryProperties_newDeclarationSummaryDto_bankDetailsSummary_summary_confirmationRequired, 
COALESCE(`_removed`.`journalEntryProperties`.`newDeclarationSummaryDto`.`bankDetailsSummary`.`summary`.`contractId`, `journalEntryProperties`.`newDeclarationSummaryDto`.`bankDetailsSummary`.`summary`.`contractId`) as journalEntryProperties_newDeclarationSummaryDto_bankDetailsSummary_summary_contractId, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`newDeclarationSummaryDto`.`bankDetailsSummary`.`summary`.`hideDetailsForPartnerDeclaration` as STRING), CAST(`journalEntryProperties`.`newDeclarationSummaryDto`.`bankDetailsSummary`.`summary`.`hideDetailsForPartnerDeclaration` as STRING)) as journalEntryProperties_newDeclarationSummaryDto_bankDetailsSummary_summary_hideDetailsForPartnerDeclaration, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`newDeclarationSummaryDto`.`bankDetailsSummary`.`summary`.`perClaimant` as STRING), CAST(`journalEntryProperties`.`newDeclarationSummaryDto`.`bankDetailsSummary`.`summary`.`perClaimant` as STRING)) as journalEntryProperties_newDeclarationSummaryDto_bankDetailsSummary_summary_perClaimant, 
COALESCE(`_removed`.`journalEntryProperties`.`newDeclarationSummaryDto`.`childcareSummary`.`declarationSummaryKey`.`claimantId`, `journalEntryProperties`.`newDeclarationSummaryDto`.`childcareSummary`.`declarationSummaryKey`.`claimantId`) as journalEntryProperties_newDeclarationSummaryDto_childcareSummary_declarationSummaryKey_claimantId, 
COALESCE(`_removed`.`journalEntryProperties`.`newDeclarationSummaryDto`.`childcareSummary`.`declarationSummaryKey`.`claimantToDoType`, `journalEntryProperties`.`newDeclarationSummaryDto`.`childcareSummary`.`declarationSummaryKey`.`claimantToDoType`) as journalEntryProperties_newDeclarationSummaryDto_childcareSummary_declarationSummaryKey_claimantToDoType, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`newDeclarationSummaryDto`.`childcareSummary`.`hasFullDetails` as STRING), CAST(`journalEntryProperties`.`newDeclarationSummaryDto`.`childcareSummary`.`hasFullDetails` as STRING)) as journalEntryProperties_newDeclarationSummaryDto_childcareSummary_hasFullDetails, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`newDeclarationSummaryDto`.`childcareSummary`.`summary`.`confirmationRequired` as STRING), CAST(`journalEntryProperties`.`newDeclarationSummaryDto`.`childcareSummary`.`summary`.`confirmationRequired` as STRING)) as journalEntryProperties_newDeclarationSummaryDto_childcareSummary_summary_confirmationRequired, 
COALESCE(`_removed`.`journalEntryProperties`.`newDeclarationSummaryDto`.`childcareSummary`.`summary`.`contractId`, `journalEntryProperties`.`newDeclarationSummaryDto`.`childcareSummary`.`summary`.`contractId`) as journalEntryProperties_newDeclarationSummaryDto_childcareSummary_summary_contractId, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`newDeclarationSummaryDto`.`childcareSummary`.`summary`.`hideDetailsForPartnerDeclaration` as STRING), CAST(`journalEntryProperties`.`newDeclarationSummaryDto`.`childcareSummary`.`summary`.`hideDetailsForPartnerDeclaration` as STRING)) as journalEntryProperties_newDeclarationSummaryDto_childcareSummary_summary_hideDetailsForPartnerDeclaration, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`newDeclarationSummaryDto`.`childcareSummary`.`summary`.`perClaimant` as STRING), CAST(`journalEntryProperties`.`newDeclarationSummaryDto`.`childcareSummary`.`summary`.`perClaimant` as STRING)) as journalEntryProperties_newDeclarationSummaryDto_childcareSummary_summary_perClaimant, 
COALESCE(`_removed`.`journalEntryProperties`.`newDeclarationSummaryDto`.`housingSummary`.`declarationSummaryKey`.`claimantId`, `journalEntryProperties`.`newDeclarationSummaryDto`.`housingSummary`.`declarationSummaryKey`.`claimantId`) as journalEntryProperties_newDeclarationSummaryDto_housingSummary_declarationSummaryKey_claimantId, 
COALESCE(`_removed`.`journalEntryProperties`.`newDeclarationSummaryDto`.`housingSummary`.`declarationSummaryKey`.`claimantToDoType`, `journalEntryProperties`.`newDeclarationSummaryDto`.`housingSummary`.`declarationSummaryKey`.`claimantToDoType`) as journalEntryProperties_newDeclarationSummaryDto_housingSummary_declarationSummaryKey_claimantToDoType, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`newDeclarationSummaryDto`.`housingSummary`.`hasFullDetails` as STRING), CAST(`journalEntryProperties`.`newDeclarationSummaryDto`.`housingSummary`.`hasFullDetails` as STRING)) as journalEntryProperties_newDeclarationSummaryDto_housingSummary_hasFullDetails, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`newDeclarationSummaryDto`.`housingSummary`.`summary`.`confirmationRequired` as STRING), CAST(`journalEntryProperties`.`newDeclarationSummaryDto`.`housingSummary`.`summary`.`confirmationRequired` as STRING)) as journalEntryProperties_newDeclarationSummaryDto_housingSummary_summary_confirmationRequired, 
COALESCE(`_removed`.`journalEntryProperties`.`newDeclarationSummaryDto`.`housingSummary`.`summary`.`contractId`, `journalEntryProperties`.`newDeclarationSummaryDto`.`housingSummary`.`summary`.`contractId`) as journalEntryProperties_newDeclarationSummaryDto_housingSummary_summary_contractId, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`newDeclarationSummaryDto`.`housingSummary`.`summary`.`hideDetailsForPartnerDeclaration` as STRING), CAST(`journalEntryProperties`.`newDeclarationSummaryDto`.`housingSummary`.`summary`.`hideDetailsForPartnerDeclaration` as STRING)) as journalEntryProperties_newDeclarationSummaryDto_housingSummary_summary_hideDetailsForPartnerDeclaration, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`newDeclarationSummaryDto`.`housingSummary`.`summary`.`perClaimant` as STRING), CAST(`journalEntryProperties`.`newDeclarationSummaryDto`.`housingSummary`.`summary`.`perClaimant` as STRING)) as journalEntryProperties_newDeclarationSummaryDto_housingSummary_summary_perClaimant, 
COALESCE(`_removed`.`journalEntryProperties`.`newDeclarationSummaryDto`.`partner`.`declarationSummaryKey`.`claimantId`, `journalEntryProperties`.`newDeclarationSummaryDto`.`partner`.`declarationSummaryKey`.`claimantId`) as journalEntryProperties_newDeclarationSummaryDto_partner_declarationSummaryKey_claimantId, 
COALESCE(`_removed`.`journalEntryProperties`.`newDeclarationSummaryDto`.`partner`.`declarationSummaryKey`.`claimantToDoType`, `journalEntryProperties`.`newDeclarationSummaryDto`.`partner`.`declarationSummaryKey`.`claimantToDoType`) as journalEntryProperties_newDeclarationSummaryDto_partner_declarationSummaryKey_claimantToDoType, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`newDeclarationSummaryDto`.`partner`.`hasFullDetails` as STRING), CAST(`journalEntryProperties`.`newDeclarationSummaryDto`.`partner`.`hasFullDetails` as STRING)) as journalEntryProperties_newDeclarationSummaryDto_partner_hasFullDetails, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`newDeclarationSummaryDto`.`partner`.`summary`.`confirmationRequired` as STRING), CAST(`journalEntryProperties`.`newDeclarationSummaryDto`.`partner`.`summary`.`confirmationRequired` as STRING)) as journalEntryProperties_newDeclarationSummaryDto_partner_summary_confirmationRequired, 
COALESCE(`_removed`.`journalEntryProperties`.`newDeclarationSummaryDto`.`partner`.`summary`.`contractId`, `journalEntryProperties`.`newDeclarationSummaryDto`.`partner`.`summary`.`contractId`) as journalEntryProperties_newDeclarationSummaryDto_partner_summary_contractId, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`newDeclarationSummaryDto`.`partner`.`summary`.`hideDetailsForPartnerDeclaration` as STRING), CAST(`journalEntryProperties`.`newDeclarationSummaryDto`.`partner`.`summary`.`hideDetailsForPartnerDeclaration` as STRING)) as journalEntryProperties_newDeclarationSummaryDto_partner_summary_hideDetailsForPartnerDeclaration, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`newDeclarationSummaryDto`.`partner`.`summary`.`perClaimant` as STRING), CAST(`journalEntryProperties`.`newDeclarationSummaryDto`.`partner`.`summary`.`perClaimant` as STRING)) as journalEntryProperties_newDeclarationSummaryDto_partner_summary_perClaimant, 
COALESCE(`_removed`.`journalEntryProperties`.`newDeclarationSummaryDto`.`partnerQuestion`.`declarationSummaryKey`.`claimantId`, `journalEntryProperties`.`newDeclarationSummaryDto`.`partnerQuestion`.`declarationSummaryKey`.`claimantId`) as journalEntryProperties_newDeclarationSummaryDto_partnerQuestion_declarationSummaryKey_claimantId, 
COALESCE(`_removed`.`journalEntryProperties`.`newDeclarationSummaryDto`.`partnerQuestion`.`declarationSummaryKey`.`claimantToDoType`, `journalEntryProperties`.`newDeclarationSummaryDto`.`partnerQuestion`.`declarationSummaryKey`.`claimantToDoType`) as journalEntryProperties_newDeclarationSummaryDto_partnerQuestion_declarationSummaryKey_claimantToDoType, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`newDeclarationSummaryDto`.`partnerQuestion`.`hasFullDetails` as STRING), CAST(`journalEntryProperties`.`newDeclarationSummaryDto`.`partnerQuestion`.`hasFullDetails` as STRING)) as journalEntryProperties_newDeclarationSummaryDto_partnerQuestion_hasFullDetails, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`newDeclarationSummaryDto`.`partnerQuestion`.`summary`.`confirmationRequired` as STRING), CAST(`journalEntryProperties`.`newDeclarationSummaryDto`.`partnerQuestion`.`summary`.`confirmationRequired` as STRING)) as journalEntryProperties_newDeclarationSummaryDto_partnerQuestion_summary_confirmationRequired, 
COALESCE(`_removed`.`journalEntryProperties`.`newDeclarationSummaryDto`.`partnerQuestion`.`summary`.`contractId`, `journalEntryProperties`.`newDeclarationSummaryDto`.`partnerQuestion`.`summary`.`contractId`) as journalEntryProperties_newDeclarationSummaryDto_partnerQuestion_summary_contractId, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`newDeclarationSummaryDto`.`partnerQuestion`.`summary`.`hideDetailsForPartnerDeclaration` as STRING), CAST(`journalEntryProperties`.`newDeclarationSummaryDto`.`partnerQuestion`.`summary`.`hideDetailsForPartnerDeclaration` as STRING)) as journalEntryProperties_newDeclarationSummaryDto_partnerQuestion_summary_hideDetailsForPartnerDeclaration, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`newDeclarationSummaryDto`.`partnerQuestion`.`summary`.`perClaimant` as STRING), CAST(`journalEntryProperties`.`newDeclarationSummaryDto`.`partnerQuestion`.`summary`.`perClaimant` as STRING)) as journalEntryProperties_newDeclarationSummaryDto_partnerQuestion_summary_perClaimant, 
COALESCE(`_removed`.`journalEntryProperties`.`newDeclarationSummaryDto`.`person`.`declarationSummaryKey`.`claimantId`, `journalEntryProperties`.`newDeclarationSummaryDto`.`person`.`declarationSummaryKey`.`claimantId`) as journalEntryProperties_newDeclarationSummaryDto_person_declarationSummaryKey_claimantId, 
COALESCE(`_removed`.`journalEntryProperties`.`newDeclarationSummaryDto`.`person`.`declarationSummaryKey`.`claimantToDoType`, `journalEntryProperties`.`newDeclarationSummaryDto`.`person`.`declarationSummaryKey`.`claimantToDoType`) as journalEntryProperties_newDeclarationSummaryDto_person_declarationSummaryKey_claimantToDoType, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`newDeclarationSummaryDto`.`person`.`hasFullDetails` as STRING), CAST(`journalEntryProperties`.`newDeclarationSummaryDto`.`person`.`hasFullDetails` as STRING)) as journalEntryProperties_newDeclarationSummaryDto_person_hasFullDetails, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`newDeclarationSummaryDto`.`person`.`summary`.`confirmationRequired` as STRING), CAST(`journalEntryProperties`.`newDeclarationSummaryDto`.`person`.`summary`.`confirmationRequired` as STRING)) as journalEntryProperties_newDeclarationSummaryDto_person_summary_confirmationRequired, 
COALESCE(`_removed`.`journalEntryProperties`.`newDeclarationSummaryDto`.`person`.`summary`.`contractId`, `journalEntryProperties`.`newDeclarationSummaryDto`.`person`.`summary`.`contractId`) as journalEntryProperties_newDeclarationSummaryDto_person_summary_contractId, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`newDeclarationSummaryDto`.`person`.`summary`.`hideDetailsForPartnerDeclaration` as STRING), CAST(`journalEntryProperties`.`newDeclarationSummaryDto`.`person`.`summary`.`hideDetailsForPartnerDeclaration` as STRING)) as journalEntryProperties_newDeclarationSummaryDto_person_summary_hideDetailsForPartnerDeclaration, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`newDeclarationSummaryDto`.`person`.`summary`.`perClaimant` as STRING), CAST(`journalEntryProperties`.`newDeclarationSummaryDto`.`person`.`summary`.`perClaimant` as STRING)) as journalEntryProperties_newDeclarationSummaryDto_person_summary_perClaimant, 
COALESCE(`_removed`.`journalEntryProperties`.`newDeclarationSummaryDto`.`whoLivesWithYouSummary`.`declarationSummaryKey`.`claimantId`, `journalEntryProperties`.`newDeclarationSummaryDto`.`whoLivesWithYouSummary`.`declarationSummaryKey`.`claimantId`) as journalEntryProperties_newDeclarationSummaryDto_whoLivesWithYouSummary_declarationSummaryKey_claimantId, 
COALESCE(`_removed`.`journalEntryProperties`.`newDeclarationSummaryDto`.`whoLivesWithYouSummary`.`declarationSummaryKey`.`claimantToDoType`, `journalEntryProperties`.`newDeclarationSummaryDto`.`whoLivesWithYouSummary`.`declarationSummaryKey`.`claimantToDoType`) as journalEntryProperties_newDeclarationSummaryDto_whoLivesWithYouSummary_declarationSummaryKey_claimantToDoType, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`newDeclarationSummaryDto`.`whoLivesWithYouSummary`.`hasFullDetails` as STRING), CAST(`journalEntryProperties`.`newDeclarationSummaryDto`.`whoLivesWithYouSummary`.`hasFullDetails` as STRING)) as journalEntryProperties_newDeclarationSummaryDto_whoLivesWithYouSummary_hasFullDetails, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`newDeclarationSummaryDto`.`whoLivesWithYouSummary`.`summary`.`confirmationRequired` as STRING), CAST(`journalEntryProperties`.`newDeclarationSummaryDto`.`whoLivesWithYouSummary`.`summary`.`confirmationRequired` as STRING)) as journalEntryProperties_newDeclarationSummaryDto_whoLivesWithYouSummary_summary_confirmationRequired, 
COALESCE(`_removed`.`journalEntryProperties`.`newDeclarationSummaryDto`.`whoLivesWithYouSummary`.`summary`.`contractId`, `journalEntryProperties`.`newDeclarationSummaryDto`.`whoLivesWithYouSummary`.`summary`.`contractId`) as journalEntryProperties_newDeclarationSummaryDto_whoLivesWithYouSummary_summary_contractId, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`newDeclarationSummaryDto`.`whoLivesWithYouSummary`.`summary`.`hideDetailsForPartnerDeclaration` as STRING), CAST(`journalEntryProperties`.`newDeclarationSummaryDto`.`whoLivesWithYouSummary`.`summary`.`hideDetailsForPartnerDeclaration` as STRING)) as journalEntryProperties_newDeclarationSummaryDto_whoLivesWithYouSummary_summary_hideDetailsForPartnerDeclaration, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`newDeclarationSummaryDto`.`whoLivesWithYouSummary`.`summary`.`perClaimant` as STRING), CAST(`journalEntryProperties`.`newDeclarationSummaryDto`.`whoLivesWithYouSummary`.`summary`.`perClaimant` as STRING)) as journalEntryProperties_newDeclarationSummaryDto_whoLivesWithYouSummary_summary_perClaimant, 
COALESCE(`_removed`.`journalEntryProperties`.`newDeclarationSummaryDto`.`savingsAndInvestmentSummary`.`declarationSummaryKey`.`claimantId`, `journalEntryProperties`.`newDeclarationSummaryDto`.`savingsAndInvestmentSummary`.`declarationSummaryKey`.`claimantId`) as journalEntryProperties_newDeclarationSummaryDto_savingsAndInvestmentSummary_declarationSummaryKey_claimantId, 
COALESCE(`_removed`.`journalEntryProperties`.`newDeclarationSummaryDto`.`savingsAndInvestmentSummary`.`declarationSummaryKey`.`claimantToDoType`, `journalEntryProperties`.`newDeclarationSummaryDto`.`savingsAndInvestmentSummary`.`declarationSummaryKey`.`claimantToDoType`) as journalEntryProperties_newDeclarationSummaryDto_savingsAndInvestmentSummary_declarationSummaryKey_claimantToDoType, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`newDeclarationSummaryDto`.`savingsAndInvestmentSummary`.`hasFullDetails` as STRING), CAST(`journalEntryProperties`.`newDeclarationSummaryDto`.`savingsAndInvestmentSummary`.`hasFullDetails` as STRING)) as journalEntryProperties_newDeclarationSummaryDto_savingsAndInvestmentSummary_hasFullDetails, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`newDeclarationSummaryDto`.`savingsAndInvestmentSummary`.`summary`.`confirmationRequired` as STRING), CAST(`journalEntryProperties`.`newDeclarationSummaryDto`.`savingsAndInvestmentSummary`.`summary`.`confirmationRequired` as STRING)) as journalEntryProperties_newDeclarationSummaryDto_savingsAndInvestmentSummary_summary_confirmationRequired, 
COALESCE(`_removed`.`journalEntryProperties`.`newDeclarationSummaryDto`.`savingsAndInvestmentSummary`.`summary`.`contractId`, `journalEntryProperties`.`newDeclarationSummaryDto`.`savingsAndInvestmentSummary`.`summary`.`contractId`) as journalEntryProperties_newDeclarationSummaryDto_savingsAndInvestmentSummary_summary_contractId, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`newDeclarationSummaryDto`.`savingsAndInvestmentSummary`.`summary`.`hideDetailsForPartnerDeclaration` as STRING), CAST(`journalEntryProperties`.`newDeclarationSummaryDto`.`savingsAndInvestmentSummary`.`summary`.`hideDetailsForPartnerDeclaration` as STRING)) as journalEntryProperties_newDeclarationSummaryDto_savingsAndInvestmentSummary_summary_hideDetailsForPartnerDeclaration, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`newDeclarationSummaryDto`.`savingsAndInvestmentSummary`.`summary`.`perClaimant` as STRING), CAST(`journalEntryProperties`.`newDeclarationSummaryDto`.`savingsAndInvestmentSummary`.`summary`.`perClaimant` as STRING)) as journalEntryProperties_newDeclarationSummaryDto_savingsAndInvestmentSummary_summary_perClaimant, 
COALESCE(`_removed`.`journalEntryProperties`.`type`, `journalEntryProperties`.`type`) as journalEntryProperties_type, 
COALESCE(`_removed`.`_id`.`journalId`, `_id`.`journalId`) as id FROM src_core_journal_journal_submitclaimjournalentry
 LATERAL VIEW OUTER EXPLODE(`journalEntryProperties`.`declarationSummaryDto`.`childcareSummary`.`childcareProviderSummaries`) view_exploded_journalentryproperties_declarationsummarydto_childcaresummary_childcareprovidersummaries AS exploded_journalentryproperties_declarationsummarydto_childcaresummary_childcareprovidersummaries 
 LATERAL VIEW OUTER EXPLODE(`exploded_journalentryproperties_declarationsummarydto_childcaresummary_childcareprovidersummaries`.`childcareProviderCostsSummaries`) view_exploded_journalentryproperties_declarationsummarydto_childcaresummary_childcareprovidersummaries_exploded_childcareprovidercostssummaries AS exploded_journalentryproperties_declarationsummarydto_childcaresummary_childcareprovidersummaries_exploded_childcareprovidercostssummaries 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`childcareSummary`.`childcareProviderSummaries`) view_removed_exploded_journalentryproperties_declarationsummarydto_childcaresummary_childcareprovidersummaries AS removed_exploded_journalentryproperties_declarationsummarydto_childcaresummary_childcareprovidersummaries 
 LATERAL VIEW OUTER EXPLODE(`removed_exploded_journalentryproperties_declarationsummarydto_childcaresummary_childcareprovidersummaries`.`childcareProviderCostsSummaries`) view_removed_exploded_journalentryproperties_declarationsummarydto_childcaresummary_childcareprovidersummaries_exploded_childcareprovidercostssummaries AS removed_exploded_journalentryproperties_declarationsummarydto_childcaresummary_childcareprovidersummaries_exploded_childcareprovidercostssummaries 
 LATERAL VIEW OUTER EXPLODE(`exploded_journalentryproperties_declarationsummarydto_childcaresummary_childcareprovidersummaries_exploded_childcareprovidercostssummaries`.`childcareProviderChildren`) view_exploded_journalentryproperties_declarationsummarydto_childcaresummary_childcareprovidersummaries_exploded_childcareprovidercostssummaries_exploded_childcareproviderchildren AS exploded_journalentryproperties_declarationsummarydto_childcaresummary_childcareprovidersummaries_exploded_childcareprovidercostssummaries_exploded_childcareproviderchildren 
 LATERAL VIEW OUTER EXPLODE(`removed_exploded_journalentryproperties_declarationsummarydto_childcaresummary_childcareprovidersummaries_exploded_childcareprovidercostssummaries`.`childcareProviderChildren`) view_removed_exploded_journalentryproperties_declarationsummarydto_childcaresummary_childcareprovidersummaries_exploded_childcareprovidercostssummaries_exploded_childcareproviderchildren AS removed_exploded_journalentryproperties_declarationsummarydto_childcaresummary_childcareprovidersummaries_exploded_childcareprovidercostssummaries_exploded_childcareproviderchildren 
 LATERAL VIEW OUTER EXPLODE(`journalEntryProperties`.`declarationSummaryDto`.`healthAndDisabilitySummaries`) view_exploded_journalentryproperties_declarationsummarydto_healthanddisabilitysummaries AS exploded_journalentryproperties_declarationsummarydto_healthanddisabilitysummaries 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`healthAndDisabilitySummaries`) view_removed_exploded_journalentryproperties_declarationsummarydto_healthanddisabilitysummaries AS removed_exploded_journalentryproperties_declarationsummarydto_healthanddisabilitysummaries 
 LATERAL VIEW OUTER EXPLODE(`journalEntryProperties`.`declarationSummaryDto`.`healthSummaries`) view_exploded_journalentryproperties_declarationsummarydto_healthsummaries AS exploded_journalentryproperties_declarationsummarydto_healthsummaries 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`healthSummaries`) view_removed_exploded_journalentryproperties_declarationsummarydto_healthsummaries AS removed_exploded_journalentryproperties_declarationsummarydto_healthsummaries 
 LATERAL VIEW OUTER EXPLODE(`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`ownHomeSummary`.`mortgageDetailsList`) view_exploded_journalentryproperties_declarationsummarydto_housingsummary_ownhomesummary_mortgagedetailslist AS exploded_journalentryproperties_declarationsummarydto_housingsummary_ownhomesummary_mortgagedetailslist 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`housingSummary`.`ownHomeSummary`.`mortgageDetailsList`) view_removed_exploded_journalentryproperties_declarationsummarydto_housingsummary_ownhomesummary_mortgagedetailslist AS removed_exploded_journalentryproperties_declarationsummarydto_housingsummary_ownhomesummary_mortgagedetailslist 
 LATERAL VIEW OUTER EXPLODE(`journalEntryProperties`.`declarationSummaryDto`.`nationalitySummaries`) view_exploded_journalentryproperties_declarationsummarydto_nationalitysummaries AS exploded_journalentryproperties_declarationsummarydto_nationalitysummaries 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`nationalitySummaries`) view_removed_exploded_journalentryproperties_declarationsummarydto_nationalitysummaries AS removed_exploded_journalentryproperties_declarationsummarydto_nationalitysummaries 
 LATERAL VIEW OUTER EXPLODE(`journalEntryProperties`.`declarationSummaryDto`.`whoLivesWithYouSummary`.`children`) view_exploded_journalentryproperties_declarationsummarydto_wholiveswithyousummary_children AS exploded_journalentryproperties_declarationsummarydto_wholiveswithyousummary_children 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`whoLivesWithYouSummary`.`children`) view_removed_exploded_journalentryproperties_declarationsummarydto_wholiveswithyousummary_children AS removed_exploded_journalentryproperties_declarationsummarydto_wholiveswithyousummary_children 
 LATERAL VIEW OUTER EXPLODE(`journalEntryProperties`.`declarationSummaryDto`.`workAndEarningsSummaries`) view_exploded_journalentryproperties_declarationsummarydto_workandearningssummaries AS exploded_journalentryproperties_declarationsummarydto_workandearningssummaries 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`workAndEarningsSummaries`) view_removed_exploded_journalentryproperties_declarationsummarydto_workandearningssummaries AS removed_exploded_journalentryproperties_declarationsummarydto_workandearningssummaries 
 LATERAL VIEW OUTER EXPLODE(`journalEntryProperties`.`declarationSummaryDto`.`carerSummaries`) view_exploded_journalentryproperties_declarationsummarydto_carersummaries AS exploded_journalentryproperties_declarationsummarydto_carersummaries 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`journalEntryProperties`.`declarationSummaryDto`.`carerSummaries`) view_removed_exploded_journalentryproperties_declarationsummarydto_carersummaries AS removed_exploded_journalentryproperties_declarationsummarydto_carersummaries 
 
 where `_removed`.`journalEntryProperties`.`type`='SubmitClaimJournalEntry' or `journalEntryProperties`.`type`='SubmitClaimJournalEntry';


!echo ------------------------;
!echo ------------------------ journal_PersonSummaryJournalEntry;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_journal_journal_personsummaryjournalentry
;

CREATE EXTERNAL TABLE src_core_journal_journal_personsummaryjournalentry(
`journalEntryProperties` STRUCT<`personSummary`:STRUCT<`effectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`contactPreference`:STRING
,`contractId`:STRING
,`emailAddress`:STRING
,`firstName`:STRING
,`lastName`:STRING
,`middleName`:STRING
,`mobileNumber`:STRING
,`name`:STRING
,`processId`:STRING
,`claimantId`:STRING
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`journalId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`journalEntryProperties`:STRUCT<`personSummary`:STRUCT<`effectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`contactPreference`:STRING
,`contractId`:STRING
,`emailAddress`:STRING
,`firstName`:STRING
,`lastName`:STRING
,`middleName`:STRING
,`mobileNumber`:STRING
,`name`:STRING
,`processId`:STRING
,`claimantId`:STRING
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`journalId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/journal';

DROP TABLE IF EXISTS journal_PersonSummaryJournalEntry;

CREATE TABLE journal_personsummaryjournalentry STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`journalEntryProperties`.`personSummary`.`contactPreference`, `journalEntryProperties`.`personSummary`.`contactPreference`) as journalEntryProperties_personSummary_contactPreference, 
COALESCE(`_removed`.`journalEntryProperties`.`personSummary`.`contractId`, `journalEntryProperties`.`personSummary`.`contractId`) as journalEntryProperties_personSummary_contractId, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`personSummary`.`effectiveDate`.`hasDate` as STRING), CAST(`journalEntryProperties`.`personSummary`.`effectiveDate`.`hasDate` as STRING)) as journalEntryProperties_personSummary_effectiveDate_hasDate, 
COALESCE(`_removed`.`journalEntryProperties`.`personSummary`.`effectiveDate`.`knownDate`, `journalEntryProperties`.`personSummary`.`effectiveDate`.`knownDate`) as journalEntryProperties_personSummary_effectiveDate_knownDate, 
COALESCE(`_removed`.`journalEntryProperties`.`personSummary`.`effectiveDate`.`type`, `journalEntryProperties`.`personSummary`.`effectiveDate`.`type`) as journalEntryProperties_personSummary_effectiveDate_type, 
COALESCE(`_removed`.`journalEntryProperties`.`personSummary`.`effectiveDate`.`date`, `journalEntryProperties`.`personSummary`.`effectiveDate`.`date`) as journalEntryProperties_personSummary_effectiveDate_date, 
COALESCE(`_removed`.`journalEntryProperties`.`personSummary`.`emailAddress`, `journalEntryProperties`.`personSummary`.`emailAddress`) as journalEntryProperties_personSummary_emailAddress, 
COALESCE(`_removed`.`journalEntryProperties`.`personSummary`.`firstName`, `journalEntryProperties`.`personSummary`.`firstName`) as journalEntryProperties_personSummary_firstName, 
COALESCE(`_removed`.`journalEntryProperties`.`personSummary`.`lastName`, `journalEntryProperties`.`personSummary`.`lastName`) as journalEntryProperties_personSummary_lastName, 
COALESCE(`_removed`.`journalEntryProperties`.`personSummary`.`middleName`, `journalEntryProperties`.`personSummary`.`middleName`) as journalEntryProperties_personSummary_middleName, 
COALESCE(`_removed`.`journalEntryProperties`.`personSummary`.`mobileNumber`, `journalEntryProperties`.`personSummary`.`mobileNumber`) as journalEntryProperties_personSummary_mobileNumber, 
COALESCE(`_removed`.`journalEntryProperties`.`personSummary`.`name`, `journalEntryProperties`.`personSummary`.`name`) as journalEntryProperties_personSummary_name, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`personSummary`.`paymentEffectiveDate`.`hasDate` as STRING), CAST(`journalEntryProperties`.`personSummary`.`paymentEffectiveDate`.`hasDate` as STRING)) as journalEntryProperties_personSummary_paymentEffectiveDate_hasDate, 
COALESCE(`_removed`.`journalEntryProperties`.`personSummary`.`paymentEffectiveDate`.`knownDate`, `journalEntryProperties`.`personSummary`.`paymentEffectiveDate`.`knownDate`) as journalEntryProperties_personSummary_paymentEffectiveDate_knownDate, 
COALESCE(`_removed`.`journalEntryProperties`.`personSummary`.`paymentEffectiveDate`.`type`, `journalEntryProperties`.`personSummary`.`paymentEffectiveDate`.`type`) as journalEntryProperties_personSummary_paymentEffectiveDate_type, 
COALESCE(`_removed`.`journalEntryProperties`.`personSummary`.`paymentEffectiveDate`.`date`, `journalEntryProperties`.`personSummary`.`paymentEffectiveDate`.`date`) as journalEntryProperties_personSummary_paymentEffectiveDate_date, 
COALESCE(`_removed`.`journalEntryProperties`.`personSummary`.`processId`, `journalEntryProperties`.`personSummary`.`processId`) as journalEntryProperties_personSummary_processId, 
COALESCE(`_removed`.`journalEntryProperties`.`personSummary`.`claimantId`, `journalEntryProperties`.`personSummary`.`claimantId`) as journalEntryProperties_personSummary_claimantId, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`personSummary`.`confirmationRequired` as STRING), CAST(`journalEntryProperties`.`personSummary`.`confirmationRequired` as STRING)) as journalEntryProperties_personSummary_confirmationRequired, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`personSummary`.`hideDetailsForPartnerDeclaration` as STRING), CAST(`journalEntryProperties`.`personSummary`.`hideDetailsForPartnerDeclaration` as STRING)) as journalEntryProperties_personSummary_hideDetailsForPartnerDeclaration, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`personSummary`.`perClaimant` as STRING), CAST(`journalEntryProperties`.`personSummary`.`perClaimant` as STRING)) as journalEntryProperties_personSummary_perClaimant, 
COALESCE(`_removed`.`journalEntryProperties`.`personSummary`.`type`, `journalEntryProperties`.`personSummary`.`type`) as journalEntryProperties_personSummary_type, 
COALESCE(`_removed`.`journalEntryProperties`.`type`, `journalEntryProperties`.`type`) as journalEntryProperties_type, 
COALESCE(`_removed`.`_id`.`journalId`, `_id`.`journalId`) as id FROM src_core_journal_journal_personsummaryjournalentry
 src_core_journal_journal_personsummaryjournalentry 
 where `_removed`.`journalEntryProperties`.`type`='PersonSummaryJournalEntry' or `journalEntryProperties`.`type`='PersonSummaryJournalEntry';


!echo ------------------------;
!echo ------------------------ todo_STOPPED_WORKING_PREVIOUS_EARNINGS;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_todo_todo_stopped_working_previous_earnings
;

CREATE EXTERNAL TABLE src_core_todo_todo_stopped_working_previous_earnings(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`properties` STRUCT<`requiredEarningsEndDate`:STRING
,`numberOfMonths`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`properties`:STRUCT<`requiredEarningsEndDate`:STRING
,`numberOfMonths`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/toDo';

DROP TABLE IF EXISTS todo_STOPPED_WORKING_PREVIOUS_EARNINGS;

CREATE TABLE todo_stopped_working_previous_earnings STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`properties`.`requiredEarningsEndDate`, `properties`.`requiredEarningsEndDate`) as properties_requiredEarningsEndDate, 
COALESCE(`_removed`.`properties`.`numberOfMonths`, `properties`.`numberOfMonths`) as properties_numberOfMonths, 
COALESCE(`_removed`.`properties`.`type`, `properties`.`type`) as properties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_core_todo_todo_stopped_working_previous_earnings
 src_core_todo_todo_stopped_working_previous_earnings 
 where `_removed`.`properties`.`type`='STOPPED_WORKING_PREVIOUS_EARNINGS' or `properties`.`type`='STOPPED_WORKING_PREVIOUS_EARNINGS';


!echo ------------------------;
!echo ------------------------ agent_todo_JOURNAL_ENTRY;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_journal_entry
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_journal_entry(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`journalEntryCategory`:STRING
,`journalEntryId`:STRING
,`journalEntryThreadId`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`journalEntryCategory`:STRING
,`journalEntryId`:STRING
,`journalEntryThreadId`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_JOURNAL_ENTRY;

CREATE TABLE agent_todo_journal_entry STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`journalEntryCategory`, `toDoProperties`.`journalEntryCategory`) as toDoProperties_journalEntryCategory, 
COALESCE(`_removed`.`toDoProperties`.`journalEntryId`, `toDoProperties`.`journalEntryId`) as toDoProperties_journalEntryId, 
COALESCE(`_removed`.`toDoProperties`.`journalEntryThreadId`, `toDoProperties`.`journalEntryThreadId`) as toDoProperties_journalEntryThreadId, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_journal_entry
 src_agent_core_agenttodo_agent_todo_journal_entry 
 where `_removed`.`toDoProperties`.`type`='JOURNAL_ENTRY' or `toDoProperties`.`type`='JOURNAL_ENTRY';


!echo ------------------------;
!echo ------------------------ todo_REPORT_SELF_EMPLOYMENT_EARNINGS_FEEDBACK_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_todo_todo_report_self_employment_earnings_feedback_properties
;

CREATE EXTERNAL TABLE src_core_todo_todo_report_self_employment_earnings_feedback_properties(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`properties` STRUCT<`triggeredByToDoId`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`properties`:STRUCT<`triggeredByToDoId`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/toDo';

DROP TABLE IF EXISTS todo_REPORT_SELF_EMPLOYMENT_EARNINGS_FEEDBACK_PROPERTIES;

CREATE TABLE todo_report_self_employment_earnings_feedback_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`properties`.`triggeredByToDoId`, `properties`.`triggeredByToDoId`) as properties_triggeredByToDoId, 
COALESCE(`_removed`.`properties`.`type`, `properties`.`type`) as properties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_core_todo_todo_report_self_employment_earnings_feedback_properties
 src_core_todo_todo_report_self_employment_earnings_feedback_properties 
 where `_removed`.`properties`.`type`='REPORT_SELF_EMPLOYMENT_EARNINGS_FEEDBACK_PROPERTIES' or `properties`.`type`='REPORT_SELF_EMPLOYMENT_EARNINGS_FEEDBACK_PROPERTIES';


!echo ------------------------;
!echo ------------------------ agent_todo_INTERVENTION_REVIEW;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_intervention_review
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_intervention_review(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`interventionRef`:STRING
,`interventionType`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`interventionRef`:STRING
,`interventionType`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_INTERVENTION_REVIEW;

CREATE TABLE agent_todo_intervention_review STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`interventionRef`, `toDoProperties`.`interventionRef`) as toDoProperties_interventionRef, 
COALESCE(`_removed`.`toDoProperties`.`interventionType`, `toDoProperties`.`interventionType`) as toDoProperties_interventionType, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_intervention_review
 src_agent_core_agenttodo_agent_todo_intervention_review 
 where `_removed`.`toDoProperties`.`type`='INTERVENTION_REVIEW' or `toDoProperties`.`type`='INTERVENTION_REVIEW';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_END_OF_RELATIONSHIP_CONTACT_CLAIMANT;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_end_of_relationship_contact_claimant
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_end_of_relationship_contact_claimant(
`toDoProperties` STRUCT<`claimant`:STRUCT<`createdDateTime`:STRUCT<`d_date`:STRING>
,`effectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`_version`:STRING
,`citizenId`:STRING
,`contactPreference`:STRING
,`contractId`:STRING
,`declarationId`:STRING
,`email`:STRING
,`firstName`:STRING
,`gender`:STRING
,`lastName`:STRING
,`middleName`:STRING
,`mobileNumber`:STRING
,`processId`:STRING
,`sanitisedFirstName`:STRING
,`sanitisedLastName`:STRING
,`sanitisedMiddleName`:STRING
,`verifiedUsingBioQuestionsOrThirdParty`:BOOLEAN
,`verifiedWithNameDateOfBirthOrAddressChange`:BOOLEAN
,`type`:STRING>
,`declaredDateTime`:STRUCT<`d_date`:STRING>
,`lastLoginDate`:STRUCT<`d_date`:STRING>
,`dateRelationshipEnded`:STRING
,`partnerName`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`claimant`:STRUCT<`createdDateTime`:STRUCT<`d_date`:STRING>
,`effectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`_version`:STRING
,`citizenId`:STRING
,`contactPreference`:STRING
,`contractId`:STRING
,`declarationId`:STRING
,`email`:STRING
,`firstName`:STRING
,`gender`:STRING
,`lastName`:STRING
,`middleName`:STRING
,`mobileNumber`:STRING
,`processId`:STRING
,`sanitisedFirstName`:STRING
,`sanitisedLastName`:STRING
,`sanitisedMiddleName`:STRING
,`verifiedUsingBioQuestionsOrThirdParty`:BOOLEAN
,`verifiedWithNameDateOfBirthOrAddressChange`:BOOLEAN
,`type`:STRING>
,`declaredDateTime`:STRUCT<`d_date`:STRING>
,`lastLoginDate`:STRUCT<`d_date`:STRING>
,`dateRelationshipEnded`:STRING
,`partnerName`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_END_OF_RELATIONSHIP_CONTACT_CLAIMANT;

CREATE TABLE agent_todo_archive_end_of_relationship_contact_claimant STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`claimant`.`_version`, `toDoProperties`.`claimant`.`_version`) as toDoProperties_claimant__version, 
COALESCE(`_removed`.`toDoProperties`.`claimant`.`citizenId`, `toDoProperties`.`claimant`.`citizenId`) as toDoProperties_claimant_citizenId, 
COALESCE(`_removed`.`toDoProperties`.`claimant`.`contactPreference`, `toDoProperties`.`claimant`.`contactPreference`) as toDoProperties_claimant_contactPreference, 
COALESCE(`_removed`.`toDoProperties`.`claimant`.`contractId`, `toDoProperties`.`claimant`.`contractId`) as toDoProperties_claimant_contractId, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`toDoProperties`.`claimant`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`toDoProperties`.`claimant`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`claimant`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`claimant`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`claimant`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`claimant`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`toDoProperties`.`claimant`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`toDoProperties`.`claimant`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`toDoProperties`.`claimant`.`createdDateTime`.`d_date`, LENGTH(`toDoProperties`.`claimant`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`toDoProperties`.`claimant`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`claimant`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`toDoProperties`.`claimant`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`claimant`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`toDoProperties`.`claimant`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`toDoProperties`.`claimant`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as toDoProperties_claimant_createdDateTime_d_date, 
COALESCE(`_removed`.`toDoProperties`.`claimant`.`declarationId`, `toDoProperties`.`claimant`.`declarationId`) as toDoProperties_claimant_declarationId, 
COALESCE(CAST(`_removed`.`toDoProperties`.`claimant`.`effectiveDate`.`hasDate` as STRING), CAST(`toDoProperties`.`claimant`.`effectiveDate`.`hasDate` as STRING)) as toDoProperties_claimant_effectiveDate_hasDate, 
COALESCE(`_removed`.`toDoProperties`.`claimant`.`effectiveDate`.`knownDate`, `toDoProperties`.`claimant`.`effectiveDate`.`knownDate`) as toDoProperties_claimant_effectiveDate_knownDate, 
COALESCE(`_removed`.`toDoProperties`.`claimant`.`effectiveDate`.`type`, `toDoProperties`.`claimant`.`effectiveDate`.`type`) as toDoProperties_claimant_effectiveDate_type, 
COALESCE(`_removed`.`toDoProperties`.`claimant`.`effectiveDate`.`date`, `toDoProperties`.`claimant`.`effectiveDate`.`date`) as toDoProperties_claimant_effectiveDate_date, 
COALESCE(`_removed`.`toDoProperties`.`claimant`.`email`, `toDoProperties`.`claimant`.`email`) as toDoProperties_claimant_email, 
COALESCE(`_removed`.`toDoProperties`.`claimant`.`firstName`, `toDoProperties`.`claimant`.`firstName`) as toDoProperties_claimant_firstName, 
COALESCE(`_removed`.`toDoProperties`.`claimant`.`gender`, `toDoProperties`.`claimant`.`gender`) as toDoProperties_claimant_gender, 
COALESCE(`_removed`.`toDoProperties`.`claimant`.`lastName`, `toDoProperties`.`claimant`.`lastName`) as toDoProperties_claimant_lastName, 
COALESCE(`_removed`.`toDoProperties`.`claimant`.`middleName`, `toDoProperties`.`claimant`.`middleName`) as toDoProperties_claimant_middleName, 
COALESCE(`_removed`.`toDoProperties`.`claimant`.`mobileNumber`, `toDoProperties`.`claimant`.`mobileNumber`) as toDoProperties_claimant_mobileNumber, 
COALESCE(CAST(`_removed`.`toDoProperties`.`claimant`.`paymentEffectiveDate`.`hasDate` as STRING), CAST(`toDoProperties`.`claimant`.`paymentEffectiveDate`.`hasDate` as STRING)) as toDoProperties_claimant_paymentEffectiveDate_hasDate, 
COALESCE(`_removed`.`toDoProperties`.`claimant`.`paymentEffectiveDate`.`knownDate`, `toDoProperties`.`claimant`.`paymentEffectiveDate`.`knownDate`) as toDoProperties_claimant_paymentEffectiveDate_knownDate, 
COALESCE(`_removed`.`toDoProperties`.`claimant`.`paymentEffectiveDate`.`type`, `toDoProperties`.`claimant`.`paymentEffectiveDate`.`type`) as toDoProperties_claimant_paymentEffectiveDate_type, 
COALESCE(`_removed`.`toDoProperties`.`claimant`.`paymentEffectiveDate`.`date`, `toDoProperties`.`claimant`.`paymentEffectiveDate`.`date`) as toDoProperties_claimant_paymentEffectiveDate_date, 
COALESCE(`_removed`.`toDoProperties`.`claimant`.`processId`, `toDoProperties`.`claimant`.`processId`) as toDoProperties_claimant_processId, 
COALESCE(`_removed`.`toDoProperties`.`claimant`.`sanitisedFirstName`, `toDoProperties`.`claimant`.`sanitisedFirstName`) as toDoProperties_claimant_sanitisedFirstName, 
COALESCE(`_removed`.`toDoProperties`.`claimant`.`sanitisedLastName`, `toDoProperties`.`claimant`.`sanitisedLastName`) as toDoProperties_claimant_sanitisedLastName, 
COALESCE(`_removed`.`toDoProperties`.`claimant`.`sanitisedMiddleName`, `toDoProperties`.`claimant`.`sanitisedMiddleName`) as toDoProperties_claimant_sanitisedMiddleName, 
COALESCE(CAST(`_removed`.`toDoProperties`.`claimant`.`verifiedUsingBioQuestionsOrThirdParty` as STRING), CAST(`toDoProperties`.`claimant`.`verifiedUsingBioQuestionsOrThirdParty` as STRING)) as toDoProperties_claimant_verifiedUsingBioQuestionsOrThirdParty, 
COALESCE(CAST(`_removed`.`toDoProperties`.`claimant`.`verifiedWithNameDateOfBirthOrAddressChange` as STRING), CAST(`toDoProperties`.`claimant`.`verifiedWithNameDateOfBirthOrAddressChange` as STRING)) as toDoProperties_claimant_verifiedWithNameDateOfBirthOrAddressChange, 
COALESCE(`_removed`.`toDoProperties`.`claimant`.`type`, `toDoProperties`.`claimant`.`type`) as toDoProperties_claimant_type, 
COALESCE(`_removed`.`toDoProperties`.`dateRelationshipEnded`, `toDoProperties`.`dateRelationshipEnded`) as toDoProperties_dateRelationshipEnded, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`toDoProperties`.`declaredDateTime`.`d_date`, LENGTH(`_removed`.`toDoProperties`.`declaredDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`declaredDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`declaredDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`declaredDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`declaredDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`toDoProperties`.`declaredDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`toDoProperties`.`declaredDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`toDoProperties`.`declaredDateTime`.`d_date`, LENGTH(`toDoProperties`.`declaredDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`toDoProperties`.`declaredDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`declaredDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`toDoProperties`.`declaredDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`declaredDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`toDoProperties`.`declaredDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`toDoProperties`.`declaredDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as toDoProperties_declaredDateTime_d_date, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`toDoProperties`.`lastLoginDate`.`d_date`, LENGTH(`_removed`.`toDoProperties`.`lastLoginDate`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`lastLoginDate`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`lastLoginDate`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`lastLoginDate`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`lastLoginDate`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`toDoProperties`.`lastLoginDate`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`toDoProperties`.`lastLoginDate`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`toDoProperties`.`lastLoginDate`.`d_date`, LENGTH(`toDoProperties`.`lastLoginDate`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`toDoProperties`.`lastLoginDate`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`lastLoginDate`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`toDoProperties`.`lastLoginDate`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`lastLoginDate`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`toDoProperties`.`lastLoginDate`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`toDoProperties`.`lastLoginDate`.`d_date`, 21, 3)) AS TIMESTAMP) END) as toDoProperties_lastLoginDate_d_date, 
COALESCE(`_removed`.`toDoProperties`.`partnerName`, `toDoProperties`.`partnerName`) as toDoProperties_partnerName, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_end_of_relationship_contact_claimant
 src_agent_core_agenttodoarchive_agent_todo_archive_end_of_relationship_contact_claimant 
 where `_removed`.`toDoProperties`.`type`='END_OF_RELATIONSHIP_CONTACT_CLAIMANT' or `toDoProperties`.`type`='END_OF_RELATIONSHIP_CONTACT_CLAIMANT';


!echo ------------------------;
!echo ------------------------ agent_todo_OFFER_WCA_REFERRAL_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_offer_wca_referral_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_offer_wca_referral_properties(
`toDoProperties` STRUCT<`offerWcaReferralResult`:STRUCT<`referForWca`:BOOLEAN>
,`healthDeclarationId`:STRING
,`workDeclarationId`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`offerWcaReferralResult`:STRUCT<`referForWca`:BOOLEAN>
,`healthDeclarationId`:STRING
,`workDeclarationId`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_OFFER_WCA_REFERRAL_PROPERTIES;

CREATE TABLE agent_todo_offer_wca_referral_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`healthDeclarationId`, `toDoProperties`.`healthDeclarationId`) as toDoProperties_healthDeclarationId, 
COALESCE(CAST(`_removed`.`toDoProperties`.`offerWcaReferralResult`.`referForWca` as STRING), CAST(`toDoProperties`.`offerWcaReferralResult`.`referForWca` as STRING)) as toDoProperties_offerWcaReferralResult_referForWca, 
COALESCE(`_removed`.`toDoProperties`.`workDeclarationId`, `toDoProperties`.`workDeclarationId`) as toDoProperties_workDeclarationId, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_offer_wca_referral_properties
 src_agent_core_agenttodo_agent_todo_offer_wca_referral_properties 
 where `_removed`.`toDoProperties`.`type`='OFFER_WCA_REFERRAL_PROPERTIES' or `toDoProperties`.`type`='OFFER_WCA_REFERRAL_PROPERTIES';


!echo ------------------------;
!echo ------------------------ todo_REPORT_SELF_EMPLOYED_EARNINGS_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_todo_todo_report_self_employed_earnings_properties
;

CREATE EXTERNAL TABLE src_core_todo_todo_report_self_employed_earnings_properties(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`properties` STRUCT<`assessmentPeriodId`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`properties`:STRUCT<`assessmentPeriodId`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/toDo';

DROP TABLE IF EXISTS todo_REPORT_SELF_EMPLOYED_EARNINGS_PROPERTIES;

CREATE TABLE todo_report_self_employed_earnings_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`properties`.`assessmentPeriodId`, `properties`.`assessmentPeriodId`) as properties_assessmentPeriodId, 
COALESCE(`_removed`.`properties`.`type`, `properties`.`type`) as properties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_core_todo_todo_report_self_employed_earnings_properties
 src_core_todo_todo_report_self_employed_earnings_properties 
 where `_removed`.`properties`.`type`='REPORT_SELF_EMPLOYED_EARNINGS_PROPERTIES' or `properties`.`type`='REPORT_SELF_EMPLOYED_EARNINGS_PROPERTIES';


!echo ------------------------;
!echo ------------------------ agent_todo_MAKE_A_DECISION_ALP_TO_DO_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_make_a_decision_alp_to_do_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_make_a_decision_alp_to_do_properties(
`toDoProperties` STRUCT<`attachmentSummary`:STRUCT<`updatedAt`:STRUCT<`d_date`:STRING>
,`fileName`:STRING
,`fileSize`:STRING
,`id`:STRING
,`revision`:STRING
,`updatedBy`:STRING>
,`alpFormType`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`attachmentSummary`:STRUCT<`updatedAt`:STRUCT<`d_date`:STRING>
,`fileName`:STRING
,`fileSize`:STRING
,`id`:STRING
,`revision`:STRING
,`updatedBy`:STRING>
,`alpFormType`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_MAKE_A_DECISION_ALP_TO_DO_PROPERTIES;

CREATE TABLE agent_todo_make_a_decision_alp_to_do_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`alpFormType`, `toDoProperties`.`alpFormType`) as toDoProperties_alpFormType, 
COALESCE(`_removed`.`toDoProperties`.`attachmentSummary`.`fileName`, `toDoProperties`.`attachmentSummary`.`fileName`) as toDoProperties_attachmentSummary_fileName, 
COALESCE(`_removed`.`toDoProperties`.`attachmentSummary`.`fileSize`, `toDoProperties`.`attachmentSummary`.`fileSize`) as toDoProperties_attachmentSummary_fileSize, 
COALESCE(`_removed`.`toDoProperties`.`attachmentSummary`.`id`, `toDoProperties`.`attachmentSummary`.`id`) as toDoProperties_attachmentSummary_id, 
COALESCE(`_removed`.`toDoProperties`.`attachmentSummary`.`revision`, `toDoProperties`.`attachmentSummary`.`revision`) as toDoProperties_attachmentSummary_revision, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, LENGTH(`_removed`.`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, LENGTH(`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 21, 3)) AS TIMESTAMP) END) as toDoProperties_attachmentSummary_updatedAt_d_date, 
COALESCE(`_removed`.`toDoProperties`.`attachmentSummary`.`updatedBy`, `toDoProperties`.`attachmentSummary`.`updatedBy`) as toDoProperties_attachmentSummary_updatedBy, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_make_a_decision_alp_to_do_properties
 src_agent_core_agenttodo_agent_todo_make_a_decision_alp_to_do_properties 
 where `_removed`.`toDoProperties`.`type`='MAKE_A_DECISION_ALP_TO_DO_PROPERTIES' or `toDoProperties`.`type`='MAKE_A_DECISION_ALP_TO_DO_PROPERTIES';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_CHECK_MEDICAL_EVIDENCE_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_check_medical_evidence_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_check_medical_evidence_properties(
`toDoProperties` STRUCT<`result`:STRUCT<`agentPrognosis`:STRING
,`fitNoteEvidenceAccepted`:BOOLEAN>
,`fitNoteId`:STRING
,`periodOfSicknessId`:STRING
,`declarationId`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`result`:STRUCT<`agentPrognosis`:STRING
,`fitNoteEvidenceAccepted`:BOOLEAN>
,`fitNoteId`:STRING
,`periodOfSicknessId`:STRING
,`declarationId`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_CHECK_MEDICAL_EVIDENCE_PROPERTIES;

CREATE TABLE agent_todo_archive_check_medical_evidence_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`fitNoteId`, `toDoProperties`.`fitNoteId`) as toDoProperties_fitNoteId, 
COALESCE(`_removed`.`toDoProperties`.`periodOfSicknessId`, `toDoProperties`.`periodOfSicknessId`) as toDoProperties_periodOfSicknessId, 
COALESCE(`_removed`.`toDoProperties`.`result`.`agentPrognosis`, `toDoProperties`.`result`.`agentPrognosis`) as toDoProperties_result_agentPrognosis, 
COALESCE(CAST(`_removed`.`toDoProperties`.`result`.`fitNoteEvidenceAccepted` as STRING), CAST(`toDoProperties`.`result`.`fitNoteEvidenceAccepted` as STRING)) as toDoProperties_result_fitNoteEvidenceAccepted, 
COALESCE(`_removed`.`toDoProperties`.`declarationId`, `toDoProperties`.`declarationId`) as toDoProperties_declarationId, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_check_medical_evidence_properties
 src_agent_core_agenttodoarchive_agent_todo_archive_check_medical_evidence_properties 
 where `_removed`.`toDoProperties`.`type`='CHECK_MEDICAL_EVIDENCE_PROPERTIES' or `toDoProperties`.`type`='CHECK_MEDICAL_EVIDENCE_PROPERTIES';


!echo ------------------------;
!echo ------------------------ journal_FlexMoreFrequentPaymentsCancelledJournalEntry;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_journal_journal_flexmorefrequentpaymentscancelledjournalentry
;

CREATE EXTERNAL TABLE src_core_journal_journal_flexmorefrequentpaymentscancelledjournalentry(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`journalEntryProperties` STRUCT<`type`:STRING>
,`_id` STRUCT<`journalId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`journalEntryProperties`:STRUCT<`type`:STRING>
,`_id`:STRUCT<`journalId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/journal';

DROP TABLE IF EXISTS journal_FlexMoreFrequentPaymentsCancelledJournalEntry;

CREATE TABLE journal_flexmorefrequentpaymentscancelledjournalentry STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`journalEntryProperties`.`type`, `journalEntryProperties`.`type`) as journalEntryProperties_type, 
COALESCE(`_removed`.`_id`.`journalId`, `_id`.`journalId`) as id FROM src_core_journal_journal_flexmorefrequentpaymentscancelledjournalentry
 src_core_journal_journal_flexmorefrequentpaymentscancelledjournalentry 
 where `_removed`.`journalEntryProperties`.`type`='FlexMoreFrequentPaymentsCancelledJournalEntry' or `journalEntryProperties`.`type`='FlexMoreFrequentPaymentsCancelledJournalEntry';


!echo ------------------------;
!echo ------------------------ agent_todo_RETROSPECTIVE_CALC_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_retrospective_calc_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_retrospective_calc_properties(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`assessmentPeriodId`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`assessmentPeriodId`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_RETROSPECTIVE_CALC_PROPERTIES;

CREATE TABLE agent_todo_retrospective_calc_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`assessmentPeriodId`, `toDoProperties`.`assessmentPeriodId`) as toDoProperties_assessmentPeriodId, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_retrospective_calc_properties
 src_agent_core_agenttodo_agent_todo_retrospective_calc_properties 
 where `_removed`.`toDoProperties`.`type`='RETROSPECTIVE_CALC_PROPERTIES' or `toDoProperties`.`type`='RETROSPECTIVE_CALC_PROPERTIES';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_ACCOUNT_LOCKED_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_account_locked_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_account_locked_properties(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_ACCOUNT_LOCKED_PROPERTIES;

CREATE TABLE agent_todo_archive_account_locked_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_account_locked_properties
 src_agent_core_agenttodoarchive_agent_todo_archive_account_locked_properties 
 where `_removed`.`toDoProperties`.`type`='ACCOUNT_LOCKED_PROPERTIES' or `toDoProperties`.`type`='ACCOUNT_LOCKED_PROPERTIES';


!echo ------------------------;
!echo ------------------------ journal_ChildcareSummaryJournalEntry;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_journal_journal_childcaresummaryjournalentry
;

CREATE EXTERNAL TABLE src_core_journal_journal_childcaresummaryjournalentry(
`journalEntryProperties` STRUCT<`childcareSummary`:STRUCT<`childcareProviderSummaries`:ARRAY<STRUCT<`childcareProviderCostsSummaries`:ARRAY<STRUCT<`childcareProviderChildren`:ARRAY<STRUCT<`age`:STRING
,`firstName`:STRING
,`underOne`:BOOLEAN
>>
,`amountPaid`:STRING
,`costId`:STRING
,`datePaid`:STRING
,`periodEnd`:STRING
,`periodStart`:STRING
,`datePaidAsString`:STRING
,`periodEndAsString`:STRING
,`periodStartAsString`:STRING
>>
,`postcode`:STRING
,`providerName`:STRING
,`registrationNumber`:STRING
>>
,`dateOfChange`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`contractId`:STRING
,`hasChildcareCosts`:BOOLEAN
,`processId`:STRING
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`journalId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`journalEntryProperties`:STRUCT<`childcareSummary`:STRUCT<`childcareProviderSummaries`:ARRAY<STRUCT<`childcareProviderCostsSummaries`:ARRAY<STRUCT<`childcareProviderChildren`:ARRAY<STRUCT<`age`:STRING
,`firstName`:STRING
,`underOne`:BOOLEAN
>>
,`amountPaid`:STRING
,`costId`:STRING
,`datePaid`:STRING
,`periodEnd`:STRING
,`periodStart`:STRING
,`datePaidAsString`:STRING
,`periodEndAsString`:STRING
,`periodStartAsString`:STRING
>>
,`postcode`:STRING
,`providerName`:STRING
,`registrationNumber`:STRING
>>
,`dateOfChange`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`contractId`:STRING
,`hasChildcareCosts`:BOOLEAN
,`processId`:STRING
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`journalId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/journal';

DROP TABLE IF EXISTS journal_ChildcareSummaryJournalEntry;

CREATE TABLE journal_childcaresummaryjournalentry STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`removed_exploded_journalentryproperties_childcaresummary_childcareprovidersummaries_exploded_childcareprovidercostssummaries`.`amountPaid`, `exploded_journalentryproperties_childcaresummary_childcareprovidersummaries_exploded_childcareprovidercostssummaries`.`amountPaid`) as journalEntryProperties_childcareSummary_childcareProviderSummaries_childcareProviderCostsSummaries_amountPaid, 
COALESCE(`removed_exploded_journalentryproperties_childcaresummary_childcareprovidersummaries_exploded_childcareprovidercostssummaries_exploded_childcareproviderchildren`.`age`, `exploded_journalentryproperties_childcaresummary_childcareprovidersummaries_exploded_childcareprovidercostssummaries_exploded_childcareproviderchildren`.`age`) as journalEntryProperties_childcareSummary_childcareProviderSummaries_childcareProviderCostsSummaries_childcareProviderChildren_age, 
COALESCE(`removed_exploded_journalentryproperties_childcaresummary_childcareprovidersummaries_exploded_childcareprovidercostssummaries_exploded_childcareproviderchildren`.`firstName`, `exploded_journalentryproperties_childcaresummary_childcareprovidersummaries_exploded_childcareprovidercostssummaries_exploded_childcareproviderchildren`.`firstName`) as journalEntryProperties_childcareSummary_childcareProviderSummaries_childcareProviderCostsSummaries_childcareProviderChildren_firstName, 
COALESCE(CAST(`removed_exploded_journalentryproperties_childcaresummary_childcareprovidersummaries_exploded_childcareprovidercostssummaries_exploded_childcareproviderchildren`.`underOne` as STRING), CAST(`exploded_journalentryproperties_childcaresummary_childcareprovidersummaries_exploded_childcareprovidercostssummaries_exploded_childcareproviderchildren`.`underOne` as STRING)) as journalEntryProperties_childcareSummary_childcareProviderSummaries_childcareProviderCostsSummaries_childcareProviderChildren_underOne, 
COALESCE(`removed_exploded_journalentryproperties_childcaresummary_childcareprovidersummaries_exploded_childcareprovidercostssummaries`.`costId`, `exploded_journalentryproperties_childcaresummary_childcareprovidersummaries_exploded_childcareprovidercostssummaries`.`costId`) as journalEntryProperties_childcareSummary_childcareProviderSummaries_childcareProviderCostsSummaries_costId, 
COALESCE(`removed_exploded_journalentryproperties_childcaresummary_childcareprovidersummaries_exploded_childcareprovidercostssummaries`.`datePaid`, `exploded_journalentryproperties_childcaresummary_childcareprovidersummaries_exploded_childcareprovidercostssummaries`.`datePaid`) as journalEntryProperties_childcareSummary_childcareProviderSummaries_childcareProviderCostsSummaries_datePaid, 
COALESCE(`removed_exploded_journalentryproperties_childcaresummary_childcareprovidersummaries_exploded_childcareprovidercostssummaries`.`periodEnd`, `exploded_journalentryproperties_childcaresummary_childcareprovidersummaries_exploded_childcareprovidercostssummaries`.`periodEnd`) as journalEntryProperties_childcareSummary_childcareProviderSummaries_childcareProviderCostsSummaries_periodEnd, 
COALESCE(`removed_exploded_journalentryproperties_childcaresummary_childcareprovidersummaries_exploded_childcareprovidercostssummaries`.`periodStart`, `exploded_journalentryproperties_childcaresummary_childcareprovidersummaries_exploded_childcareprovidercostssummaries`.`periodStart`) as journalEntryProperties_childcareSummary_childcareProviderSummaries_childcareProviderCostsSummaries_periodStart, 
COALESCE(`removed_exploded_journalentryproperties_childcaresummary_childcareprovidersummaries_exploded_childcareprovidercostssummaries`.`datePaidAsString`, `exploded_journalentryproperties_childcaresummary_childcareprovidersummaries_exploded_childcareprovidercostssummaries`.`datePaidAsString`) as journalEntryProperties_childcareSummary_childcareProviderSummaries_childcareProviderCostsSummaries_datePaidAsString, 
COALESCE(`removed_exploded_journalentryproperties_childcaresummary_childcareprovidersummaries_exploded_childcareprovidercostssummaries`.`periodEndAsString`, `exploded_journalentryproperties_childcaresummary_childcareprovidersummaries_exploded_childcareprovidercostssummaries`.`periodEndAsString`) as journalEntryProperties_childcareSummary_childcareProviderSummaries_childcareProviderCostsSummaries_periodEndAsString, 
COALESCE(`removed_exploded_journalentryproperties_childcaresummary_childcareprovidersummaries_exploded_childcareprovidercostssummaries`.`periodStartAsString`, `exploded_journalentryproperties_childcaresummary_childcareprovidersummaries_exploded_childcareprovidercostssummaries`.`periodStartAsString`) as journalEntryProperties_childcareSummary_childcareProviderSummaries_childcareProviderCostsSummaries_periodStartAsString, 
COALESCE(`removed_exploded_journalentryproperties_childcaresummary_childcareprovidersummaries`.`postcode`, `exploded_journalentryproperties_childcaresummary_childcareprovidersummaries`.`postcode`) as journalEntryProperties_childcareSummary_childcareProviderSummaries_postcode, 
COALESCE(`removed_exploded_journalentryproperties_childcaresummary_childcareprovidersummaries`.`providerName`, `exploded_journalentryproperties_childcaresummary_childcareprovidersummaries`.`providerName`) as journalEntryProperties_childcareSummary_childcareProviderSummaries_providerName, 
COALESCE(`removed_exploded_journalentryproperties_childcaresummary_childcareprovidersummaries`.`registrationNumber`, `exploded_journalentryproperties_childcaresummary_childcareprovidersummaries`.`registrationNumber`) as journalEntryProperties_childcareSummary_childcareProviderSummaries_registrationNumber, 
COALESCE(`_removed`.`journalEntryProperties`.`childcareSummary`.`contractId`, `journalEntryProperties`.`childcareSummary`.`contractId`) as journalEntryProperties_childcareSummary_contractId, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`childcareSummary`.`dateOfChange`.`hasDate` as STRING), CAST(`journalEntryProperties`.`childcareSummary`.`dateOfChange`.`hasDate` as STRING)) as journalEntryProperties_childcareSummary_dateOfChange_hasDate, 
COALESCE(`_removed`.`journalEntryProperties`.`childcareSummary`.`dateOfChange`.`knownDate`, `journalEntryProperties`.`childcareSummary`.`dateOfChange`.`knownDate`) as journalEntryProperties_childcareSummary_dateOfChange_knownDate, 
COALESCE(`_removed`.`journalEntryProperties`.`childcareSummary`.`dateOfChange`.`type`, `journalEntryProperties`.`childcareSummary`.`dateOfChange`.`type`) as journalEntryProperties_childcareSummary_dateOfChange_type, 
COALESCE(`_removed`.`journalEntryProperties`.`childcareSummary`.`dateOfChange`.`date`, `journalEntryProperties`.`childcareSummary`.`dateOfChange`.`date`) as journalEntryProperties_childcareSummary_dateOfChange_date, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`childcareSummary`.`hasChildcareCosts` as STRING), CAST(`journalEntryProperties`.`childcareSummary`.`hasChildcareCosts` as STRING)) as journalEntryProperties_childcareSummary_hasChildcareCosts, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`childcareSummary`.`paymentEffectiveDate`.`hasDate` as STRING), CAST(`journalEntryProperties`.`childcareSummary`.`paymentEffectiveDate`.`hasDate` as STRING)) as journalEntryProperties_childcareSummary_paymentEffectiveDate_hasDate, 
COALESCE(`_removed`.`journalEntryProperties`.`childcareSummary`.`paymentEffectiveDate`.`knownDate`, `journalEntryProperties`.`childcareSummary`.`paymentEffectiveDate`.`knownDate`) as journalEntryProperties_childcareSummary_paymentEffectiveDate_knownDate, 
COALESCE(`_removed`.`journalEntryProperties`.`childcareSummary`.`paymentEffectiveDate`.`type`, `journalEntryProperties`.`childcareSummary`.`paymentEffectiveDate`.`type`) as journalEntryProperties_childcareSummary_paymentEffectiveDate_type, 
COALESCE(`_removed`.`journalEntryProperties`.`childcareSummary`.`paymentEffectiveDate`.`date`, `journalEntryProperties`.`childcareSummary`.`paymentEffectiveDate`.`date`) as journalEntryProperties_childcareSummary_paymentEffectiveDate_date, 
COALESCE(`_removed`.`journalEntryProperties`.`childcareSummary`.`processId`, `journalEntryProperties`.`childcareSummary`.`processId`) as journalEntryProperties_childcareSummary_processId, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`childcareSummary`.`confirmationRequired` as STRING), CAST(`journalEntryProperties`.`childcareSummary`.`confirmationRequired` as STRING)) as journalEntryProperties_childcareSummary_confirmationRequired, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`childcareSummary`.`hideDetailsForPartnerDeclaration` as STRING), CAST(`journalEntryProperties`.`childcareSummary`.`hideDetailsForPartnerDeclaration` as STRING)) as journalEntryProperties_childcareSummary_hideDetailsForPartnerDeclaration, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`childcareSummary`.`perClaimant` as STRING), CAST(`journalEntryProperties`.`childcareSummary`.`perClaimant` as STRING)) as journalEntryProperties_childcareSummary_perClaimant, 
COALESCE(`_removed`.`journalEntryProperties`.`childcareSummary`.`type`, `journalEntryProperties`.`childcareSummary`.`type`) as journalEntryProperties_childcareSummary_type, 
COALESCE(`_removed`.`journalEntryProperties`.`type`, `journalEntryProperties`.`type`) as journalEntryProperties_type, 
COALESCE(`_removed`.`_id`.`journalId`, `_id`.`journalId`) as id FROM src_core_journal_journal_childcaresummaryjournalentry
 LATERAL VIEW OUTER EXPLODE(`journalEntryProperties`.`childcareSummary`.`childcareProviderSummaries`) view_exploded_journalentryproperties_childcaresummary_childcareprovidersummaries AS exploded_journalentryproperties_childcaresummary_childcareprovidersummaries 
 LATERAL VIEW OUTER EXPLODE(`exploded_journalentryproperties_childcaresummary_childcareprovidersummaries`.`childcareProviderCostsSummaries`) view_exploded_journalentryproperties_childcaresummary_childcareprovidersummaries_exploded_childcareprovidercostssummaries AS exploded_journalentryproperties_childcaresummary_childcareprovidersummaries_exploded_childcareprovidercostssummaries 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`journalEntryProperties`.`childcareSummary`.`childcareProviderSummaries`) view_removed_exploded_journalentryproperties_childcaresummary_childcareprovidersummaries AS removed_exploded_journalentryproperties_childcaresummary_childcareprovidersummaries 
 LATERAL VIEW OUTER EXPLODE(`removed_exploded_journalentryproperties_childcaresummary_childcareprovidersummaries`.`childcareProviderCostsSummaries`) view_removed_exploded_journalentryproperties_childcaresummary_childcareprovidersummaries_exploded_childcareprovidercostssummaries AS removed_exploded_journalentryproperties_childcaresummary_childcareprovidersummaries_exploded_childcareprovidercostssummaries 
 LATERAL VIEW OUTER EXPLODE(`exploded_journalentryproperties_childcaresummary_childcareprovidersummaries_exploded_childcareprovidercostssummaries`.`childcareProviderChildren`) view_exploded_journalentryproperties_childcaresummary_childcareprovidersummaries_exploded_childcareprovidercostssummaries_exploded_childcareproviderchildren AS exploded_journalentryproperties_childcaresummary_childcareprovidersummaries_exploded_childcareprovidercostssummaries_exploded_childcareproviderchildren 
 LATERAL VIEW OUTER EXPLODE(`removed_exploded_journalentryproperties_childcaresummary_childcareprovidersummaries_exploded_childcareprovidercostssummaries`.`childcareProviderChildren`) view_removed_exploded_journalentryproperties_childcaresummary_childcareprovidersummaries_exploded_childcareprovidercostssummaries_exploded_childcareproviderchildren AS removed_exploded_journalentryproperties_childcaresummary_childcareprovidersummaries_exploded_childcareprovidercostssummaries_exploded_childcareproviderchildren 
 
 where `_removed`.`journalEntryProperties`.`type`='ChildcareSummaryJournalEntry' or `journalEntryProperties`.`type`='ChildcareSummaryJournalEntry';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_CALCULATE_DEDUCTIONS_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_calculate_deductions_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_calculate_deductions_properties(
`toDoProperties` STRUCT<`manualCalculationReason`:STRUCT<`additionalInformation`:STRING
,`type`:STRING
,`_type`:STRING>
,`assessmentPeriodId`:STRING
,`hasDmsDebt`:BOOLEAN
,`hasNonDmsDebt`:BOOLEAN
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`manualCalculationReason`:STRUCT<`additionalInformation`:STRING
,`type`:STRING
,`_type`:STRING>
,`assessmentPeriodId`:STRING
,`hasDmsDebt`:BOOLEAN
,`hasNonDmsDebt`:BOOLEAN
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_CALCULATE_DEDUCTIONS_PROPERTIES;

CREATE TABLE agent_todo_archive_calculate_deductions_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`assessmentPeriodId`, `toDoProperties`.`assessmentPeriodId`) as toDoProperties_assessmentPeriodId, 
COALESCE(CAST(`_removed`.`toDoProperties`.`hasDmsDebt` as STRING), CAST(`toDoProperties`.`hasDmsDebt` as STRING)) as toDoProperties_hasDmsDebt, 
COALESCE(CAST(`_removed`.`toDoProperties`.`hasNonDmsDebt` as STRING), CAST(`toDoProperties`.`hasNonDmsDebt` as STRING)) as toDoProperties_hasNonDmsDebt, 
COALESCE(`_removed`.`toDoProperties`.`manualCalculationReason`.`additionalInformation`, `toDoProperties`.`manualCalculationReason`.`additionalInformation`) as toDoProperties_manualCalculationReason_additionalInformation, 
COALESCE(`_removed`.`toDoProperties`.`manualCalculationReason`.`type`, `toDoProperties`.`manualCalculationReason`.`type`) as toDoProperties_manualCalculationReason_type, 
COALESCE(`_removed`.`toDoProperties`.`manualCalculationReason`.`_type`, `toDoProperties`.`manualCalculationReason`.`_type`) as toDoProperties_manualCalculationReason__type, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_calculate_deductions_properties
 src_agent_core_agenttodoarchive_agent_todo_archive_calculate_deductions_properties 
 where `_removed`.`toDoProperties`.`type`='CALCULATE_DEDUCTIONS_PROPERTIES' or `toDoProperties`.`type`='CALCULATE_DEDUCTIONS_PROPERTIES';


!echo ------------------------;
!echo ------------------------ todo_BANK_DETAILS_CHANGE;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_todo_todo_bank_details_change
;

CREATE EXTERNAL TABLE src_core_todo_todo_bank_details_change(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`properties` STRUCT<`initiatorCitizenId`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`properties`:STRUCT<`initiatorCitizenId`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/toDo';

DROP TABLE IF EXISTS todo_BANK_DETAILS_CHANGE;

CREATE TABLE todo_bank_details_change STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`properties`.`initiatorCitizenId`, `properties`.`initiatorCitizenId`) as properties_initiatorCitizenId, 
COALESCE(`_removed`.`properties`.`type`, `properties`.`type`) as properties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_core_todo_todo_bank_details_change
 src_core_todo_todo_bank_details_change 
 where `_removed`.`properties`.`type`='BANK_DETAILS_CHANGE' or `properties`.`type`='BANK_DETAILS_CHANGE';


!echo ------------------------;
!echo ------------------------ journal_advanceApprovedJournalEntry;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_journal_journal_advanceapprovedjournalentry
;

CREATE EXTERNAL TABLE src_core_journal_journal_advanceapprovedjournalentry(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`journalEntryProperties` STRUCT<`advanceAmount`:STRING
,`advanceApprovalDate`:STRING
,`advanceType`:STRING
,`type`:STRING>
,`_id` STRUCT<`journalId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`journalEntryProperties`:STRUCT<`advanceAmount`:STRING
,`advanceApprovalDate`:STRING
,`advanceType`:STRING
,`type`:STRING>
,`_id`:STRUCT<`journalId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/journal';

DROP TABLE IF EXISTS journal_advanceApprovedJournalEntry;

CREATE TABLE journal_advanceapprovedjournalentry STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`journalEntryProperties`.`advanceAmount`, `journalEntryProperties`.`advanceAmount`) as journalEntryProperties_advanceAmount, 
COALESCE(`_removed`.`journalEntryProperties`.`advanceApprovalDate`, `journalEntryProperties`.`advanceApprovalDate`) as journalEntryProperties_advanceApprovalDate, 
COALESCE(`_removed`.`journalEntryProperties`.`advanceType`, `journalEntryProperties`.`advanceType`) as journalEntryProperties_advanceType, 
COALESCE(`_removed`.`journalEntryProperties`.`type`, `journalEntryProperties`.`type`) as journalEntryProperties_type, 
COALESCE(`_removed`.`_id`.`journalId`, `_id`.`journalId`) as id FROM src_core_journal_journal_advanceapprovedjournalentry
 src_core_journal_journal_advanceapprovedjournalentry 
 where `_removed`.`journalEntryProperties`.`type`='advanceApprovedJournalEntry' or `journalEntryProperties`.`type`='advanceApprovedJournalEntry';


!echo ------------------------;
!echo ------------------------ agent_todo_CONFIRM_BENEFIT_DETAILS;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_confirm_benefit_details
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_confirm_benefit_details(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`adjustedAmount`:STRING
,`awardType`:STRING
,`benefitNotificationType`:STRING
,`claimantNino`:STRING
,`clericalInterest`:BOOLEAN
,`endDate`:STRING
,`frequency`:STRING
,`frequencyInvalid`:BOOLEAN
,`officeDescription`:STRING
,`officeTypeDescription`:STRING
,`startDate`:STRING
,`officeContactNumber`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`adjustedAmount`:STRING
,`awardType`:STRING
,`benefitNotificationType`:STRING
,`claimantNino`:STRING
,`clericalInterest`:BOOLEAN
,`endDate`:STRING
,`frequency`:STRING
,`frequencyInvalid`:BOOLEAN
,`officeDescription`:STRING
,`officeTypeDescription`:STRING
,`startDate`:STRING
,`officeContactNumber`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_CONFIRM_BENEFIT_DETAILS;

CREATE TABLE agent_todo_confirm_benefit_details STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`adjustedAmount`, `toDoProperties`.`adjustedAmount`) as toDoProperties_adjustedAmount, 
COALESCE(`_removed`.`toDoProperties`.`awardType`, `toDoProperties`.`awardType`) as toDoProperties_awardType, 
COALESCE(`_removed`.`toDoProperties`.`benefitNotificationType`, `toDoProperties`.`benefitNotificationType`) as toDoProperties_benefitNotificationType, 
COALESCE(`_removed`.`toDoProperties`.`claimantNino`, `toDoProperties`.`claimantNino`) as toDoProperties_claimantNino, 
COALESCE(CAST(`_removed`.`toDoProperties`.`clericalInterest` as STRING), CAST(`toDoProperties`.`clericalInterest` as STRING)) as toDoProperties_clericalInterest, 
COALESCE(`_removed`.`toDoProperties`.`endDate`, `toDoProperties`.`endDate`) as toDoProperties_endDate, 
COALESCE(`_removed`.`toDoProperties`.`frequency`, `toDoProperties`.`frequency`) as toDoProperties_frequency, 
COALESCE(CAST(`_removed`.`toDoProperties`.`frequencyInvalid` as STRING), CAST(`toDoProperties`.`frequencyInvalid` as STRING)) as toDoProperties_frequencyInvalid, 
COALESCE(`_removed`.`toDoProperties`.`officeDescription`, `toDoProperties`.`officeDescription`) as toDoProperties_officeDescription, 
COALESCE(`_removed`.`toDoProperties`.`officeTypeDescription`, `toDoProperties`.`officeTypeDescription`) as toDoProperties_officeTypeDescription, 
COALESCE(`_removed`.`toDoProperties`.`startDate`, `toDoProperties`.`startDate`) as toDoProperties_startDate, 
COALESCE(`_removed`.`toDoProperties`.`officeContactNumber`, `toDoProperties`.`officeContactNumber`) as toDoProperties_officeContactNumber, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_confirm_benefit_details
 src_agent_core_agenttodo_agent_todo_confirm_benefit_details 
 where `_removed`.`toDoProperties`.`type`='CONFIRM_BENEFIT_DETAILS' or `toDoProperties`.`type`='CONFIRM_BENEFIT_DETAILS';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_ABSENT_CHILD;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_absent_child
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_absent_child(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`abroadForMoreThanOneMonth`:BOOLEAN
,`childId`:STRING
,`dateOfBirth`:STRING
,`fullName`:STRING
,`gender`:STRING
,`inPrison`:BOOLEAN
,`inTheCareOfLocalAuthority`:BOOLEAN
,`dateOfBirthAsString`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`abroadForMoreThanOneMonth`:BOOLEAN
,`childId`:STRING
,`dateOfBirth`:STRING
,`fullName`:STRING
,`gender`:STRING
,`inPrison`:BOOLEAN
,`inTheCareOfLocalAuthority`:BOOLEAN
,`dateOfBirthAsString`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_ABSENT_CHILD;

CREATE TABLE agent_todo_archive_absent_child STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(CAST(`_removed`.`toDoProperties`.`abroadForMoreThanOneMonth` as STRING), CAST(`toDoProperties`.`abroadForMoreThanOneMonth` as STRING)) as toDoProperties_abroadForMoreThanOneMonth, 
COALESCE(`_removed`.`toDoProperties`.`childId`, `toDoProperties`.`childId`) as toDoProperties_childId, 
COALESCE(`_removed`.`toDoProperties`.`dateOfBirth`, `toDoProperties`.`dateOfBirth`) as toDoProperties_dateOfBirth, 
COALESCE(`_removed`.`toDoProperties`.`fullName`, `toDoProperties`.`fullName`) as toDoProperties_fullName, 
COALESCE(`_removed`.`toDoProperties`.`gender`, `toDoProperties`.`gender`) as toDoProperties_gender, 
COALESCE(CAST(`_removed`.`toDoProperties`.`inPrison` as STRING), CAST(`toDoProperties`.`inPrison` as STRING)) as toDoProperties_inPrison, 
COALESCE(CAST(`_removed`.`toDoProperties`.`inTheCareOfLocalAuthority` as STRING), CAST(`toDoProperties`.`inTheCareOfLocalAuthority` as STRING)) as toDoProperties_inTheCareOfLocalAuthority, 
COALESCE(`_removed`.`toDoProperties`.`dateOfBirthAsString`, `toDoProperties`.`dateOfBirthAsString`) as toDoProperties_dateOfBirthAsString, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_absent_child
 src_agent_core_agenttodoarchive_agent_todo_archive_absent_child 
 where `_removed`.`toDoProperties`.`type`='ABSENT_CHILD' or `toDoProperties`.`type`='ABSENT_CHILD';


!echo ------------------------;
!echo ------------------------ agent_todo_NON_DEPENDENT_HOUSING_COST_CONTRIBUTION;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_non_dependent_housing_cost_contribution
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_non_dependent_housing_cost_contribution(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`childId`:STRING
,`dateOfBirth`:STRING
,`dla`:BOOLEAN
,`gender`:STRING
,`name`:STRING
,`pip`:BOOLEAN
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`childId`:STRING
,`dateOfBirth`:STRING
,`dla`:BOOLEAN
,`gender`:STRING
,`name`:STRING
,`pip`:BOOLEAN
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_NON_DEPENDENT_HOUSING_COST_CONTRIBUTION;

CREATE TABLE agent_todo_non_dependent_housing_cost_contribution STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`childId`, `toDoProperties`.`childId`) as toDoProperties_childId, 
COALESCE(`_removed`.`toDoProperties`.`dateOfBirth`, `toDoProperties`.`dateOfBirth`) as toDoProperties_dateOfBirth, 
COALESCE(CAST(`_removed`.`toDoProperties`.`dla` as STRING), CAST(`toDoProperties`.`dla` as STRING)) as toDoProperties_dla, 
COALESCE(`_removed`.`toDoProperties`.`gender`, `toDoProperties`.`gender`) as toDoProperties_gender, 
COALESCE(`_removed`.`toDoProperties`.`name`, `toDoProperties`.`name`) as toDoProperties_name, 
COALESCE(CAST(`_removed`.`toDoProperties`.`pip` as STRING), CAST(`toDoProperties`.`pip` as STRING)) as toDoProperties_pip, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_non_dependent_housing_cost_contribution
 src_agent_core_agenttodo_agent_todo_non_dependent_housing_cost_contribution 
 where `_removed`.`toDoProperties`.`type`='NON_DEPENDENT_HOUSING_COST_CONTRIBUTION' or `toDoProperties`.`type`='NON_DEPENDENT_HOUSING_COST_CONTRIBUTION';


!echo ------------------------;
!echo ------------------------ agent_todo_REFER_OVERPAYMENT;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_refer_overpayment
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_refer_overpayment(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`affectedPeriodEndDate`:STRING
,`affectedPeriodStartDate`:STRING
,`overpaymentAmount`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`affectedPeriodEndDate`:STRING
,`affectedPeriodStartDate`:STRING
,`overpaymentAmount`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_REFER_OVERPAYMENT;

CREATE TABLE agent_todo_refer_overpayment STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`affectedPeriodEndDate`, `toDoProperties`.`affectedPeriodEndDate`) as toDoProperties_affectedPeriodEndDate, 
COALESCE(`_removed`.`toDoProperties`.`affectedPeriodStartDate`, `toDoProperties`.`affectedPeriodStartDate`) as toDoProperties_affectedPeriodStartDate, 
COALESCE(`_removed`.`toDoProperties`.`overpaymentAmount`, `toDoProperties`.`overpaymentAmount`) as toDoProperties_overpaymentAmount, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_refer_overpayment
 src_agent_core_agenttodo_agent_todo_refer_overpayment 
 where `_removed`.`toDoProperties`.`type`='REFER_OVERPAYMENT' or `toDoProperties`.`type`='REFER_OVERPAYMENT';


!echo ------------------------;
!echo ------------------------ agent_todo_UPDATE_CIS_FROM_TRACE_CIS_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_update_cis_from_trace_cis_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_update_cis_from_trace_cis_properties(
`toDoProperties` STRUCT<`cis500Document`:STRUCT<`updatedAt`:STRUCT<`d_date`:STRING>
,`fileName`:STRING
,`fileSize`:STRING
,`id`:STRING
,`revision`:STRING
,`updatedBy`:STRING>
,`cisMismatchDetails`:STRUCT<`amendAddressLine`:BOOLEAN
,`amendFirstName`:BOOLEAN
,`amendMiddleName`:BOOLEAN
,`amendPostcode`:BOOLEAN>
,`triggerReason`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`cis500Document`:STRUCT<`updatedAt`:STRUCT<`d_date`:STRING>
,`fileName`:STRING
,`fileSize`:STRING
,`id`:STRING
,`revision`:STRING
,`updatedBy`:STRING>
,`cisMismatchDetails`:STRUCT<`amendAddressLine`:BOOLEAN
,`amendFirstName`:BOOLEAN
,`amendMiddleName`:BOOLEAN
,`amendPostcode`:BOOLEAN>
,`triggerReason`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_UPDATE_CIS_FROM_TRACE_CIS_PROPERTIES;

CREATE TABLE agent_todo_update_cis_from_trace_cis_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`cis500Document`.`fileName`, `toDoProperties`.`cis500Document`.`fileName`) as toDoProperties_cis500Document_fileName, 
COALESCE(`_removed`.`toDoProperties`.`cis500Document`.`fileSize`, `toDoProperties`.`cis500Document`.`fileSize`) as toDoProperties_cis500Document_fileSize, 
COALESCE(`_removed`.`toDoProperties`.`cis500Document`.`id`, `toDoProperties`.`cis500Document`.`id`) as toDoProperties_cis500Document_id, 
COALESCE(`_removed`.`toDoProperties`.`cis500Document`.`revision`, `toDoProperties`.`cis500Document`.`revision`) as toDoProperties_cis500Document_revision, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`toDoProperties`.`cis500Document`.`updatedAt`.`d_date`, LENGTH(`_removed`.`toDoProperties`.`cis500Document`.`updatedAt`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`cis500Document`.`updatedAt`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`cis500Document`.`updatedAt`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`cis500Document`.`updatedAt`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`cis500Document`.`updatedAt`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`toDoProperties`.`cis500Document`.`updatedAt`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`toDoProperties`.`cis500Document`.`updatedAt`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`toDoProperties`.`cis500Document`.`updatedAt`.`d_date`, LENGTH(`toDoProperties`.`cis500Document`.`updatedAt`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`toDoProperties`.`cis500Document`.`updatedAt`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`cis500Document`.`updatedAt`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`toDoProperties`.`cis500Document`.`updatedAt`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`cis500Document`.`updatedAt`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`toDoProperties`.`cis500Document`.`updatedAt`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`toDoProperties`.`cis500Document`.`updatedAt`.`d_date`, 21, 3)) AS TIMESTAMP) END) as toDoProperties_cis500Document_updatedAt_d_date, 
COALESCE(`_removed`.`toDoProperties`.`cis500Document`.`updatedBy`, `toDoProperties`.`cis500Document`.`updatedBy`) as toDoProperties_cis500Document_updatedBy, 
COALESCE(CAST(`_removed`.`toDoProperties`.`cisMismatchDetails`.`amendAddressLine` as STRING), CAST(`toDoProperties`.`cisMismatchDetails`.`amendAddressLine` as STRING)) as toDoProperties_cisMismatchDetails_amendAddressLine, 
COALESCE(CAST(`_removed`.`toDoProperties`.`cisMismatchDetails`.`amendFirstName` as STRING), CAST(`toDoProperties`.`cisMismatchDetails`.`amendFirstName` as STRING)) as toDoProperties_cisMismatchDetails_amendFirstName, 
COALESCE(CAST(`_removed`.`toDoProperties`.`cisMismatchDetails`.`amendMiddleName` as STRING), CAST(`toDoProperties`.`cisMismatchDetails`.`amendMiddleName` as STRING)) as toDoProperties_cisMismatchDetails_amendMiddleName, 
COALESCE(CAST(`_removed`.`toDoProperties`.`cisMismatchDetails`.`amendPostcode` as STRING), CAST(`toDoProperties`.`cisMismatchDetails`.`amendPostcode` as STRING)) as toDoProperties_cisMismatchDetails_amendPostcode, 
COALESCE(`_removed`.`toDoProperties`.`triggerReason`, `toDoProperties`.`triggerReason`) as toDoProperties_triggerReason, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_update_cis_from_trace_cis_properties
 src_agent_core_agenttodo_agent_todo_update_cis_from_trace_cis_properties 
 where `_removed`.`toDoProperties`.`type`='UPDATE_CIS_FROM_TRACE_CIS_PROPERTIES' or `toDoProperties`.`type`='UPDATE_CIS_FROM_TRACE_CIS_PROPERTIES';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_HRT_ENTITLEMENT_RECHECK_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_hrt_entitlement_recheck_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_hrt_entitlement_recheck_properties(
`toDoProperties` STRUCT<`declaration`:STRUCT<`effectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING>
,`_version`:STRING
,`createdDateTime`:STRING
,`processId`:STRING>
,`personDetails`:STRUCT<`createdDateTime`:STRUCT<`d_date`:STRING>
,`effectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING>
,`_version`:STRING
,`citizenId`:STRING
,`contactPreference`:STRING
,`contractId`:STRING
,`declarationId`:STRING
,`email`:STRING
,`firstName`:STRING
,`gender`:STRING
,`lastName`:STRING
,`middleName`:STRING
,`mobileNumber`:STRING
,`processId`:STRING
,`sanitisedFirstName`:STRING
,`sanitisedLastName`:STRING
,`sanitisedMiddleName`:STRING
,`verifiedUsingBioQuestionsOrThirdParty`:BOOLEAN
,`verifiedWithNameDateOfBirthOrAddressChange`:BOOLEAN
,`type`:STRING>
,`recheckReason`:STRING
,`sanctionId`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`declaration`:STRUCT<`effectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING>
,`_version`:STRING
,`createdDateTime`:STRING
,`processId`:STRING>
,`personDetails`:STRUCT<`createdDateTime`:STRUCT<`d_date`:STRING>
,`effectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING>
,`_version`:STRING
,`citizenId`:STRING
,`contactPreference`:STRING
,`contractId`:STRING
,`declarationId`:STRING
,`email`:STRING
,`firstName`:STRING
,`gender`:STRING
,`lastName`:STRING
,`middleName`:STRING
,`mobileNumber`:STRING
,`processId`:STRING
,`sanitisedFirstName`:STRING
,`sanitisedLastName`:STRING
,`sanitisedMiddleName`:STRING
,`verifiedUsingBioQuestionsOrThirdParty`:BOOLEAN
,`verifiedWithNameDateOfBirthOrAddressChange`:BOOLEAN
,`type`:STRING>
,`recheckReason`:STRING
,`sanctionId`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_HRT_ENTITLEMENT_RECHECK_PROPERTIES;

CREATE TABLE agent_todo_archive_hrt_entitlement_recheck_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`declaration`.`_version`, `toDoProperties`.`declaration`.`_version`) as toDoProperties_declaration__version, 
COALESCE(`_removed`.`toDoProperties`.`declaration`.`createdDateTime`, `toDoProperties`.`declaration`.`createdDateTime`) as toDoProperties_declaration_createdDateTime, 
COALESCE(CAST(`_removed`.`toDoProperties`.`declaration`.`effectiveDate`.`hasDate` as STRING), CAST(`toDoProperties`.`declaration`.`effectiveDate`.`hasDate` as STRING)) as toDoProperties_declaration_effectiveDate_hasDate, 
COALESCE(`_removed`.`toDoProperties`.`declaration`.`effectiveDate`.`knownDate`, `toDoProperties`.`declaration`.`effectiveDate`.`knownDate`) as toDoProperties_declaration_effectiveDate_knownDate, 
COALESCE(`_removed`.`toDoProperties`.`declaration`.`processId`, `toDoProperties`.`declaration`.`processId`) as toDoProperties_declaration_processId, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`_version`, `toDoProperties`.`personDetails`.`_version`) as toDoProperties_personDetails__version, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`citizenId`, `toDoProperties`.`personDetails`.`citizenId`) as toDoProperties_personDetails_citizenId, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`contactPreference`, `toDoProperties`.`personDetails`.`contactPreference`) as toDoProperties_personDetails_contactPreference, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`contractId`, `toDoProperties`.`personDetails`.`contractId`) as toDoProperties_personDetails_contractId, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`toDoProperties`.`personDetails`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`toDoProperties`.`personDetails`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`personDetails`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`personDetails`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`personDetails`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`personDetails`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`toDoProperties`.`personDetails`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`toDoProperties`.`personDetails`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`toDoProperties`.`personDetails`.`createdDateTime`.`d_date`, LENGTH(`toDoProperties`.`personDetails`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`toDoProperties`.`personDetails`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`personDetails`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`toDoProperties`.`personDetails`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`personDetails`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`toDoProperties`.`personDetails`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`toDoProperties`.`personDetails`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as toDoProperties_personDetails_createdDateTime_d_date, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`declarationId`, `toDoProperties`.`personDetails`.`declarationId`) as toDoProperties_personDetails_declarationId, 
COALESCE(CAST(`_removed`.`toDoProperties`.`personDetails`.`effectiveDate`.`hasDate` as STRING), CAST(`toDoProperties`.`personDetails`.`effectiveDate`.`hasDate` as STRING)) as toDoProperties_personDetails_effectiveDate_hasDate, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`effectiveDate`.`knownDate`, `toDoProperties`.`personDetails`.`effectiveDate`.`knownDate`) as toDoProperties_personDetails_effectiveDate_knownDate, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`email`, `toDoProperties`.`personDetails`.`email`) as toDoProperties_personDetails_email, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`firstName`, `toDoProperties`.`personDetails`.`firstName`) as toDoProperties_personDetails_firstName, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`gender`, `toDoProperties`.`personDetails`.`gender`) as toDoProperties_personDetails_gender, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`lastName`, `toDoProperties`.`personDetails`.`lastName`) as toDoProperties_personDetails_lastName, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`middleName`, `toDoProperties`.`personDetails`.`middleName`) as toDoProperties_personDetails_middleName, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`mobileNumber`, `toDoProperties`.`personDetails`.`mobileNumber`) as toDoProperties_personDetails_mobileNumber, 
COALESCE(CAST(`_removed`.`toDoProperties`.`personDetails`.`paymentEffectiveDate`.`hasDate` as STRING), CAST(`toDoProperties`.`personDetails`.`paymentEffectiveDate`.`hasDate` as STRING)) as toDoProperties_personDetails_paymentEffectiveDate_hasDate, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`paymentEffectiveDate`.`knownDate`, `toDoProperties`.`personDetails`.`paymentEffectiveDate`.`knownDate`) as toDoProperties_personDetails_paymentEffectiveDate_knownDate, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`processId`, `toDoProperties`.`personDetails`.`processId`) as toDoProperties_personDetails_processId, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`sanitisedFirstName`, `toDoProperties`.`personDetails`.`sanitisedFirstName`) as toDoProperties_personDetails_sanitisedFirstName, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`sanitisedLastName`, `toDoProperties`.`personDetails`.`sanitisedLastName`) as toDoProperties_personDetails_sanitisedLastName, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`sanitisedMiddleName`, `toDoProperties`.`personDetails`.`sanitisedMiddleName`) as toDoProperties_personDetails_sanitisedMiddleName, 
COALESCE(CAST(`_removed`.`toDoProperties`.`personDetails`.`verifiedUsingBioQuestionsOrThirdParty` as STRING), CAST(`toDoProperties`.`personDetails`.`verifiedUsingBioQuestionsOrThirdParty` as STRING)) as toDoProperties_personDetails_verifiedUsingBioQuestionsOrThirdParty, 
COALESCE(CAST(`_removed`.`toDoProperties`.`personDetails`.`verifiedWithNameDateOfBirthOrAddressChange` as STRING), CAST(`toDoProperties`.`personDetails`.`verifiedWithNameDateOfBirthOrAddressChange` as STRING)) as toDoProperties_personDetails_verifiedWithNameDateOfBirthOrAddressChange, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`type`, `toDoProperties`.`personDetails`.`type`) as toDoProperties_personDetails_type, 
COALESCE(`_removed`.`toDoProperties`.`recheckReason`, `toDoProperties`.`recheckReason`) as toDoProperties_recheckReason, 
COALESCE(`_removed`.`toDoProperties`.`sanctionId`, `toDoProperties`.`sanctionId`) as toDoProperties_sanctionId, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_hrt_entitlement_recheck_properties
 src_agent_core_agenttodoarchive_agent_todo_archive_hrt_entitlement_recheck_properties 
 where `_removed`.`toDoProperties`.`type`='HRT_ENTITLEMENT_RECHECK_PROPERTIES' or `toDoProperties`.`type`='HRT_ENTITLEMENT_RECHECK_PROPERTIES';


!echo ------------------------;
!echo ------------------------ agent_todo_BACKDATED_CLAIM;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_backdated_claim
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_backdated_claim(
`toDoProperties` STRUCT<`attachmentSummary`:STRUCT<`updatedAt`:STRUCT<`d_date`:STRING>
,`fileName`:STRING
,`fileSize`:STRING
,`id`:STRING
,`revision`:STRING
,`updatedBy`:STRING>
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`attachmentSummary`:STRUCT<`updatedAt`:STRUCT<`d_date`:STRING>
,`fileName`:STRING
,`fileSize`:STRING
,`id`:STRING
,`revision`:STRING
,`updatedBy`:STRING>
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_BACKDATED_CLAIM;

CREATE TABLE agent_todo_backdated_claim STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`attachmentSummary`.`fileName`, `toDoProperties`.`attachmentSummary`.`fileName`) as toDoProperties_attachmentSummary_fileName, 
COALESCE(`_removed`.`toDoProperties`.`attachmentSummary`.`fileSize`, `toDoProperties`.`attachmentSummary`.`fileSize`) as toDoProperties_attachmentSummary_fileSize, 
COALESCE(`_removed`.`toDoProperties`.`attachmentSummary`.`id`, `toDoProperties`.`attachmentSummary`.`id`) as toDoProperties_attachmentSummary_id, 
COALESCE(`_removed`.`toDoProperties`.`attachmentSummary`.`revision`, `toDoProperties`.`attachmentSummary`.`revision`) as toDoProperties_attachmentSummary_revision, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, LENGTH(`_removed`.`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, LENGTH(`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 21, 3)) AS TIMESTAMP) END) as toDoProperties_attachmentSummary_updatedAt_d_date, 
COALESCE(`_removed`.`toDoProperties`.`attachmentSummary`.`updatedBy`, `toDoProperties`.`attachmentSummary`.`updatedBy`) as toDoProperties_attachmentSummary_updatedBy, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_backdated_claim
 src_agent_core_agenttodo_agent_todo_backdated_claim 
 where `_removed`.`toDoProperties`.`type`='BACKDATED_CLAIM' or `toDoProperties`.`type`='BACKDATED_CLAIM';


!echo ------------------------;
!echo ------------------------ journal_FlexDirectPaymentToLandlordCancelledJournalEntry;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_journal_journal_flexdirectpaymenttolandlordcancelledjournalentry
;

CREATE EXTERNAL TABLE src_core_journal_journal_flexdirectpaymenttolandlordcancelledjournalentry(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`journalEntryProperties` STRUCT<`type`:STRING>
,`_id` STRUCT<`journalId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`journalEntryProperties`:STRUCT<`type`:STRING>
,`_id`:STRUCT<`journalId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/journal';

DROP TABLE IF EXISTS journal_FlexDirectPaymentToLandlordCancelledJournalEntry;

CREATE TABLE journal_flexdirectpaymenttolandlordcancelledjournalentry STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`journalEntryProperties`.`type`, `journalEntryProperties`.`type`) as journalEntryProperties_type, 
COALESCE(`_removed`.`_id`.`journalId`, `_id`.`journalId`) as id FROM src_core_journal_journal_flexdirectpaymenttolandlordcancelledjournalentry
 src_core_journal_journal_flexdirectpaymenttolandlordcancelledjournalentry 
 where `_removed`.`journalEntryProperties`.`type`='FlexDirectPaymentToLandlordCancelledJournalEntry' or `journalEntryProperties`.`type`='FlexDirectPaymentToLandlordCancelledJournalEntry';


!echo ------------------------;
!echo ------------------------ agent_todo_archive;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive(
`supportingDocuments` ARRAY<STRUCT<`attachmentSummary`:STRUCT<`updatedAt`:STRUCT<`d_date`:STRING>
,`fileName`:STRING
,`fileSize`:STRING
,`id`:STRING
,`revision`:STRING
,`updatedBy`:STRING>
,`supportingDocumentPopulationArguments`:STRUCT<`effectiveDateOfChange`:STRING
,`includeAddress`:BOOLEAN
,`includeName`:BOOLEAN
,`includePhoneNumber`:BOOLEAN
,`nino`:STRING
,`type`:STRING>
,`supportingDocumentType`:STRING
>>
,`alpForm` STRUCT<`attachmentSummary`:STRUCT<`updatedAt`:STRUCT<`d_date`:STRING>
,`fileName`:STRING
,`fileSize`:STRING
,`id`:STRING
,`revision`:STRING
,`updatedBy`:STRING>
,`alpFormType`:STRING>
,`notes` ARRAY<STRUCT<`dateCreated`:STRUCT<`d_date`:STRING>
,`createdBy`:STRING
,`createdByName`:STRING
,`deleted`:BOOLEAN
,`text`:STRING
>>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`completedDateTime` STRUCT<`d_date`:STRING>
,`reference` STRUCT<`claimantId`:STRING
,`contractId`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`deliveryUnits` ARRAY<STRING>
,`_version` STRING
,`allocatedToAgentId` STRING
,`cancelled` STRING
,`completingAgentId` STRING
,`completingAgentName` STRING
,`contractId` STRING
,`createdByAgentId` STRING
,`createdByAgentName` STRING
,`deadlineDate` STRING
,`deadlineTime` STRING
,`description` STRING
,`relatedToClaimantId` STRING
,`status` STRING
,`title` STRING
,`toDoId` STRING
,`type` STRING
,`_removed` STRUCT<`supportingDocuments`:ARRAY<STRUCT<`attachmentSummary`:STRUCT<`updatedAt`:STRUCT<`d_date`:STRING>
,`fileName`:STRING
,`fileSize`:STRING
,`id`:STRING
,`revision`:STRING
,`updatedBy`:STRING>
,`supportingDocumentPopulationArguments`:STRUCT<`effectiveDateOfChange`:STRING
,`includeAddress`:BOOLEAN
,`includeName`:BOOLEAN
,`includePhoneNumber`:BOOLEAN
,`nino`:STRING
,`type`:STRING>
,`supportingDocumentType`:STRING
>>
,`alpForm`:STRUCT<`attachmentSummary`:STRUCT<`updatedAt`:STRUCT<`d_date`:STRING>
,`fileName`:STRING
,`fileSize`:STRING
,`id`:STRING
,`revision`:STRING
,`updatedBy`:STRING>
,`alpFormType`:STRING>
,`notes`:ARRAY<STRUCT<`dateCreated`:STRUCT<`d_date`:STRING>
,`createdBy`:STRING
,`createdByName`:STRING
,`deleted`:BOOLEAN
,`text`:STRING
>>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`completedDateTime`:STRUCT<`d_date`:STRING>
,`reference`:STRUCT<`claimantId`:STRING
,`contractId`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`deliveryUnits`:ARRAY<STRING>
,`_version`:STRING
,`allocatedToAgentId`:STRING
,`cancelled`:STRING
,`completingAgentId`:STRING
,`completingAgentName`:STRING
,`contractId`:STRING
,`createdByAgentId`:STRING
,`createdByAgentName`:STRING
,`deadlineDate`:STRING
,`deadlineTime`:STRING
,`description`:STRING
,`relatedToClaimantId`:STRING
,`status`:STRING
,`title`:STRING
,`toDoId`:STRING
,`type`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive;

CREATE TABLE agent_todo_archive STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`allocatedToAgentId`, `allocatedToAgentId`) as allocatedToAgentId, 
COALESCE(`_removed`.`alpForm`.`alpFormType`, `alpForm`.`alpFormType`) as alpForm_alpFormType, 
COALESCE(`_removed`.`alpForm`.`attachmentSummary`.`fileName`, `alpForm`.`attachmentSummary`.`fileName`) as alpForm_attachmentSummary_fileName, 
COALESCE(`_removed`.`alpForm`.`attachmentSummary`.`fileSize`, `alpForm`.`attachmentSummary`.`fileSize`) as alpForm_attachmentSummary_fileSize, 
COALESCE(`_removed`.`alpForm`.`attachmentSummary`.`id`, `alpForm`.`attachmentSummary`.`id`) as alpForm_attachmentSummary_id, 
COALESCE(`_removed`.`alpForm`.`attachmentSummary`.`revision`, `alpForm`.`attachmentSummary`.`revision`) as alpForm_attachmentSummary_revision, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`alpForm`.`attachmentSummary`.`updatedAt`.`d_date`, LENGTH(`_removed`.`alpForm`.`attachmentSummary`.`updatedAt`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`alpForm`.`attachmentSummary`.`updatedAt`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`alpForm`.`attachmentSummary`.`updatedAt`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`alpForm`.`attachmentSummary`.`updatedAt`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`alpForm`.`attachmentSummary`.`updatedAt`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`alpForm`.`attachmentSummary`.`updatedAt`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`alpForm`.`attachmentSummary`.`updatedAt`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`alpForm`.`attachmentSummary`.`updatedAt`.`d_date`, LENGTH(`alpForm`.`attachmentSummary`.`updatedAt`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`alpForm`.`attachmentSummary`.`updatedAt`.`d_date`, 1, 10), ' ', SUBSTR(`alpForm`.`attachmentSummary`.`updatedAt`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`alpForm`.`attachmentSummary`.`updatedAt`.`d_date`, 1, 10), ' ', SUBSTR(`alpForm`.`attachmentSummary`.`updatedAt`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`alpForm`.`attachmentSummary`.`updatedAt`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`alpForm`.`attachmentSummary`.`updatedAt`.`d_date`, 21, 3)) AS TIMESTAMP) END) as alpForm_attachmentSummary_updatedAt_d_date, 
COALESCE(`_removed`.`alpForm`.`attachmentSummary`.`updatedBy`, `alpForm`.`attachmentSummary`.`updatedBy`) as alpForm_attachmentSummary_updatedBy, 
COALESCE(`_removed`.`cancelled`, `cancelled`) as cancelled, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`completedDateTime`.`d_date`, LENGTH(`_removed`.`completedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`completedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`completedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`completedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`completedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`completedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`completedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`completedDateTime`.`d_date`, LENGTH(`completedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`completedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`completedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`completedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`completedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`completedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`completedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as completedDateTime_d_date, 
COALESCE(`_removed`.`completingAgentId`, `completingAgentId`) as completingAgentId, 
COALESCE(`_removed`.`completingAgentName`, `completingAgentName`) as completingAgentName, 
COALESCE(`_removed`.`contractId`, `contractId`) as contractId, 
COALESCE(`_removed`.`createdByAgentId`, `createdByAgentId`) as createdByAgentId, 
COALESCE(`_removed`.`createdByAgentName`, `createdByAgentName`) as createdByAgentName, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as createdDateTime_d_date, 
COALESCE(`_removed`.`deadlineDate`, `deadlineDate`) as deadlineDate, 
COALESCE(`_removed`.`deadlineTime`, `deadlineTime`) as deadlineTime, 
COALESCE(`removed_exploded_deliveryunits`, `exploded_deliveryunits`) as deliveryUnits, 
COALESCE(`_removed`.`description`, `description`) as description, 
COALESCE(`removed_exploded_notes`.`createdBy`, `exploded_notes`.`createdBy`) as notes_createdBy, 
COALESCE(`removed_exploded_notes`.`createdByName`, `exploded_notes`.`createdByName`) as notes_createdByName, 
COALESCE(CASE WHEN SUBSTRING(`removed_exploded_notes`.`dateCreated`.`d_date`, LENGTH(`removed_exploded_notes`.`dateCreated`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`removed_exploded_notes`.`dateCreated`.`d_date`, 1, 10), ' ', SUBSTR(`removed_exploded_notes`.`dateCreated`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`removed_exploded_notes`.`dateCreated`.`d_date`, 1, 10), ' ', SUBSTR(`removed_exploded_notes`.`dateCreated`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`removed_exploded_notes`.`dateCreated`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`removed_exploded_notes`.`dateCreated`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`exploded_notes`.`dateCreated`.`d_date`, LENGTH(`exploded_notes`.`dateCreated`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`exploded_notes`.`dateCreated`.`d_date`, 1, 10), ' ', SUBSTR(`exploded_notes`.`dateCreated`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`exploded_notes`.`dateCreated`.`d_date`, 1, 10), ' ', SUBSTR(`exploded_notes`.`dateCreated`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`exploded_notes`.`dateCreated`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`exploded_notes`.`dateCreated`.`d_date`, 21, 3)) AS TIMESTAMP) END) as notes_dateCreated_d_date, 
COALESCE(CAST(`removed_exploded_notes`.`deleted` as STRING), CAST(`exploded_notes`.`deleted` as STRING)) as notes_deleted, 
COALESCE(`removed_exploded_notes`.`text`, `exploded_notes`.`text`) as notes_text, 
COALESCE(`_removed`.`relatedToClaimantId`, `relatedToClaimantId`) as relatedToClaimantId, 
COALESCE(`_removed`.`status`, `status`) as status, 
COALESCE(`removed_exploded_supportingdocuments`.`attachmentSummary`.`fileName`, `exploded_supportingdocuments`.`attachmentSummary`.`fileName`) as supportingDocuments_attachmentSummary_fileName, 
COALESCE(`removed_exploded_supportingdocuments`.`attachmentSummary`.`fileSize`, `exploded_supportingdocuments`.`attachmentSummary`.`fileSize`) as supportingDocuments_attachmentSummary_fileSize, 
COALESCE(`removed_exploded_supportingdocuments`.`attachmentSummary`.`id`, `exploded_supportingdocuments`.`attachmentSummary`.`id`) as supportingDocuments_attachmentSummary_id, 
COALESCE(`removed_exploded_supportingdocuments`.`attachmentSummary`.`revision`, `exploded_supportingdocuments`.`attachmentSummary`.`revision`) as supportingDocuments_attachmentSummary_revision, 
COALESCE(CASE WHEN SUBSTRING(`removed_exploded_supportingdocuments`.`attachmentSummary`.`updatedAt`.`d_date`, LENGTH(`removed_exploded_supportingdocuments`.`attachmentSummary`.`updatedAt`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`removed_exploded_supportingdocuments`.`attachmentSummary`.`updatedAt`.`d_date`, 1, 10), ' ', SUBSTR(`removed_exploded_supportingdocuments`.`attachmentSummary`.`updatedAt`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`removed_exploded_supportingdocuments`.`attachmentSummary`.`updatedAt`.`d_date`, 1, 10), ' ', SUBSTR(`removed_exploded_supportingdocuments`.`attachmentSummary`.`updatedAt`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`removed_exploded_supportingdocuments`.`attachmentSummary`.`updatedAt`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`removed_exploded_supportingdocuments`.`attachmentSummary`.`updatedAt`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`exploded_supportingdocuments`.`attachmentSummary`.`updatedAt`.`d_date`, LENGTH(`exploded_supportingdocuments`.`attachmentSummary`.`updatedAt`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`exploded_supportingdocuments`.`attachmentSummary`.`updatedAt`.`d_date`, 1, 10), ' ', SUBSTR(`exploded_supportingdocuments`.`attachmentSummary`.`updatedAt`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`exploded_supportingdocuments`.`attachmentSummary`.`updatedAt`.`d_date`, 1, 10), ' ', SUBSTR(`exploded_supportingdocuments`.`attachmentSummary`.`updatedAt`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`exploded_supportingdocuments`.`attachmentSummary`.`updatedAt`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`exploded_supportingdocuments`.`attachmentSummary`.`updatedAt`.`d_date`, 21, 3)) AS TIMESTAMP) END) as supportingDocuments_attachmentSummary_updatedAt_d_date, 
COALESCE(`removed_exploded_supportingdocuments`.`attachmentSummary`.`updatedBy`, `exploded_supportingdocuments`.`attachmentSummary`.`updatedBy`) as supportingDocuments_attachmentSummary_updatedBy, 
COALESCE(`removed_exploded_supportingdocuments`.`supportingDocumentType`, `exploded_supportingdocuments`.`supportingDocumentType`) as supportingDocuments_supportingDocumentType, 
COALESCE(`removed_exploded_supportingdocuments`.`supportingDocumentPopulationArguments`.`effectiveDateOfChange`, `exploded_supportingdocuments`.`supportingDocumentPopulationArguments`.`effectiveDateOfChange`) as supportingDocuments_supportingDocumentPopulationArguments_effectiveDateOfChange, 
COALESCE(CAST(`removed_exploded_supportingdocuments`.`supportingDocumentPopulationArguments`.`includeAddress` as STRING), CAST(`exploded_supportingdocuments`.`supportingDocumentPopulationArguments`.`includeAddress` as STRING)) as supportingDocuments_supportingDocumentPopulationArguments_includeAddress, 
COALESCE(CAST(`removed_exploded_supportingdocuments`.`supportingDocumentPopulationArguments`.`includeName` as STRING), CAST(`exploded_supportingdocuments`.`supportingDocumentPopulationArguments`.`includeName` as STRING)) as supportingDocuments_supportingDocumentPopulationArguments_includeName, 
COALESCE(CAST(`removed_exploded_supportingdocuments`.`supportingDocumentPopulationArguments`.`includePhoneNumber` as STRING), CAST(`exploded_supportingdocuments`.`supportingDocumentPopulationArguments`.`includePhoneNumber` as STRING)) as supportingDocuments_supportingDocumentPopulationArguments_includePhoneNumber, 
COALESCE(`removed_exploded_supportingdocuments`.`supportingDocumentPopulationArguments`.`nino`, `exploded_supportingdocuments`.`supportingDocumentPopulationArguments`.`nino`) as supportingDocuments_supportingDocumentPopulationArguments_nino, 
COALESCE(`removed_exploded_supportingdocuments`.`supportingDocumentPopulationArguments`.`type`, `exploded_supportingdocuments`.`supportingDocumentPopulationArguments`.`type`) as supportingDocuments_supportingDocumentPopulationArguments_type, 
COALESCE(`_removed`.`title`, `title`) as title, 
COALESCE(`_removed`.`toDoId`, `toDoId`) as toDoId, 
COALESCE(`_removed`.`type`, `type`) as type, 
COALESCE(`_removed`.`reference`.`claimantId`, `reference`.`claimantId`) as reference_claimantId, 
COALESCE(`_removed`.`reference`.`contractId`, `reference`.`contractId`) as reference_contractId, 
COALESCE(`_removed`.`reference`.`type`, `reference`.`type`) as reference_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive
 LATERAL VIEW OUTER EXPLODE(`deliveryUnits`) view_exploded_deliveryunits AS exploded_deliveryunits 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`deliveryUnits`) view_removed_exploded_deliveryunits AS removed_exploded_deliveryunits 
 LATERAL VIEW OUTER EXPLODE(`notes`) view_exploded_notes AS exploded_notes 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`notes`) view_removed_exploded_notes AS removed_exploded_notes 
 LATERAL VIEW OUTER EXPLODE(`supportingDocuments`) view_exploded_supportingdocuments AS exploded_supportingdocuments 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`supportingDocuments`) view_removed_exploded_supportingdocuments AS removed_exploded_supportingdocuments 
;


!echo ------------------------;
!echo ------------------------ agent_todo_archive_GATHER_EVIDENCE_FOR_WAITING_DAYS;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_gather_evidence_for_waiting_days
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_gather_evidence_for_waiting_days(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`evidenceDueDate`:STRING
,`evidenceRequestedDate`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`evidenceDueDate`:STRING
,`evidenceRequestedDate`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_GATHER_EVIDENCE_FOR_WAITING_DAYS;

CREATE TABLE agent_todo_archive_gather_evidence_for_waiting_days STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`evidenceDueDate`, `toDoProperties`.`evidenceDueDate`) as toDoProperties_evidenceDueDate, 
COALESCE(`_removed`.`toDoProperties`.`evidenceRequestedDate`, `toDoProperties`.`evidenceRequestedDate`) as toDoProperties_evidenceRequestedDate, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_gather_evidence_for_waiting_days
 src_agent_core_agenttodoarchive_agent_todo_archive_gather_evidence_for_waiting_days 
 where `_removed`.`toDoProperties`.`type`='GATHER_EVIDENCE_FOR_WAITING_DAYS' or `toDoProperties`.`type`='GATHER_EVIDENCE_FOR_WAITING_DAYS';


!echo ------------------------;
!echo ------------------------ todo_DROP_IN_EARNINGS_PREVIOUS_EARNINGS;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_todo_todo_drop_in_earnings_previous_earnings
;

CREATE EXTERNAL TABLE src_core_todo_todo_drop_in_earnings_previous_earnings(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`properties` STRUCT<`dropInEarningsApId`:STRING
,`numberOfMonths`:STRING
,`requiredEarningsEndDate`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`properties`:STRUCT<`dropInEarningsApId`:STRING
,`numberOfMonths`:STRING
,`requiredEarningsEndDate`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/toDo';

DROP TABLE IF EXISTS todo_DROP_IN_EARNINGS_PREVIOUS_EARNINGS;

CREATE TABLE todo_drop_in_earnings_previous_earnings STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`properties`.`dropInEarningsApId`, `properties`.`dropInEarningsApId`) as properties_dropInEarningsApId, 
COALESCE(`_removed`.`properties`.`numberOfMonths`, `properties`.`numberOfMonths`) as properties_numberOfMonths, 
COALESCE(`_removed`.`properties`.`requiredEarningsEndDate`, `properties`.`requiredEarningsEndDate`) as properties_requiredEarningsEndDate, 
COALESCE(`_removed`.`properties`.`type`, `properties`.`type`) as properties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_core_todo_todo_drop_in_earnings_previous_earnings
 src_core_todo_todo_drop_in_earnings_previous_earnings 
 where `_removed`.`properties`.`type`='DROP_IN_EARNINGS_PREVIOUS_EARNINGS' or `properties`.`type`='DROP_IN_EARNINGS_PREVIOUS_EARNINGS';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_JOURNAL_ENTRY;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_journal_entry
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_journal_entry(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`journalEntryCategory`:STRING
,`journalEntryId`:STRING
,`journalEntryThreadId`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`journalEntryCategory`:STRING
,`journalEntryId`:STRING
,`journalEntryThreadId`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_JOURNAL_ENTRY;

CREATE TABLE agent_todo_archive_journal_entry STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`journalEntryCategory`, `toDoProperties`.`journalEntryCategory`) as toDoProperties_journalEntryCategory, 
COALESCE(`_removed`.`toDoProperties`.`journalEntryId`, `toDoProperties`.`journalEntryId`) as toDoProperties_journalEntryId, 
COALESCE(`_removed`.`toDoProperties`.`journalEntryThreadId`, `toDoProperties`.`journalEntryThreadId`) as toDoProperties_journalEntryThreadId, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_journal_entry
 src_agent_core_agenttodoarchive_agent_todo_archive_journal_entry 
 where `_removed`.`toDoProperties`.`type`='JOURNAL_ENTRY' or `toDoProperties`.`type`='JOURNAL_ENTRY';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_VERIFY_SELF_EMPLOYMENT;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_verify_self_employment
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_verify_self_employment(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`gainfullySelfEmployed`:BOOLEAN
,`hoursPerWeek`:STRING
,`minimumIncomeFloor`:STRING
,`minimumIncomeFloorDate`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`gainfullySelfEmployed`:BOOLEAN
,`hoursPerWeek`:STRING
,`minimumIncomeFloor`:STRING
,`minimumIncomeFloorDate`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_VERIFY_SELF_EMPLOYMENT;

CREATE TABLE agent_todo_archive_verify_self_employment STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(CAST(`_removed`.`toDoProperties`.`gainfullySelfEmployed` as STRING), CAST(`toDoProperties`.`gainfullySelfEmployed` as STRING)) as toDoProperties_gainfullySelfEmployed, 
COALESCE(`_removed`.`toDoProperties`.`hoursPerWeek`, `toDoProperties`.`hoursPerWeek`) as toDoProperties_hoursPerWeek, 
COALESCE(`_removed`.`toDoProperties`.`minimumIncomeFloor`, `toDoProperties`.`minimumIncomeFloor`) as toDoProperties_minimumIncomeFloor, 
COALESCE(`_removed`.`toDoProperties`.`minimumIncomeFloorDate`, `toDoProperties`.`minimumIncomeFloorDate`) as toDoProperties_minimumIncomeFloorDate, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_verify_self_employment
 src_agent_core_agenttodoarchive_agent_todo_archive_verify_self_employment 
 where `_removed`.`toDoProperties`.`type`='VERIFY_SELF_EMPLOYMENT' or `toDoProperties`.`type`='VERIFY_SELF_EMPLOYMENT';


!echo ------------------------;
!echo ------------------------ journal_undefined;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_journal_journal_undefined
;

CREATE EXTERNAL TABLE src_core_journal_journal_undefined(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`journalEntryProperties` STRUCT<`apaFrequency`:STRING
,`currentDirectPaymentToLandlordAmount`:STRING
,`paymentDate`:STRING
,`type`:STRING>
,`_id` STRUCT<`journalId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`journalEntryProperties`:STRUCT<`apaFrequency`:STRING
,`currentDirectPaymentToLandlordAmount`:STRING
,`paymentDate`:STRING
,`type`:STRING>
,`_id`:STRUCT<`journalId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/journal';

DROP TABLE IF EXISTS journal_undefined;

CREATE TABLE journal_undefined STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`journalEntryProperties`.`apaFrequency`, `journalEntryProperties`.`apaFrequency`) as journalEntryProperties_apaFrequency, 
COALESCE(`_removed`.`journalEntryProperties`.`currentDirectPaymentToLandlordAmount`, `journalEntryProperties`.`currentDirectPaymentToLandlordAmount`) as journalEntryProperties_currentDirectPaymentToLandlordAmount, 
COALESCE(`_removed`.`journalEntryProperties`.`paymentDate`, `journalEntryProperties`.`paymentDate`) as journalEntryProperties_paymentDate, 
COALESCE(`_removed`.`journalEntryProperties`.`type`, `journalEntryProperties`.`type`) as journalEntryProperties_type, 
COALESCE(`_removed`.`_id`.`journalId`, `_id`.`journalId`) as id FROM src_core_journal_journal_undefined
 src_core_journal_journal_undefined 
 where `_removed`.`journalEntryProperties`.`type`='undefined' or `journalEntryProperties`.`type`='undefined';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_RTE_TO_DO_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_rte_to_do_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_rte_to_do_properties(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`assessmentPeriodId`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`assessmentPeriodId`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_RTE_TO_DO_PROPERTIES;

CREATE TABLE agent_todo_archive_rte_to_do_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`assessmentPeriodId`, `toDoProperties`.`assessmentPeriodId`) as toDoProperties_assessmentPeriodId, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_rte_to_do_properties
 src_agent_core_agenttodoarchive_agent_todo_archive_rte_to_do_properties 
 where `_removed`.`toDoProperties`.`type`='RTE_TO_DO_PROPERTIES' or `toDoProperties`.`type`='RTE_TO_DO_PROPERTIES';


!echo ------------------------;
!echo ------------------------ todo_ATTEND_PHONE_APPOINTMENT_TODO_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_todo_todo_attend_phone_appointment_todo_properties
;

CREATE EXTERNAL TABLE src_core_todo_todo_attend_phone_appointment_todo_properties(
`properties` STRUCT<`appointmentDateTime`:STRUCT<`d_date`:STRING>
,`addressId`:STRING
,`appointmentType`:STRING
,`claimantInstructions`:STRING
,`otherAppointmentName`:STRING
,`thirdPartyAppointmentReference`:STRING
,`workCoachAgentId`:STRING
,`workCoachAgentName`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`properties`:STRUCT<`appointmentDateTime`:STRUCT<`d_date`:STRING>
,`addressId`:STRING
,`appointmentType`:STRING
,`claimantInstructions`:STRING
,`otherAppointmentName`:STRING
,`thirdPartyAppointmentReference`:STRING
,`workCoachAgentId`:STRING
,`workCoachAgentName`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/toDo';

DROP TABLE IF EXISTS todo_ATTEND_PHONE_APPOINTMENT_TODO_PROPERTIES;

CREATE TABLE todo_attend_phone_appointment_todo_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`properties`.`addressId`, `properties`.`addressId`) as properties_addressId, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`properties`.`appointmentDateTime`.`d_date`, LENGTH(`_removed`.`properties`.`appointmentDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`properties`.`appointmentDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`properties`.`appointmentDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`properties`.`appointmentDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`properties`.`appointmentDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`properties`.`appointmentDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`properties`.`appointmentDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`properties`.`appointmentDateTime`.`d_date`, LENGTH(`properties`.`appointmentDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`properties`.`appointmentDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`properties`.`appointmentDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`properties`.`appointmentDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`properties`.`appointmentDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`properties`.`appointmentDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`properties`.`appointmentDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as properties_appointmentDateTime_d_date, 
COALESCE(`_removed`.`properties`.`appointmentType`, `properties`.`appointmentType`) as properties_appointmentType, 
COALESCE(`_removed`.`properties`.`claimantInstructions`, `properties`.`claimantInstructions`) as properties_claimantInstructions, 
COALESCE(`_removed`.`properties`.`otherAppointmentName`, `properties`.`otherAppointmentName`) as properties_otherAppointmentName, 
COALESCE(`_removed`.`properties`.`thirdPartyAppointmentReference`, `properties`.`thirdPartyAppointmentReference`) as properties_thirdPartyAppointmentReference, 
COALESCE(`_removed`.`properties`.`workCoachAgentId`, `properties`.`workCoachAgentId`) as properties_workCoachAgentId, 
COALESCE(`_removed`.`properties`.`workCoachAgentName`, `properties`.`workCoachAgentName`) as properties_workCoachAgentName, 
COALESCE(`_removed`.`properties`.`type`, `properties`.`type`) as properties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_core_todo_todo_attend_phone_appointment_todo_properties
 src_core_todo_todo_attend_phone_appointment_todo_properties 
 where `_removed`.`properties`.`type`='ATTEND_PHONE_APPOINTMENT_TODO_PROPERTIES' or `properties`.`type`='ATTEND_PHONE_APPOINTMENT_TODO_PROPERTIES';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_APA_CHECK_LANDLORD;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_apa_check_landlord
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_apa_check_landlord(
`toDoProperties` STRUCT<`currentLandlordDetails`:STRUCT<`addressNumber`:STRING
,`email`:STRING
,`name`:STRING
,`payRentTo`:STRING
,`phoneNumber`:STRING
,`postcode`:STRING
,`townCity`:STRING>
,`previousLandlordDetails`:STRUCT<`addressNumber`:STRING
,`email`:STRING
,`name`:STRING
,`payRentTo`:STRING
,`phoneNumber`:STRING
,`postcode`:STRING
,`townCity`:STRING>
,`landlordApaEmailAddress`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`currentLandlordDetails`:STRUCT<`addressNumber`:STRING
,`email`:STRING
,`name`:STRING
,`payRentTo`:STRING
,`phoneNumber`:STRING
,`postcode`:STRING
,`townCity`:STRING>
,`previousLandlordDetails`:STRUCT<`addressNumber`:STRING
,`email`:STRING
,`name`:STRING
,`payRentTo`:STRING
,`phoneNumber`:STRING
,`postcode`:STRING
,`townCity`:STRING>
,`landlordApaEmailAddress`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_APA_CHECK_LANDLORD;

CREATE TABLE agent_todo_archive_apa_check_landlord STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`currentLandlordDetails`.`addressNumber`, `toDoProperties`.`currentLandlordDetails`.`addressNumber`) as toDoProperties_currentLandlordDetails_addressNumber, 
COALESCE(`_removed`.`toDoProperties`.`currentLandlordDetails`.`email`, `toDoProperties`.`currentLandlordDetails`.`email`) as toDoProperties_currentLandlordDetails_email, 
COALESCE(`_removed`.`toDoProperties`.`currentLandlordDetails`.`name`, `toDoProperties`.`currentLandlordDetails`.`name`) as toDoProperties_currentLandlordDetails_name, 
COALESCE(`_removed`.`toDoProperties`.`currentLandlordDetails`.`payRentTo`, `toDoProperties`.`currentLandlordDetails`.`payRentTo`) as toDoProperties_currentLandlordDetails_payRentTo, 
COALESCE(`_removed`.`toDoProperties`.`currentLandlordDetails`.`phoneNumber`, `toDoProperties`.`currentLandlordDetails`.`phoneNumber`) as toDoProperties_currentLandlordDetails_phoneNumber, 
COALESCE(`_removed`.`toDoProperties`.`currentLandlordDetails`.`postcode`, `toDoProperties`.`currentLandlordDetails`.`postcode`) as toDoProperties_currentLandlordDetails_postcode, 
COALESCE(`_removed`.`toDoProperties`.`currentLandlordDetails`.`townCity`, `toDoProperties`.`currentLandlordDetails`.`townCity`) as toDoProperties_currentLandlordDetails_townCity, 
COALESCE(`_removed`.`toDoProperties`.`landlordApaEmailAddress`, `toDoProperties`.`landlordApaEmailAddress`) as toDoProperties_landlordApaEmailAddress, 
COALESCE(`_removed`.`toDoProperties`.`previousLandlordDetails`.`addressNumber`, `toDoProperties`.`previousLandlordDetails`.`addressNumber`) as toDoProperties_previousLandlordDetails_addressNumber, 
COALESCE(`_removed`.`toDoProperties`.`previousLandlordDetails`.`email`, `toDoProperties`.`previousLandlordDetails`.`email`) as toDoProperties_previousLandlordDetails_email, 
COALESCE(`_removed`.`toDoProperties`.`previousLandlordDetails`.`name`, `toDoProperties`.`previousLandlordDetails`.`name`) as toDoProperties_previousLandlordDetails_name, 
COALESCE(`_removed`.`toDoProperties`.`previousLandlordDetails`.`payRentTo`, `toDoProperties`.`previousLandlordDetails`.`payRentTo`) as toDoProperties_previousLandlordDetails_payRentTo, 
COALESCE(`_removed`.`toDoProperties`.`previousLandlordDetails`.`phoneNumber`, `toDoProperties`.`previousLandlordDetails`.`phoneNumber`) as toDoProperties_previousLandlordDetails_phoneNumber, 
COALESCE(`_removed`.`toDoProperties`.`previousLandlordDetails`.`postcode`, `toDoProperties`.`previousLandlordDetails`.`postcode`) as toDoProperties_previousLandlordDetails_postcode, 
COALESCE(`_removed`.`toDoProperties`.`previousLandlordDetails`.`townCity`, `toDoProperties`.`previousLandlordDetails`.`townCity`) as toDoProperties_previousLandlordDetails_townCity, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_apa_check_landlord
 src_agent_core_agenttodoarchive_agent_todo_archive_apa_check_landlord 
 where `_removed`.`toDoProperties`.`type`='APA_CHECK_LANDLORD' or `toDoProperties`.`type`='APA_CHECK_LANDLORD';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_DIFFERENCE_BETWEEN_CALCULATION_AND_PAYMENTS;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_difference_between_calculation_and_payments
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_difference_between_calculation_and_payments(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`effectiveDate`:STRING
,`retrospectiveCalculationCorrelationId`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`effectiveDate`:STRING
,`retrospectiveCalculationCorrelationId`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_DIFFERENCE_BETWEEN_CALCULATION_AND_PAYMENTS;

CREATE TABLE agent_todo_archive_difference_between_calculation_and_payments STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`effectiveDate`, `toDoProperties`.`effectiveDate`) as toDoProperties_effectiveDate, 
COALESCE(`_removed`.`toDoProperties`.`retrospectiveCalculationCorrelationId`, `toDoProperties`.`retrospectiveCalculationCorrelationId`) as toDoProperties_retrospectiveCalculationCorrelationId, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_difference_between_calculation_and_payments
 src_agent_core_agenttodoarchive_agent_todo_archive_difference_between_calculation_and_payments 
 where `_removed`.`toDoProperties`.`type`='DIFFERENCE_BETWEEN_CALCULATION_AND_PAYMENTS' or `toDoProperties`.`type`='DIFFERENCE_BETWEEN_CALCULATION_AND_PAYMENTS';


!echo ------------------------;
!echo ------------------------ todo_INITIAL_GATHER;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_todo_todo_initial_gather
;

CREATE EXTERNAL TABLE src_core_todo_todo_initial_gather(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`properties` STRUCT<`creationReason`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`properties`:STRUCT<`creationReason`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/toDo';

DROP TABLE IF EXISTS todo_INITIAL_GATHER;

CREATE TABLE todo_initial_gather STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`properties`.`creationReason`, `properties`.`creationReason`) as properties_creationReason, 
COALESCE(`_removed`.`properties`.`type`, `properties`.`type`) as properties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_core_todo_todo_initial_gather
 src_core_todo_todo_initial_gather 
 where `_removed`.`properties`.`type`='INITIAL_GATHER' or `properties`.`type`='INITIAL_GATHER';


!echo ------------------------;
!echo ------------------------ todo_CHILDCARE_COSTS_CHANGE_CIRCS;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_todo_todo_childcare_costs_change_circs
;

CREATE EXTERNAL TABLE src_core_todo_todo_childcare_costs_change_circs(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`properties` STRUCT<`showHaveCostsQuestion`:BOOLEAN
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`properties`:STRUCT<`showHaveCostsQuestion`:BOOLEAN
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/toDo';

DROP TABLE IF EXISTS todo_CHILDCARE_COSTS_CHANGE_CIRCS;

CREATE TABLE todo_childcare_costs_change_circs STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(CAST(`_removed`.`properties`.`showHaveCostsQuestion` as STRING), CAST(`properties`.`showHaveCostsQuestion` as STRING)) as properties_showHaveCostsQuestion, 
COALESCE(`_removed`.`properties`.`type`, `properties`.`type`) as properties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_core_todo_todo_childcare_costs_change_circs
 src_core_todo_todo_childcare_costs_change_circs 
 where `_removed`.`properties`.`type`='CHILDCARE_COSTS_CHANGE_CIRCS' or `properties`.`type`='CHILDCARE_COSTS_CHANGE_CIRCS';


!echo ------------------------;
!echo ------------------------ agent_todo_WHO_LIVES_WITH_YOU_SUMMARY;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_who_lives_with_you_summary
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_who_lives_with_you_summary(
`toDoProperties` STRUCT<`whoLivesWithYouSummary`:STRUCT<`children`:ARRAY<STRUCT<`disabilityDetails`:STRUCT<`dlaCareComponent`:STRING
,`pipDailyLivingComponent`:STRING
,`receivingDisabilityLivingAllowance`:BOOLEAN
,`receivingPersonalIndependencePayment`:BOOLEAN
,`registeredBlind`:BOOLEAN>
,`nonDependantDetails`:STRUCT<`awayOnArmedForcesOperations`:BOOLEAN
,`personIsClaimantsChild`:BOOLEAN
,`primaryCarer`:STRING
,`receivingArmedForcesIndependencePayment`:BOOLEAN
,`receivingAttendanceAllowance`:BOOLEAN
,`receivingCarersAllowance`:BOOLEAN
,`receivingDisabilityLivingAllowance`:BOOLEAN
,`receivingPersonalIndependencePayment`:BOOLEAN
,`receivingStatePensionCredit`:BOOLEAN>
,`temporaryAbsence`:STRUCT<`abroadForMoreThanOneMonth`:BOOLEAN
,`inPrison`:BOOLEAN
,`inTheCareOfLocalAuthority`:BOOLEAN>
,`adoptedOrUnderGuardianship`:BOOLEAN
,`childId`:STRING
,`dateOfBirth`:STRING
,`firstName`:STRING
,`fullName`:STRING
,`inQualifyingFullTimeEducation`:BOOLEAN
>>
,`dateOfChange`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`contractId`:STRING
,`hasExceptionToTwoChildPolicy`:BOOLEAN
,`primaryCarerName`:STRING
,`processId`:STRING
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`whoLivesWithYouSummary`:STRUCT<`children`:ARRAY<STRUCT<`disabilityDetails`:STRUCT<`dlaCareComponent`:STRING
,`pipDailyLivingComponent`:STRING
,`receivingDisabilityLivingAllowance`:BOOLEAN
,`receivingPersonalIndependencePayment`:BOOLEAN
,`registeredBlind`:BOOLEAN>
,`nonDependantDetails`:STRUCT<`awayOnArmedForcesOperations`:BOOLEAN
,`personIsClaimantsChild`:BOOLEAN
,`primaryCarer`:STRING
,`receivingArmedForcesIndependencePayment`:BOOLEAN
,`receivingAttendanceAllowance`:BOOLEAN
,`receivingCarersAllowance`:BOOLEAN
,`receivingDisabilityLivingAllowance`:BOOLEAN
,`receivingPersonalIndependencePayment`:BOOLEAN
,`receivingStatePensionCredit`:BOOLEAN>
,`temporaryAbsence`:STRUCT<`abroadForMoreThanOneMonth`:BOOLEAN
,`inPrison`:BOOLEAN
,`inTheCareOfLocalAuthority`:BOOLEAN>
,`adoptedOrUnderGuardianship`:BOOLEAN
,`childId`:STRING
,`dateOfBirth`:STRING
,`firstName`:STRING
,`fullName`:STRING
,`inQualifyingFullTimeEducation`:BOOLEAN
>>
,`dateOfChange`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`contractId`:STRING
,`hasExceptionToTwoChildPolicy`:BOOLEAN
,`primaryCarerName`:STRING
,`processId`:STRING
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_WHO_LIVES_WITH_YOU_SUMMARY;

CREATE TABLE agent_todo_who_lives_with_you_summary STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(CAST(`removed_exploded_todoproperties_wholiveswithyousummary_children`.`adoptedOrUnderGuardianship` as STRING), CAST(`exploded_todoproperties_wholiveswithyousummary_children`.`adoptedOrUnderGuardianship` as STRING)) as toDoProperties_whoLivesWithYouSummary_children_adoptedOrUnderGuardianship, 
COALESCE(`removed_exploded_todoproperties_wholiveswithyousummary_children`.`childId`, `exploded_todoproperties_wholiveswithyousummary_children`.`childId`) as toDoProperties_whoLivesWithYouSummary_children_childId, 
COALESCE(`removed_exploded_todoproperties_wholiveswithyousummary_children`.`dateOfBirth`, `exploded_todoproperties_wholiveswithyousummary_children`.`dateOfBirth`) as toDoProperties_whoLivesWithYouSummary_children_dateOfBirth, 
COALESCE(`removed_exploded_todoproperties_wholiveswithyousummary_children`.`disabilityDetails`.`dlaCareComponent`, `exploded_todoproperties_wholiveswithyousummary_children`.`disabilityDetails`.`dlaCareComponent`) as toDoProperties_whoLivesWithYouSummary_children_disabilityDetails_dlaCareComponent, 
COALESCE(`removed_exploded_todoproperties_wholiveswithyousummary_children`.`disabilityDetails`.`pipDailyLivingComponent`, `exploded_todoproperties_wholiveswithyousummary_children`.`disabilityDetails`.`pipDailyLivingComponent`) as toDoProperties_whoLivesWithYouSummary_children_disabilityDetails_pipDailyLivingComponent, 
COALESCE(CAST(`removed_exploded_todoproperties_wholiveswithyousummary_children`.`disabilityDetails`.`receivingDisabilityLivingAllowance` as STRING), CAST(`exploded_todoproperties_wholiveswithyousummary_children`.`disabilityDetails`.`receivingDisabilityLivingAllowance` as STRING)) as toDoProperties_whoLivesWithYouSummary_children_disabilityDetails_receivingDisabilityLivingAllowance, 
COALESCE(CAST(`removed_exploded_todoproperties_wholiveswithyousummary_children`.`disabilityDetails`.`receivingPersonalIndependencePayment` as STRING), CAST(`exploded_todoproperties_wholiveswithyousummary_children`.`disabilityDetails`.`receivingPersonalIndependencePayment` as STRING)) as toDoProperties_whoLivesWithYouSummary_children_disabilityDetails_receivingPersonalIndependencePayment, 
COALESCE(CAST(`removed_exploded_todoproperties_wholiveswithyousummary_children`.`disabilityDetails`.`registeredBlind` as STRING), CAST(`exploded_todoproperties_wholiveswithyousummary_children`.`disabilityDetails`.`registeredBlind` as STRING)) as toDoProperties_whoLivesWithYouSummary_children_disabilityDetails_registeredBlind, 
COALESCE(`removed_exploded_todoproperties_wholiveswithyousummary_children`.`firstName`, `exploded_todoproperties_wholiveswithyousummary_children`.`firstName`) as toDoProperties_whoLivesWithYouSummary_children_firstName, 
COALESCE(`removed_exploded_todoproperties_wholiveswithyousummary_children`.`fullName`, `exploded_todoproperties_wholiveswithyousummary_children`.`fullName`) as toDoProperties_whoLivesWithYouSummary_children_fullName, 
COALESCE(CAST(`removed_exploded_todoproperties_wholiveswithyousummary_children`.`inQualifyingFullTimeEducation` as STRING), CAST(`exploded_todoproperties_wholiveswithyousummary_children`.`inQualifyingFullTimeEducation` as STRING)) as toDoProperties_whoLivesWithYouSummary_children_inQualifyingFullTimeEducation, 
COALESCE(CAST(`removed_exploded_todoproperties_wholiveswithyousummary_children`.`nonDependantDetails`.`awayOnArmedForcesOperations` as STRING), CAST(`exploded_todoproperties_wholiveswithyousummary_children`.`nonDependantDetails`.`awayOnArmedForcesOperations` as STRING)) as toDoProperties_whoLivesWithYouSummary_children_nonDependantDetails_awayOnArmedForcesOperations, 
COALESCE(CAST(`removed_exploded_todoproperties_wholiveswithyousummary_children`.`nonDependantDetails`.`personIsClaimantsChild` as STRING), CAST(`exploded_todoproperties_wholiveswithyousummary_children`.`nonDependantDetails`.`personIsClaimantsChild` as STRING)) as toDoProperties_whoLivesWithYouSummary_children_nonDependantDetails_personIsClaimantsChild, 
COALESCE(`removed_exploded_todoproperties_wholiveswithyousummary_children`.`nonDependantDetails`.`primaryCarer`, `exploded_todoproperties_wholiveswithyousummary_children`.`nonDependantDetails`.`primaryCarer`) as toDoProperties_whoLivesWithYouSummary_children_nonDependantDetails_primaryCarer, 
COALESCE(CAST(`removed_exploded_todoproperties_wholiveswithyousummary_children`.`nonDependantDetails`.`receivingArmedForcesIndependencePayment` as STRING), CAST(`exploded_todoproperties_wholiveswithyousummary_children`.`nonDependantDetails`.`receivingArmedForcesIndependencePayment` as STRING)) as toDoProperties_whoLivesWithYouSummary_children_nonDependantDetails_receivingArmedForcesIndependencePayment, 
COALESCE(CAST(`removed_exploded_todoproperties_wholiveswithyousummary_children`.`nonDependantDetails`.`receivingAttendanceAllowance` as STRING), CAST(`exploded_todoproperties_wholiveswithyousummary_children`.`nonDependantDetails`.`receivingAttendanceAllowance` as STRING)) as toDoProperties_whoLivesWithYouSummary_children_nonDependantDetails_receivingAttendanceAllowance, 
COALESCE(CAST(`removed_exploded_todoproperties_wholiveswithyousummary_children`.`nonDependantDetails`.`receivingCarersAllowance` as STRING), CAST(`exploded_todoproperties_wholiveswithyousummary_children`.`nonDependantDetails`.`receivingCarersAllowance` as STRING)) as toDoProperties_whoLivesWithYouSummary_children_nonDependantDetails_receivingCarersAllowance, 
COALESCE(CAST(`removed_exploded_todoproperties_wholiveswithyousummary_children`.`nonDependantDetails`.`receivingDisabilityLivingAllowance` as STRING), CAST(`exploded_todoproperties_wholiveswithyousummary_children`.`nonDependantDetails`.`receivingDisabilityLivingAllowance` as STRING)) as toDoProperties_whoLivesWithYouSummary_children_nonDependantDetails_receivingDisabilityLivingAllowance, 
COALESCE(CAST(`removed_exploded_todoproperties_wholiveswithyousummary_children`.`nonDependantDetails`.`receivingPersonalIndependencePayment` as STRING), CAST(`exploded_todoproperties_wholiveswithyousummary_children`.`nonDependantDetails`.`receivingPersonalIndependencePayment` as STRING)) as toDoProperties_whoLivesWithYouSummary_children_nonDependantDetails_receivingPersonalIndependencePayment, 
COALESCE(CAST(`removed_exploded_todoproperties_wholiveswithyousummary_children`.`nonDependantDetails`.`receivingStatePensionCredit` as STRING), CAST(`exploded_todoproperties_wholiveswithyousummary_children`.`nonDependantDetails`.`receivingStatePensionCredit` as STRING)) as toDoProperties_whoLivesWithYouSummary_children_nonDependantDetails_receivingStatePensionCredit, 
COALESCE(CAST(`removed_exploded_todoproperties_wholiveswithyousummary_children`.`temporaryAbsence`.`abroadForMoreThanOneMonth` as STRING), CAST(`exploded_todoproperties_wholiveswithyousummary_children`.`temporaryAbsence`.`abroadForMoreThanOneMonth` as STRING)) as toDoProperties_whoLivesWithYouSummary_children_temporaryAbsence_abroadForMoreThanOneMonth, 
COALESCE(CAST(`removed_exploded_todoproperties_wholiveswithyousummary_children`.`temporaryAbsence`.`inPrison` as STRING), CAST(`exploded_todoproperties_wholiveswithyousummary_children`.`temporaryAbsence`.`inPrison` as STRING)) as toDoProperties_whoLivesWithYouSummary_children_temporaryAbsence_inPrison, 
COALESCE(CAST(`removed_exploded_todoproperties_wholiveswithyousummary_children`.`temporaryAbsence`.`inTheCareOfLocalAuthority` as STRING), CAST(`exploded_todoproperties_wholiveswithyousummary_children`.`temporaryAbsence`.`inTheCareOfLocalAuthority` as STRING)) as toDoProperties_whoLivesWithYouSummary_children_temporaryAbsence_inTheCareOfLocalAuthority, 
COALESCE(`_removed`.`toDoProperties`.`whoLivesWithYouSummary`.`contractId`, `toDoProperties`.`whoLivesWithYouSummary`.`contractId`) as toDoProperties_whoLivesWithYouSummary_contractId, 
COALESCE(CAST(`_removed`.`toDoProperties`.`whoLivesWithYouSummary`.`dateOfChange`.`hasDate` as STRING), CAST(`toDoProperties`.`whoLivesWithYouSummary`.`dateOfChange`.`hasDate` as STRING)) as toDoProperties_whoLivesWithYouSummary_dateOfChange_hasDate, 
COALESCE(`_removed`.`toDoProperties`.`whoLivesWithYouSummary`.`dateOfChange`.`knownDate`, `toDoProperties`.`whoLivesWithYouSummary`.`dateOfChange`.`knownDate`) as toDoProperties_whoLivesWithYouSummary_dateOfChange_knownDate, 
COALESCE(`_removed`.`toDoProperties`.`whoLivesWithYouSummary`.`dateOfChange`.`type`, `toDoProperties`.`whoLivesWithYouSummary`.`dateOfChange`.`type`) as toDoProperties_whoLivesWithYouSummary_dateOfChange_type, 
COALESCE(`_removed`.`toDoProperties`.`whoLivesWithYouSummary`.`dateOfChange`.`date`, `toDoProperties`.`whoLivesWithYouSummary`.`dateOfChange`.`date`) as toDoProperties_whoLivesWithYouSummary_dateOfChange_date, 
COALESCE(CAST(`_removed`.`toDoProperties`.`whoLivesWithYouSummary`.`hasExceptionToTwoChildPolicy` as STRING), CAST(`toDoProperties`.`whoLivesWithYouSummary`.`hasExceptionToTwoChildPolicy` as STRING)) as toDoProperties_whoLivesWithYouSummary_hasExceptionToTwoChildPolicy, 
COALESCE(CAST(`_removed`.`toDoProperties`.`whoLivesWithYouSummary`.`paymentEffectiveDate`.`hasDate` as STRING), CAST(`toDoProperties`.`whoLivesWithYouSummary`.`paymentEffectiveDate`.`hasDate` as STRING)) as toDoProperties_whoLivesWithYouSummary_paymentEffectiveDate_hasDate, 
COALESCE(`_removed`.`toDoProperties`.`whoLivesWithYouSummary`.`paymentEffectiveDate`.`knownDate`, `toDoProperties`.`whoLivesWithYouSummary`.`paymentEffectiveDate`.`knownDate`) as toDoProperties_whoLivesWithYouSummary_paymentEffectiveDate_knownDate, 
COALESCE(`_removed`.`toDoProperties`.`whoLivesWithYouSummary`.`paymentEffectiveDate`.`type`, `toDoProperties`.`whoLivesWithYouSummary`.`paymentEffectiveDate`.`type`) as toDoProperties_whoLivesWithYouSummary_paymentEffectiveDate_type, 
COALESCE(`_removed`.`toDoProperties`.`whoLivesWithYouSummary`.`paymentEffectiveDate`.`date`, `toDoProperties`.`whoLivesWithYouSummary`.`paymentEffectiveDate`.`date`) as toDoProperties_whoLivesWithYouSummary_paymentEffectiveDate_date, 
COALESCE(`_removed`.`toDoProperties`.`whoLivesWithYouSummary`.`primaryCarerName`, `toDoProperties`.`whoLivesWithYouSummary`.`primaryCarerName`) as toDoProperties_whoLivesWithYouSummary_primaryCarerName, 
COALESCE(`_removed`.`toDoProperties`.`whoLivesWithYouSummary`.`processId`, `toDoProperties`.`whoLivesWithYouSummary`.`processId`) as toDoProperties_whoLivesWithYouSummary_processId, 
COALESCE(CAST(`_removed`.`toDoProperties`.`whoLivesWithYouSummary`.`confirmationRequired` as STRING), CAST(`toDoProperties`.`whoLivesWithYouSummary`.`confirmationRequired` as STRING)) as toDoProperties_whoLivesWithYouSummary_confirmationRequired, 
COALESCE(CAST(`_removed`.`toDoProperties`.`whoLivesWithYouSummary`.`hideDetailsForPartnerDeclaration` as STRING), CAST(`toDoProperties`.`whoLivesWithYouSummary`.`hideDetailsForPartnerDeclaration` as STRING)) as toDoProperties_whoLivesWithYouSummary_hideDetailsForPartnerDeclaration, 
COALESCE(CAST(`_removed`.`toDoProperties`.`whoLivesWithYouSummary`.`perClaimant` as STRING), CAST(`toDoProperties`.`whoLivesWithYouSummary`.`perClaimant` as STRING)) as toDoProperties_whoLivesWithYouSummary_perClaimant, 
COALESCE(`_removed`.`toDoProperties`.`whoLivesWithYouSummary`.`type`, `toDoProperties`.`whoLivesWithYouSummary`.`type`) as toDoProperties_whoLivesWithYouSummary_type, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_who_lives_with_you_summary
 LATERAL VIEW OUTER EXPLODE(`toDoProperties`.`whoLivesWithYouSummary`.`children`) view_exploded_todoproperties_wholiveswithyousummary_children AS exploded_todoproperties_wholiveswithyousummary_children 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`toDoProperties`.`whoLivesWithYouSummary`.`children`) view_removed_exploded_todoproperties_wholiveswithyousummary_children AS removed_exploded_todoproperties_wholiveswithyousummary_children 
 
 where `_removed`.`toDoProperties`.`type`='WHO_LIVES_WITH_YOU_SUMMARY' or `toDoProperties`.`type`='WHO_LIVES_WITH_YOU_SUMMARY';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_BACKDATED_CLAIM;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_backdated_claim
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_backdated_claim(
`toDoProperties` STRUCT<`attachmentSummary`:STRUCT<`updatedAt`:STRUCT<`d_date`:STRING>
,`fileName`:STRING
,`fileSize`:STRING
,`id`:STRING
,`revision`:STRING
,`updatedBy`:STRING>
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`attachmentSummary`:STRUCT<`updatedAt`:STRUCT<`d_date`:STRING>
,`fileName`:STRING
,`fileSize`:STRING
,`id`:STRING
,`revision`:STRING
,`updatedBy`:STRING>
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_BACKDATED_CLAIM;

CREATE TABLE agent_todo_archive_backdated_claim STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`attachmentSummary`.`fileName`, `toDoProperties`.`attachmentSummary`.`fileName`) as toDoProperties_attachmentSummary_fileName, 
COALESCE(`_removed`.`toDoProperties`.`attachmentSummary`.`fileSize`, `toDoProperties`.`attachmentSummary`.`fileSize`) as toDoProperties_attachmentSummary_fileSize, 
COALESCE(`_removed`.`toDoProperties`.`attachmentSummary`.`id`, `toDoProperties`.`attachmentSummary`.`id`) as toDoProperties_attachmentSummary_id, 
COALESCE(`_removed`.`toDoProperties`.`attachmentSummary`.`revision`, `toDoProperties`.`attachmentSummary`.`revision`) as toDoProperties_attachmentSummary_revision, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, LENGTH(`_removed`.`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, LENGTH(`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`toDoProperties`.`attachmentSummary`.`updatedAt`.`d_date`, 21, 3)) AS TIMESTAMP) END) as toDoProperties_attachmentSummary_updatedAt_d_date, 
COALESCE(`_removed`.`toDoProperties`.`attachmentSummary`.`updatedBy`, `toDoProperties`.`attachmentSummary`.`updatedBy`) as toDoProperties_attachmentSummary_updatedBy, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_backdated_claim
 src_agent_core_agenttodoarchive_agent_todo_archive_backdated_claim 
 where `_removed`.`toDoProperties`.`type`='BACKDATED_CLAIM' or `toDoProperties`.`type`='BACKDATED_CLAIM';


!echo ------------------------;
!echo ------------------------ agent_todo_VERIFY_SELF_EMPLOYMENT;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_verify_self_employment
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_verify_self_employment(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`gainfullySelfEmployed`:BOOLEAN
,`hoursPerWeek`:STRING
,`minimumIncomeFloor`:STRING
,`minimumIncomeFloorDate`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`gainfullySelfEmployed`:BOOLEAN
,`hoursPerWeek`:STRING
,`minimumIncomeFloor`:STRING
,`minimumIncomeFloorDate`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_VERIFY_SELF_EMPLOYMENT;

CREATE TABLE agent_todo_verify_self_employment STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(CAST(`_removed`.`toDoProperties`.`gainfullySelfEmployed` as STRING), CAST(`toDoProperties`.`gainfullySelfEmployed` as STRING)) as toDoProperties_gainfullySelfEmployed, 
COALESCE(`_removed`.`toDoProperties`.`hoursPerWeek`, `toDoProperties`.`hoursPerWeek`) as toDoProperties_hoursPerWeek, 
COALESCE(`_removed`.`toDoProperties`.`minimumIncomeFloor`, `toDoProperties`.`minimumIncomeFloor`) as toDoProperties_minimumIncomeFloor, 
COALESCE(`_removed`.`toDoProperties`.`minimumIncomeFloorDate`, `toDoProperties`.`minimumIncomeFloorDate`) as toDoProperties_minimumIncomeFloorDate, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_verify_self_employment
 src_agent_core_agenttodo_agent_todo_verify_self_employment 
 where `_removed`.`toDoProperties`.`type`='VERIFY_SELF_EMPLOYMENT' or `toDoProperties`.`type`='VERIFY_SELF_EMPLOYMENT';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_STARTING_SELF_EMPLOYMENT;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_starting_self_employment
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_starting_self_employment(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`effectiveDate`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`effectiveDate`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_STARTING_SELF_EMPLOYMENT;

CREATE TABLE agent_todo_archive_starting_self_employment STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`effectiveDate`, `toDoProperties`.`effectiveDate`) as toDoProperties_effectiveDate, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_starting_self_employment
 src_agent_core_agenttodoarchive_agent_todo_archive_starting_self_employment 
 where `_removed`.`toDoProperties`.`type`='STARTING_SELF_EMPLOYMENT' or `toDoProperties`.`type`='STARTING_SELF_EMPLOYMENT';


!echo ------------------------;
!echo ------------------------ agent_todo_UPDATE_CIS_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_update_cis_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_update_cis_properties(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`triggerReason`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`triggerReason`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_UPDATE_CIS_PROPERTIES;

CREATE TABLE agent_todo_update_cis_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`triggerReason`, `toDoProperties`.`triggerReason`) as toDoProperties_triggerReason, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_update_cis_properties
 src_agent_core_agenttodo_agent_todo_update_cis_properties 
 where `_removed`.`toDoProperties`.`type`='UPDATE_CIS_PROPERTIES' or `toDoProperties`.`type`='UPDATE_CIS_PROPERTIES';


!echo ------------------------;
!echo ------------------------ agent_todo_MAKE_A_DECISION_LATE_REPORTING_OF_CHANGE_TO_DO_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_make_a_decision_late_reporting_of_change_to_do_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_make_a_decision_late_reporting_of_change_to_do_properties(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`changeOfCircumstancesDate`:STRING
,`changeOfCircumstancesDelayedCommunicationReason`:STRING
,`changeOfCircumstancesDescription`:STRING
,`changeOfCircumstancesFirstReportDate`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`changeOfCircumstancesDate`:STRING
,`changeOfCircumstancesDelayedCommunicationReason`:STRING
,`changeOfCircumstancesDescription`:STRING
,`changeOfCircumstancesFirstReportDate`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_MAKE_A_DECISION_LATE_REPORTING_OF_CHANGE_TO_DO_PROPERTIES;

CREATE TABLE agent_todo_make_a_decision_late_reporting_of_change_to_do_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`changeOfCircumstancesDate`, `toDoProperties`.`changeOfCircumstancesDate`) as toDoProperties_changeOfCircumstancesDate, 
COALESCE(`_removed`.`toDoProperties`.`changeOfCircumstancesDelayedCommunicationReason`, `toDoProperties`.`changeOfCircumstancesDelayedCommunicationReason`) as toDoProperties_changeOfCircumstancesDelayedCommunicationReason, 
COALESCE(`_removed`.`toDoProperties`.`changeOfCircumstancesDescription`, `toDoProperties`.`changeOfCircumstancesDescription`) as toDoProperties_changeOfCircumstancesDescription, 
COALESCE(`_removed`.`toDoProperties`.`changeOfCircumstancesFirstReportDate`, `toDoProperties`.`changeOfCircumstancesFirstReportDate`) as toDoProperties_changeOfCircumstancesFirstReportDate, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_make_a_decision_late_reporting_of_change_to_do_properties
 src_agent_core_agenttodo_agent_todo_make_a_decision_late_reporting_of_change_to_do_properties 
 where `_removed`.`toDoProperties`.`type`='MAKE_A_DECISION_LATE_REPORTING_OF_CHANGE_TO_DO_PROPERTIES' or `toDoProperties`.`type`='MAKE_A_DECISION_LATE_REPORTING_OF_CHANGE_TO_DO_PROPERTIES';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_REVIEW_CLAIMANT_UPLOAD_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_review_claimant_upload_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_review_claimant_upload_properties(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`claimantUploadDetailsId`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`claimantUploadDetailsId`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_REVIEW_CLAIMANT_UPLOAD_PROPERTIES;

CREATE TABLE agent_todo_archive_review_claimant_upload_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`claimantUploadDetailsId`, `toDoProperties`.`claimantUploadDetailsId`) as toDoProperties_claimantUploadDetailsId, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_review_claimant_upload_properties
 src_agent_core_agenttodoarchive_agent_todo_archive_review_claimant_upload_properties 
 where `_removed`.`toDoProperties`.`type`='REVIEW_CLAIMANT_UPLOAD_PROPERTIES' or `toDoProperties`.`type`='REVIEW_CLAIMANT_UPLOAD_PROPERTIES';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_NOTIFY_EXISTING_BENEFIT_TO_DO_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_notify_existing_benefit_to_do_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_notify_existing_benefit_to_do_properties(
`toDoProperties` STRUCT<`existingBenefits`:ARRAY<STRUCT<`benefitName`:STRING
,`endDate`:STRING
,`officeContactNumber`:STRING
,`officeDescription`:STRING
,`officeTypeDescription`:STRING
,`source`:STRING
,`startDate`:STRING
>>
,`contractIsBackdating`:BOOLEAN
,`existingBenefitOrAwardGroup`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`existingBenefits`:ARRAY<STRUCT<`benefitName`:STRING
,`endDate`:STRING
,`officeContactNumber`:STRING
,`officeDescription`:STRING
,`officeTypeDescription`:STRING
,`source`:STRING
,`startDate`:STRING
>>
,`contractIsBackdating`:BOOLEAN
,`existingBenefitOrAwardGroup`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_NOTIFY_EXISTING_BENEFIT_TO_DO_PROPERTIES;

CREATE TABLE agent_todo_archive_notify_existing_benefit_to_do_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(CAST(`_removed`.`toDoProperties`.`contractIsBackdating` as STRING), CAST(`toDoProperties`.`contractIsBackdating` as STRING)) as toDoProperties_contractIsBackdating, 
COALESCE(`_removed`.`toDoProperties`.`existingBenefitOrAwardGroup`, `toDoProperties`.`existingBenefitOrAwardGroup`) as toDoProperties_existingBenefitOrAwardGroup, 
COALESCE(`removed_exploded_todoproperties_existingbenefits`.`benefitName`, `exploded_todoproperties_existingbenefits`.`benefitName`) as toDoProperties_existingBenefits_benefitName, 
COALESCE(`removed_exploded_todoproperties_existingbenefits`.`endDate`, `exploded_todoproperties_existingbenefits`.`endDate`) as toDoProperties_existingBenefits_endDate, 
COALESCE(`removed_exploded_todoproperties_existingbenefits`.`officeContactNumber`, `exploded_todoproperties_existingbenefits`.`officeContactNumber`) as toDoProperties_existingBenefits_officeContactNumber, 
COALESCE(`removed_exploded_todoproperties_existingbenefits`.`officeDescription`, `exploded_todoproperties_existingbenefits`.`officeDescription`) as toDoProperties_existingBenefits_officeDescription, 
COALESCE(`removed_exploded_todoproperties_existingbenefits`.`officeTypeDescription`, `exploded_todoproperties_existingbenefits`.`officeTypeDescription`) as toDoProperties_existingBenefits_officeTypeDescription, 
COALESCE(`removed_exploded_todoproperties_existingbenefits`.`source`, `exploded_todoproperties_existingbenefits`.`source`) as toDoProperties_existingBenefits_source, 
COALESCE(`removed_exploded_todoproperties_existingbenefits`.`startDate`, `exploded_todoproperties_existingbenefits`.`startDate`) as toDoProperties_existingBenefits_startDate, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_notify_existing_benefit_to_do_properties
 LATERAL VIEW OUTER EXPLODE(`toDoProperties`.`existingBenefits`) view_exploded_todoproperties_existingbenefits AS exploded_todoproperties_existingbenefits 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`toDoProperties`.`existingBenefits`) view_removed_exploded_todoproperties_existingbenefits AS removed_exploded_todoproperties_existingbenefits 
 
 where `_removed`.`toDoProperties`.`type`='NOTIFY_EXISTING_BENEFIT_TO_DO_PROPERTIES' or `toDoProperties`.`type`='NOTIFY_EXISTING_BENEFIT_TO_DO_PROPERTIES';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_REPORT_THIS;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_report_this
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_report_this(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`declarationId`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`declarationId`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_REPORT_THIS;

CREATE TABLE agent_todo_archive_report_this STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`declarationId`, `toDoProperties`.`declarationId`) as toDoProperties_declarationId, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_report_this
 src_agent_core_agenttodoarchive_agent_todo_archive_report_this 
 where `_removed`.`toDoProperties`.`type`='REPORT_THIS' or `toDoProperties`.`type`='REPORT_THIS';


!echo ------------------------;
!echo ------------------------ todo_REPORT_SELF_EMPLOYMENT_EARNINGS_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_todo_todo_report_self_employment_earnings_properties
;

CREATE EXTERNAL TABLE src_core_todo_todo_report_self_employment_earnings_properties(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`properties` STRUCT<`assessmentPeriodId`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`properties`:STRUCT<`assessmentPeriodId`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/toDo';

DROP TABLE IF EXISTS todo_REPORT_SELF_EMPLOYMENT_EARNINGS_PROPERTIES;

CREATE TABLE todo_report_self_employment_earnings_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`properties`.`assessmentPeriodId`, `properties`.`assessmentPeriodId`) as properties_assessmentPeriodId, 
COALESCE(`_removed`.`properties`.`type`, `properties`.`type`) as properties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_core_todo_todo_report_self_employment_earnings_properties
 src_core_todo_todo_report_self_employment_earnings_properties 
 where `_removed`.`properties`.`type`='REPORT_SELF_EMPLOYMENT_EARNINGS_PROPERTIES' or `properties`.`type`='REPORT_SELF_EMPLOYMENT_EARNINGS_PROPERTIES';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_EXTRA_BEDROOM_DUE_TO_DISABILITY;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_extra_bedroom_due_to_disability
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_extra_bedroom_due_to_disability(
`toDoProperties` STRUCT<`declaredDateTime`:STRUCT<`d_date`:STRING>
,`effectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`dateOfSummaryChange`:STRUCT<`d_date`:STRING>
,`declarationId`:STRING
,`processId`:STRING
,`requiresOvernightCare`:BOOLEAN
,`unableToShareRoomReason`:STRING
,`summaryUpdatedBy`:STRING
,`unableToShareBedroomWithPartner`:BOOLEAN
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`declaredDateTime`:STRUCT<`d_date`:STRING>
,`effectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`dateOfSummaryChange`:STRUCT<`d_date`:STRING>
,`declarationId`:STRING
,`processId`:STRING
,`requiresOvernightCare`:BOOLEAN
,`unableToShareRoomReason`:STRING
,`summaryUpdatedBy`:STRING
,`unableToShareBedroomWithPartner`:BOOLEAN
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_EXTRA_BEDROOM_DUE_TO_DISABILITY;

CREATE TABLE agent_todo_archive_extra_bedroom_due_to_disability STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`declarationId`, `toDoProperties`.`declarationId`) as toDoProperties_declarationId, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`toDoProperties`.`declaredDateTime`.`d_date`, LENGTH(`_removed`.`toDoProperties`.`declaredDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`declaredDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`declaredDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`declaredDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`declaredDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`toDoProperties`.`declaredDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`toDoProperties`.`declaredDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`toDoProperties`.`declaredDateTime`.`d_date`, LENGTH(`toDoProperties`.`declaredDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`toDoProperties`.`declaredDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`declaredDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`toDoProperties`.`declaredDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`declaredDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`toDoProperties`.`declaredDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`toDoProperties`.`declaredDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as toDoProperties_declaredDateTime_d_date, 
COALESCE(CAST(`_removed`.`toDoProperties`.`effectiveDate`.`hasDate` as STRING), CAST(`toDoProperties`.`effectiveDate`.`hasDate` as STRING)) as toDoProperties_effectiveDate_hasDate, 
COALESCE(`_removed`.`toDoProperties`.`effectiveDate`.`knownDate`, `toDoProperties`.`effectiveDate`.`knownDate`) as toDoProperties_effectiveDate_knownDate, 
COALESCE(`_removed`.`toDoProperties`.`effectiveDate`.`type`, `toDoProperties`.`effectiveDate`.`type`) as toDoProperties_effectiveDate_type, 
COALESCE(`_removed`.`toDoProperties`.`effectiveDate`.`date`, `toDoProperties`.`effectiveDate`.`date`) as toDoProperties_effectiveDate_date, 
COALESCE(`_removed`.`toDoProperties`.`processId`, `toDoProperties`.`processId`) as toDoProperties_processId, 
COALESCE(CAST(`_removed`.`toDoProperties`.`requiresOvernightCare` as STRING), CAST(`toDoProperties`.`requiresOvernightCare` as STRING)) as toDoProperties_requiresOvernightCare, 
COALESCE(`_removed`.`toDoProperties`.`unableToShareRoomReason`, `toDoProperties`.`unableToShareRoomReason`) as toDoProperties_unableToShareRoomReason, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, LENGTH(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`toDoProperties`.`dateOfSummaryChange`.`d_date`, LENGTH(`toDoProperties`.`dateOfSummaryChange`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`toDoProperties`.`dateOfSummaryChange`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`dateOfSummaryChange`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`toDoProperties`.`dateOfSummaryChange`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`dateOfSummaryChange`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`toDoProperties`.`dateOfSummaryChange`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`toDoProperties`.`dateOfSummaryChange`.`d_date`, 21, 3)) AS TIMESTAMP) END) as toDoProperties_dateOfSummaryChange_d_date, 
COALESCE(`_removed`.`toDoProperties`.`summaryUpdatedBy`, `toDoProperties`.`summaryUpdatedBy`) as toDoProperties_summaryUpdatedBy, 
COALESCE(CAST(`_removed`.`toDoProperties`.`unableToShareBedroomWithPartner` as STRING), CAST(`toDoProperties`.`unableToShareBedroomWithPartner` as STRING)) as toDoProperties_unableToShareBedroomWithPartner, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_extra_bedroom_due_to_disability
 src_agent_core_agenttodoarchive_agent_todo_archive_extra_bedroom_due_to_disability 
 where `_removed`.`toDoProperties`.`type`='EXTRA_BEDROOM_DUE_TO_DISABILITY' or `toDoProperties`.`type`='EXTRA_BEDROOM_DUE_TO_DISABILITY';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_CHECK_CALCULATION_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_check_calculation_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_check_calculation_properties(
`toDoProperties` STRUCT<`untrustedAutoCalcReasons`:ARRAY<STRING>
,`assessmentPeriodId`:STRING
,`calculationId`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`untrustedAutoCalcReasons`:ARRAY<STRING>
,`assessmentPeriodId`:STRING
,`calculationId`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_CHECK_CALCULATION_PROPERTIES;

CREATE TABLE agent_todo_archive_check_calculation_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`assessmentPeriodId`, `toDoProperties`.`assessmentPeriodId`) as toDoProperties_assessmentPeriodId, 
COALESCE(`removed_exploded_todoproperties_untrustedautocalcreasons`, `exploded_todoproperties_untrustedautocalcreasons`) as toDoProperties_untrustedAutoCalcReasons, 
COALESCE(`_removed`.`toDoProperties`.`calculationId`, `toDoProperties`.`calculationId`) as toDoProperties_calculationId, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_check_calculation_properties
 LATERAL VIEW OUTER EXPLODE(`toDoProperties`.`untrustedAutoCalcReasons`) view_exploded_todoproperties_untrustedautocalcreasons AS exploded_todoproperties_untrustedautocalcreasons 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`toDoProperties`.`untrustedAutoCalcReasons`) view_removed_exploded_todoproperties_untrustedautocalcreasons AS removed_exploded_todoproperties_untrustedautocalcreasons 
 
 where `_removed`.`toDoProperties`.`type`='CHECK_CALCULATION_PROPERTIES' or `toDoProperties`.`type`='CHECK_CALCULATION_PROPERTIES';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_REPORT_THIS_SELF_EMPLOYMENT;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_report_this_self_employment
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_report_this_self_employment(
`toDoProperties` STRUCT<`workAndEarningsDeclaration`:STRUCT<`childTaxCredit`:STRUCT<`dateStopped`:STRING
,`receivedInLast5Weeks`:BOOLEAN>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`earnings`:STRUCT<`amount`:STRING
,`hoursPerWeek`:STRING
,`paymentFrequency`:STRING>
,`effectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`employerAndMaternityAllowance`:STRUCT<`maternityAllowance`:BOOLEAN
,`maternityAllowanceAmount`:STRING
,`maternityAllowancePaymentFrequency`:STRING
,`otherEmployerPaymentFrequency`:STRING
,`otherPayFromEmployer`:BOOLEAN
,`otherPayFromEmployerAmount`:STRING>
,`futureEmployment`:STRUCT<`expectedEarnings`:STRING
,`hoursPerWeek`:STRING
,`paymentFrequency`:STRING
,`startDate`:STRING
,`startingEmployment`:BOOLEAN>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`workHistory`:STRUCT<`dateStoppedWorking`:STRING
,`stoppedWorkingInLast9Months`:BOOLEAN>
,`workingTaxCredit`:STRUCT<`dateStopped`:STRING
,`receivedInLast5Weeks`:BOOLEAN>
,`_version`:STRING
,`citizenId`:STRING
,`contractId`:STRING
,`declarationId`:STRING
,`employmentStatus`:STRING
,`expectedPreviousEarnings`:STRING
,`processId`:STRING
,`startingSelfEmployment`:BOOLEAN
,`working`:BOOLEAN
,`type`:STRING>
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`workAndEarningsDeclaration`:STRUCT<`childTaxCredit`:STRUCT<`dateStopped`:STRING
,`receivedInLast5Weeks`:BOOLEAN>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`earnings`:STRUCT<`amount`:STRING
,`hoursPerWeek`:STRING
,`paymentFrequency`:STRING>
,`effectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`employerAndMaternityAllowance`:STRUCT<`maternityAllowance`:BOOLEAN
,`maternityAllowanceAmount`:STRING
,`maternityAllowancePaymentFrequency`:STRING
,`otherEmployerPaymentFrequency`:STRING
,`otherPayFromEmployer`:BOOLEAN
,`otherPayFromEmployerAmount`:STRING>
,`futureEmployment`:STRUCT<`expectedEarnings`:STRING
,`hoursPerWeek`:STRING
,`paymentFrequency`:STRING
,`startDate`:STRING
,`startingEmployment`:BOOLEAN>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`workHistory`:STRUCT<`dateStoppedWorking`:STRING
,`stoppedWorkingInLast9Months`:BOOLEAN>
,`workingTaxCredit`:STRUCT<`dateStopped`:STRING
,`receivedInLast5Weeks`:BOOLEAN>
,`_version`:STRING
,`citizenId`:STRING
,`contractId`:STRING
,`declarationId`:STRING
,`employmentStatus`:STRING
,`expectedPreviousEarnings`:STRING
,`processId`:STRING
,`startingSelfEmployment`:BOOLEAN
,`working`:BOOLEAN
,`type`:STRING>
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_REPORT_THIS_SELF_EMPLOYMENT;

CREATE TABLE agent_todo_archive_report_this_self_employment STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`_version`, `toDoProperties`.`workAndEarningsDeclaration`.`_version`) as toDoProperties_workAndEarningsDeclaration__version, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`childTaxCredit`.`dateStopped`, `toDoProperties`.`workAndEarningsDeclaration`.`childTaxCredit`.`dateStopped`) as toDoProperties_workAndEarningsDeclaration_childTaxCredit_dateStopped, 
COALESCE(CAST(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`childTaxCredit`.`receivedInLast5Weeks` as STRING), CAST(`toDoProperties`.`workAndEarningsDeclaration`.`childTaxCredit`.`receivedInLast5Weeks` as STRING)) as toDoProperties_workAndEarningsDeclaration_childTaxCredit_receivedInLast5Weeks, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`citizenId`, `toDoProperties`.`workAndEarningsDeclaration`.`citizenId`) as toDoProperties_workAndEarningsDeclaration_citizenId, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`contractId`, `toDoProperties`.`workAndEarningsDeclaration`.`contractId`) as toDoProperties_workAndEarningsDeclaration_contractId, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`toDoProperties`.`workAndEarningsDeclaration`.`createdDateTime`.`d_date`, LENGTH(`toDoProperties`.`workAndEarningsDeclaration`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`toDoProperties`.`workAndEarningsDeclaration`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`workAndEarningsDeclaration`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`toDoProperties`.`workAndEarningsDeclaration`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`workAndEarningsDeclaration`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`toDoProperties`.`workAndEarningsDeclaration`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`toDoProperties`.`workAndEarningsDeclaration`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as toDoProperties_workAndEarningsDeclaration_createdDateTime_d_date, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`declarationId`, `toDoProperties`.`workAndEarningsDeclaration`.`declarationId`) as toDoProperties_workAndEarningsDeclaration_declarationId, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`earnings`.`amount`, `toDoProperties`.`workAndEarningsDeclaration`.`earnings`.`amount`) as toDoProperties_workAndEarningsDeclaration_earnings_amount, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`earnings`.`hoursPerWeek`, `toDoProperties`.`workAndEarningsDeclaration`.`earnings`.`hoursPerWeek`) as toDoProperties_workAndEarningsDeclaration_earnings_hoursPerWeek, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`earnings`.`paymentFrequency`, `toDoProperties`.`workAndEarningsDeclaration`.`earnings`.`paymentFrequency`) as toDoProperties_workAndEarningsDeclaration_earnings_paymentFrequency, 
COALESCE(CAST(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`effectiveDate`.`hasDate` as STRING), CAST(`toDoProperties`.`workAndEarningsDeclaration`.`effectiveDate`.`hasDate` as STRING)) as toDoProperties_workAndEarningsDeclaration_effectiveDate_hasDate, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`effectiveDate`.`knownDate`, `toDoProperties`.`workAndEarningsDeclaration`.`effectiveDate`.`knownDate`) as toDoProperties_workAndEarningsDeclaration_effectiveDate_knownDate, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`effectiveDate`.`type`, `toDoProperties`.`workAndEarningsDeclaration`.`effectiveDate`.`type`) as toDoProperties_workAndEarningsDeclaration_effectiveDate_type, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`effectiveDate`.`date`, `toDoProperties`.`workAndEarningsDeclaration`.`effectiveDate`.`date`) as toDoProperties_workAndEarningsDeclaration_effectiveDate_date, 
COALESCE(CAST(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`employerAndMaternityAllowance`.`maternityAllowance` as STRING), CAST(`toDoProperties`.`workAndEarningsDeclaration`.`employerAndMaternityAllowance`.`maternityAllowance` as STRING)) as toDoProperties_workAndEarningsDeclaration_employerAndMaternityAllowance_maternityAllowance, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`employerAndMaternityAllowance`.`maternityAllowanceAmount`, `toDoProperties`.`workAndEarningsDeclaration`.`employerAndMaternityAllowance`.`maternityAllowanceAmount`) as toDoProperties_workAndEarningsDeclaration_employerAndMaternityAllowance_maternityAllowanceAmount, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`employerAndMaternityAllowance`.`maternityAllowancePaymentFrequency`, `toDoProperties`.`workAndEarningsDeclaration`.`employerAndMaternityAllowance`.`maternityAllowancePaymentFrequency`) as toDoProperties_workAndEarningsDeclaration_employerAndMaternityAllowance_maternityAllowancePaymentFrequency, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`employerAndMaternityAllowance`.`otherEmployerPaymentFrequency`, `toDoProperties`.`workAndEarningsDeclaration`.`employerAndMaternityAllowance`.`otherEmployerPaymentFrequency`) as toDoProperties_workAndEarningsDeclaration_employerAndMaternityAllowance_otherEmployerPaymentFrequency, 
COALESCE(CAST(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`employerAndMaternityAllowance`.`otherPayFromEmployer` as STRING), CAST(`toDoProperties`.`workAndEarningsDeclaration`.`employerAndMaternityAllowance`.`otherPayFromEmployer` as STRING)) as toDoProperties_workAndEarningsDeclaration_employerAndMaternityAllowance_otherPayFromEmployer, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`employerAndMaternityAllowance`.`otherPayFromEmployerAmount`, `toDoProperties`.`workAndEarningsDeclaration`.`employerAndMaternityAllowance`.`otherPayFromEmployerAmount`) as toDoProperties_workAndEarningsDeclaration_employerAndMaternityAllowance_otherPayFromEmployerAmount, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`employmentStatus`, `toDoProperties`.`workAndEarningsDeclaration`.`employmentStatus`) as toDoProperties_workAndEarningsDeclaration_employmentStatus, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`expectedPreviousEarnings`, `toDoProperties`.`workAndEarningsDeclaration`.`expectedPreviousEarnings`) as toDoProperties_workAndEarningsDeclaration_expectedPreviousEarnings, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`futureEmployment`.`expectedEarnings`, `toDoProperties`.`workAndEarningsDeclaration`.`futureEmployment`.`expectedEarnings`) as toDoProperties_workAndEarningsDeclaration_futureEmployment_expectedEarnings, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`futureEmployment`.`hoursPerWeek`, `toDoProperties`.`workAndEarningsDeclaration`.`futureEmployment`.`hoursPerWeek`) as toDoProperties_workAndEarningsDeclaration_futureEmployment_hoursPerWeek, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`futureEmployment`.`paymentFrequency`, `toDoProperties`.`workAndEarningsDeclaration`.`futureEmployment`.`paymentFrequency`) as toDoProperties_workAndEarningsDeclaration_futureEmployment_paymentFrequency, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`futureEmployment`.`startDate`, `toDoProperties`.`workAndEarningsDeclaration`.`futureEmployment`.`startDate`) as toDoProperties_workAndEarningsDeclaration_futureEmployment_startDate, 
COALESCE(CAST(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`futureEmployment`.`startingEmployment` as STRING), CAST(`toDoProperties`.`workAndEarningsDeclaration`.`futureEmployment`.`startingEmployment` as STRING)) as toDoProperties_workAndEarningsDeclaration_futureEmployment_startingEmployment, 
COALESCE(CAST(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`paymentEffectiveDate`.`hasDate` as STRING), CAST(`toDoProperties`.`workAndEarningsDeclaration`.`paymentEffectiveDate`.`hasDate` as STRING)) as toDoProperties_workAndEarningsDeclaration_paymentEffectiveDate_hasDate, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`paymentEffectiveDate`.`knownDate`, `toDoProperties`.`workAndEarningsDeclaration`.`paymentEffectiveDate`.`knownDate`) as toDoProperties_workAndEarningsDeclaration_paymentEffectiveDate_knownDate, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`paymentEffectiveDate`.`type`, `toDoProperties`.`workAndEarningsDeclaration`.`paymentEffectiveDate`.`type`) as toDoProperties_workAndEarningsDeclaration_paymentEffectiveDate_type, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`paymentEffectiveDate`.`date`, `toDoProperties`.`workAndEarningsDeclaration`.`paymentEffectiveDate`.`date`) as toDoProperties_workAndEarningsDeclaration_paymentEffectiveDate_date, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`processId`, `toDoProperties`.`workAndEarningsDeclaration`.`processId`) as toDoProperties_workAndEarningsDeclaration_processId, 
COALESCE(CAST(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`startingSelfEmployment` as STRING), CAST(`toDoProperties`.`workAndEarningsDeclaration`.`startingSelfEmployment` as STRING)) as toDoProperties_workAndEarningsDeclaration_startingSelfEmployment, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`workHistory`.`dateStoppedWorking`, `toDoProperties`.`workAndEarningsDeclaration`.`workHistory`.`dateStoppedWorking`) as toDoProperties_workAndEarningsDeclaration_workHistory_dateStoppedWorking, 
COALESCE(CAST(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`workHistory`.`stoppedWorkingInLast9Months` as STRING), CAST(`toDoProperties`.`workAndEarningsDeclaration`.`workHistory`.`stoppedWorkingInLast9Months` as STRING)) as toDoProperties_workAndEarningsDeclaration_workHistory_stoppedWorkingInLast9Months, 
COALESCE(CAST(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`working` as STRING), CAST(`toDoProperties`.`workAndEarningsDeclaration`.`working` as STRING)) as toDoProperties_workAndEarningsDeclaration_working, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`workingTaxCredit`.`dateStopped`, `toDoProperties`.`workAndEarningsDeclaration`.`workingTaxCredit`.`dateStopped`) as toDoProperties_workAndEarningsDeclaration_workingTaxCredit_dateStopped, 
COALESCE(CAST(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`workingTaxCredit`.`receivedInLast5Weeks` as STRING), CAST(`toDoProperties`.`workAndEarningsDeclaration`.`workingTaxCredit`.`receivedInLast5Weeks` as STRING)) as toDoProperties_workAndEarningsDeclaration_workingTaxCredit_receivedInLast5Weeks, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsDeclaration`.`type`, `toDoProperties`.`workAndEarningsDeclaration`.`type`) as toDoProperties_workAndEarningsDeclaration_type, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_report_this_self_employment
 src_agent_core_agenttodoarchive_agent_todo_archive_report_this_self_employment 
 where `_removed`.`toDoProperties`.`type`='REPORT_THIS_SELF_EMPLOYMENT' or `toDoProperties`.`type`='REPORT_THIS_SELF_EMPLOYMENT';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_STARTED_CARING;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_started_caring
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_started_caring(
`toDoProperties` STRUCT<`carerSummary`:STRUCT<`caringCircumstancesSummary`:STRUCT<`caringForSomeone`:BOOLEAN
,`personReceivesBenefit`:BOOLEAN>
,`claimantDeclaredChanges`:STRUCT<`d_date`:STRING>
,`dateOfChange`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`otherCaringResponsibilitiesSummary`:STRUCT<`caringForSomeoneElse`:BOOLEAN
,`personReceivesBenefit`:BOOLEAN>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`stoppedCaringCircumstancesSummary`:STRUCT<`dateStoppedCaring`:STRING
,`dueToDeath`:BOOLEAN>
,`timeOffCircumstancesSummary`:STRUCT<`endDate`:STRING
,`startDate`:STRING>
,`whoYouCareForCircumstancesSummary`:STRUCT<`addressNumber`:STRING
,`dateOfBirth`:STRING
,`firstName`:STRING
,`lastName`:STRING
,`middleName`:STRING
,`postcode`:STRING
,`relationship`:STRING
,`townCity`:STRING>
,`claimantId`:STRING
,`contractId`:STRING
,`moreThan35Hours`:BOOLEAN
,`name`:STRING
,`processId`:STRING
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`carerSummary`:STRUCT<`caringCircumstancesSummary`:STRUCT<`caringForSomeone`:BOOLEAN
,`personReceivesBenefit`:BOOLEAN>
,`claimantDeclaredChanges`:STRUCT<`d_date`:STRING>
,`dateOfChange`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`otherCaringResponsibilitiesSummary`:STRUCT<`caringForSomeoneElse`:BOOLEAN
,`personReceivesBenefit`:BOOLEAN>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`stoppedCaringCircumstancesSummary`:STRUCT<`dateStoppedCaring`:STRING
,`dueToDeath`:BOOLEAN>
,`timeOffCircumstancesSummary`:STRUCT<`endDate`:STRING
,`startDate`:STRING>
,`whoYouCareForCircumstancesSummary`:STRUCT<`addressNumber`:STRING
,`dateOfBirth`:STRING
,`firstName`:STRING
,`lastName`:STRING
,`middleName`:STRING
,`postcode`:STRING
,`relationship`:STRING
,`townCity`:STRING>
,`claimantId`:STRING
,`contractId`:STRING
,`moreThan35Hours`:BOOLEAN
,`name`:STRING
,`processId`:STRING
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_STARTED_CARING;

CREATE TABLE agent_todo_archive_started_caring STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(CAST(`_removed`.`toDoProperties`.`carerSummary`.`caringCircumstancesSummary`.`caringForSomeone` as STRING), CAST(`toDoProperties`.`carerSummary`.`caringCircumstancesSummary`.`caringForSomeone` as STRING)) as toDoProperties_carerSummary_caringCircumstancesSummary_caringForSomeone, 
COALESCE(CAST(`_removed`.`toDoProperties`.`carerSummary`.`caringCircumstancesSummary`.`personReceivesBenefit` as STRING), CAST(`toDoProperties`.`carerSummary`.`caringCircumstancesSummary`.`personReceivesBenefit` as STRING)) as toDoProperties_carerSummary_caringCircumstancesSummary_personReceivesBenefit, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`toDoProperties`.`carerSummary`.`claimantDeclaredChanges`.`d_date`, LENGTH(`_removed`.`toDoProperties`.`carerSummary`.`claimantDeclaredChanges`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`carerSummary`.`claimantDeclaredChanges`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`carerSummary`.`claimantDeclaredChanges`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`carerSummary`.`claimantDeclaredChanges`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`carerSummary`.`claimantDeclaredChanges`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`toDoProperties`.`carerSummary`.`claimantDeclaredChanges`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`toDoProperties`.`carerSummary`.`claimantDeclaredChanges`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`toDoProperties`.`carerSummary`.`claimantDeclaredChanges`.`d_date`, LENGTH(`toDoProperties`.`carerSummary`.`claimantDeclaredChanges`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`toDoProperties`.`carerSummary`.`claimantDeclaredChanges`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`carerSummary`.`claimantDeclaredChanges`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`toDoProperties`.`carerSummary`.`claimantDeclaredChanges`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`carerSummary`.`claimantDeclaredChanges`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`toDoProperties`.`carerSummary`.`claimantDeclaredChanges`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`toDoProperties`.`carerSummary`.`claimantDeclaredChanges`.`d_date`, 21, 3)) AS TIMESTAMP) END) as toDoProperties_carerSummary_claimantDeclaredChanges_d_date, 
COALESCE(`_removed`.`toDoProperties`.`carerSummary`.`claimantId`, `toDoProperties`.`carerSummary`.`claimantId`) as toDoProperties_carerSummary_claimantId, 
COALESCE(`_removed`.`toDoProperties`.`carerSummary`.`contractId`, `toDoProperties`.`carerSummary`.`contractId`) as toDoProperties_carerSummary_contractId, 
COALESCE(CAST(`_removed`.`toDoProperties`.`carerSummary`.`dateOfChange`.`hasDate` as STRING), CAST(`toDoProperties`.`carerSummary`.`dateOfChange`.`hasDate` as STRING)) as toDoProperties_carerSummary_dateOfChange_hasDate, 
COALESCE(`_removed`.`toDoProperties`.`carerSummary`.`dateOfChange`.`knownDate`, `toDoProperties`.`carerSummary`.`dateOfChange`.`knownDate`) as toDoProperties_carerSummary_dateOfChange_knownDate, 
COALESCE(`_removed`.`toDoProperties`.`carerSummary`.`dateOfChange`.`type`, `toDoProperties`.`carerSummary`.`dateOfChange`.`type`) as toDoProperties_carerSummary_dateOfChange_type, 
COALESCE(`_removed`.`toDoProperties`.`carerSummary`.`dateOfChange`.`date`, `toDoProperties`.`carerSummary`.`dateOfChange`.`date`) as toDoProperties_carerSummary_dateOfChange_date, 
COALESCE(CAST(`_removed`.`toDoProperties`.`carerSummary`.`moreThan35Hours` as STRING), CAST(`toDoProperties`.`carerSummary`.`moreThan35Hours` as STRING)) as toDoProperties_carerSummary_moreThan35Hours, 
COALESCE(`_removed`.`toDoProperties`.`carerSummary`.`name`, `toDoProperties`.`carerSummary`.`name`) as toDoProperties_carerSummary_name, 
COALESCE(CAST(`_removed`.`toDoProperties`.`carerSummary`.`otherCaringResponsibilitiesSummary`.`caringForSomeoneElse` as STRING), CAST(`toDoProperties`.`carerSummary`.`otherCaringResponsibilitiesSummary`.`caringForSomeoneElse` as STRING)) as toDoProperties_carerSummary_otherCaringResponsibilitiesSummary_caringForSomeoneElse, 
COALESCE(CAST(`_removed`.`toDoProperties`.`carerSummary`.`otherCaringResponsibilitiesSummary`.`personReceivesBenefit` as STRING), CAST(`toDoProperties`.`carerSummary`.`otherCaringResponsibilitiesSummary`.`personReceivesBenefit` as STRING)) as toDoProperties_carerSummary_otherCaringResponsibilitiesSummary_personReceivesBenefit, 
COALESCE(CAST(`_removed`.`toDoProperties`.`carerSummary`.`paymentEffectiveDate`.`hasDate` as STRING), CAST(`toDoProperties`.`carerSummary`.`paymentEffectiveDate`.`hasDate` as STRING)) as toDoProperties_carerSummary_paymentEffectiveDate_hasDate, 
COALESCE(`_removed`.`toDoProperties`.`carerSummary`.`paymentEffectiveDate`.`knownDate`, `toDoProperties`.`carerSummary`.`paymentEffectiveDate`.`knownDate`) as toDoProperties_carerSummary_paymentEffectiveDate_knownDate, 
COALESCE(`_removed`.`toDoProperties`.`carerSummary`.`paymentEffectiveDate`.`type`, `toDoProperties`.`carerSummary`.`paymentEffectiveDate`.`type`) as toDoProperties_carerSummary_paymentEffectiveDate_type, 
COALESCE(`_removed`.`toDoProperties`.`carerSummary`.`paymentEffectiveDate`.`date`, `toDoProperties`.`carerSummary`.`paymentEffectiveDate`.`date`) as toDoProperties_carerSummary_paymentEffectiveDate_date, 
COALESCE(`_removed`.`toDoProperties`.`carerSummary`.`processId`, `toDoProperties`.`carerSummary`.`processId`) as toDoProperties_carerSummary_processId, 
COALESCE(`_removed`.`toDoProperties`.`carerSummary`.`stoppedCaringCircumstancesSummary`.`dateStoppedCaring`, `toDoProperties`.`carerSummary`.`stoppedCaringCircumstancesSummary`.`dateStoppedCaring`) as toDoProperties_carerSummary_stoppedCaringCircumstancesSummary_dateStoppedCaring, 
COALESCE(CAST(`_removed`.`toDoProperties`.`carerSummary`.`stoppedCaringCircumstancesSummary`.`dueToDeath` as STRING), CAST(`toDoProperties`.`carerSummary`.`stoppedCaringCircumstancesSummary`.`dueToDeath` as STRING)) as toDoProperties_carerSummary_stoppedCaringCircumstancesSummary_dueToDeath, 
COALESCE(`_removed`.`toDoProperties`.`carerSummary`.`timeOffCircumstancesSummary`.`endDate`, `toDoProperties`.`carerSummary`.`timeOffCircumstancesSummary`.`endDate`) as toDoProperties_carerSummary_timeOffCircumstancesSummary_endDate, 
COALESCE(`_removed`.`toDoProperties`.`carerSummary`.`timeOffCircumstancesSummary`.`startDate`, `toDoProperties`.`carerSummary`.`timeOffCircumstancesSummary`.`startDate`) as toDoProperties_carerSummary_timeOffCircumstancesSummary_startDate, 
COALESCE(`_removed`.`toDoProperties`.`carerSummary`.`whoYouCareForCircumstancesSummary`.`addressNumber`, `toDoProperties`.`carerSummary`.`whoYouCareForCircumstancesSummary`.`addressNumber`) as toDoProperties_carerSummary_whoYouCareForCircumstancesSummary_addressNumber, 
COALESCE(`_removed`.`toDoProperties`.`carerSummary`.`whoYouCareForCircumstancesSummary`.`dateOfBirth`, `toDoProperties`.`carerSummary`.`whoYouCareForCircumstancesSummary`.`dateOfBirth`) as toDoProperties_carerSummary_whoYouCareForCircumstancesSummary_dateOfBirth, 
COALESCE(`_removed`.`toDoProperties`.`carerSummary`.`whoYouCareForCircumstancesSummary`.`firstName`, `toDoProperties`.`carerSummary`.`whoYouCareForCircumstancesSummary`.`firstName`) as toDoProperties_carerSummary_whoYouCareForCircumstancesSummary_firstName, 
COALESCE(`_removed`.`toDoProperties`.`carerSummary`.`whoYouCareForCircumstancesSummary`.`lastName`, `toDoProperties`.`carerSummary`.`whoYouCareForCircumstancesSummary`.`lastName`) as toDoProperties_carerSummary_whoYouCareForCircumstancesSummary_lastName, 
COALESCE(`_removed`.`toDoProperties`.`carerSummary`.`whoYouCareForCircumstancesSummary`.`middleName`, `toDoProperties`.`carerSummary`.`whoYouCareForCircumstancesSummary`.`middleName`) as toDoProperties_carerSummary_whoYouCareForCircumstancesSummary_middleName, 
COALESCE(`_removed`.`toDoProperties`.`carerSummary`.`whoYouCareForCircumstancesSummary`.`postcode`, `toDoProperties`.`carerSummary`.`whoYouCareForCircumstancesSummary`.`postcode`) as toDoProperties_carerSummary_whoYouCareForCircumstancesSummary_postcode, 
COALESCE(`_removed`.`toDoProperties`.`carerSummary`.`whoYouCareForCircumstancesSummary`.`relationship`, `toDoProperties`.`carerSummary`.`whoYouCareForCircumstancesSummary`.`relationship`) as toDoProperties_carerSummary_whoYouCareForCircumstancesSummary_relationship, 
COALESCE(`_removed`.`toDoProperties`.`carerSummary`.`whoYouCareForCircumstancesSummary`.`townCity`, `toDoProperties`.`carerSummary`.`whoYouCareForCircumstancesSummary`.`townCity`) as toDoProperties_carerSummary_whoYouCareForCircumstancesSummary_townCity, 
COALESCE(CAST(`_removed`.`toDoProperties`.`carerSummary`.`confirmationRequired` as STRING), CAST(`toDoProperties`.`carerSummary`.`confirmationRequired` as STRING)) as toDoProperties_carerSummary_confirmationRequired, 
COALESCE(CAST(`_removed`.`toDoProperties`.`carerSummary`.`hideDetailsForPartnerDeclaration` as STRING), CAST(`toDoProperties`.`carerSummary`.`hideDetailsForPartnerDeclaration` as STRING)) as toDoProperties_carerSummary_hideDetailsForPartnerDeclaration, 
COALESCE(CAST(`_removed`.`toDoProperties`.`carerSummary`.`perClaimant` as STRING), CAST(`toDoProperties`.`carerSummary`.`perClaimant` as STRING)) as toDoProperties_carerSummary_perClaimant, 
COALESCE(`_removed`.`toDoProperties`.`carerSummary`.`type`, `toDoProperties`.`carerSummary`.`type`) as toDoProperties_carerSummary_type, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_started_caring
 src_agent_core_agenttodoarchive_agent_todo_archive_started_caring 
 where `_removed`.`toDoProperties`.`type`='STARTED_CARING' or `toDoProperties`.`type`='STARTED_CARING';


!echo ------------------------;
!echo ------------------------ todo_PROVIDE_FIT_NOTE_REMINDER;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_todo_todo_provide_fit_note_reminder
;

CREATE EXTERNAL TABLE src_core_todo_todo_provide_fit_note_reminder(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`properties` STRUCT<`endDate`:STRING
,`fitNoteId`:STRING
,`periodOfSicknessId`:STRING
,`startDate`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`properties`:STRUCT<`endDate`:STRING
,`fitNoteId`:STRING
,`periodOfSicknessId`:STRING
,`startDate`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/toDo';

DROP TABLE IF EXISTS todo_PROVIDE_FIT_NOTE_REMINDER;

CREATE TABLE todo_provide_fit_note_reminder STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`properties`.`endDate`, `properties`.`endDate`) as properties_endDate, 
COALESCE(`_removed`.`properties`.`fitNoteId`, `properties`.`fitNoteId`) as properties_fitNoteId, 
COALESCE(`_removed`.`properties`.`periodOfSicknessId`, `properties`.`periodOfSicknessId`) as properties_periodOfSicknessId, 
COALESCE(`_removed`.`properties`.`startDate`, `properties`.`startDate`) as properties_startDate, 
COALESCE(`_removed`.`properties`.`type`, `properties`.`type`) as properties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_core_todo_todo_provide_fit_note_reminder
 src_core_todo_todo_provide_fit_note_reminder 
 where `_removed`.`properties`.`type`='PROVIDE_FIT_NOTE_REMINDER' or `properties`.`type`='PROVIDE_FIT_NOTE_REMINDER';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_NEW_RELATIONSHIP;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_new_relationship
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_new_relationship(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`message`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`message`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_NEW_RELATIONSHIP;

CREATE TABLE agent_todo_archive_new_relationship STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`message`, `toDoProperties`.`message`) as toDoProperties_message, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_new_relationship
 src_agent_core_agenttodoarchive_agent_todo_archive_new_relationship 
 where `_removed`.`toDoProperties`.`type`='NEW_RELATIONSHIP' or `toDoProperties`.`type`='NEW_RELATIONSHIP';


!echo ------------------------;
!echo ------------------------ journal_ProvideProofOfYourChildcareProviderJournalEntry;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_journal_journal_provideproofofyourchildcareproviderjournalentry
;

CREATE EXTERNAL TABLE src_core_journal_journal_provideproofofyourchildcareproviderjournalentry(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`journalEntryProperties` STRUCT<`claimantAttachmentUploadId`:STRING
,`submitProofOption`:STRING
,`type`:STRING>
,`_id` STRUCT<`journalId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`journalEntryProperties`:STRUCT<`claimantAttachmentUploadId`:STRING
,`submitProofOption`:STRING
,`type`:STRING>
,`_id`:STRUCT<`journalId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/journal';

DROP TABLE IF EXISTS journal_ProvideProofOfYourChildcareProviderJournalEntry;

CREATE TABLE journal_provideproofofyourchildcareproviderjournalentry STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`journalEntryProperties`.`claimantAttachmentUploadId`, `journalEntryProperties`.`claimantAttachmentUploadId`) as journalEntryProperties_claimantAttachmentUploadId, 
COALESCE(`_removed`.`journalEntryProperties`.`submitProofOption`, `journalEntryProperties`.`submitProofOption`) as journalEntryProperties_submitProofOption, 
COALESCE(`_removed`.`journalEntryProperties`.`type`, `journalEntryProperties`.`type`) as journalEntryProperties_type, 
COALESCE(`_removed`.`_id`.`journalId`, `_id`.`journalId`) as id FROM src_core_journal_journal_provideproofofyourchildcareproviderjournalentry
 src_core_journal_journal_provideproofofyourchildcareproviderjournalentry 
 where `_removed`.`journalEntryProperties`.`type`='ProvideProofOfYourChildcareProviderJournalEntry' or `journalEntryProperties`.`type`='ProvideProofOfYourChildcareProviderJournalEntry';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_DATE_OF_BIRTH_SUMMARY;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_date_of_birth_summary
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_date_of_birth_summary(
`toDoProperties` STRUCT<`dateOfBirthSummary`:STRUCT<`effectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`contractId`:STRING
,`processId`:STRING
,`claimantId`:STRING
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`dateOfBirthSummary`:STRUCT<`effectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`contractId`:STRING
,`processId`:STRING
,`claimantId`:STRING
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_DATE_OF_BIRTH_SUMMARY;

CREATE TABLE agent_todo_archive_date_of_birth_summary STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`dateOfBirthSummary`.`contractId`, `toDoProperties`.`dateOfBirthSummary`.`contractId`) as toDoProperties_dateOfBirthSummary_contractId, 
COALESCE(CAST(`_removed`.`toDoProperties`.`dateOfBirthSummary`.`effectiveDate`.`hasDate` as STRING), CAST(`toDoProperties`.`dateOfBirthSummary`.`effectiveDate`.`hasDate` as STRING)) as toDoProperties_dateOfBirthSummary_effectiveDate_hasDate, 
COALESCE(`_removed`.`toDoProperties`.`dateOfBirthSummary`.`effectiveDate`.`knownDate`, `toDoProperties`.`dateOfBirthSummary`.`effectiveDate`.`knownDate`) as toDoProperties_dateOfBirthSummary_effectiveDate_knownDate, 
COALESCE(`_removed`.`toDoProperties`.`dateOfBirthSummary`.`effectiveDate`.`type`, `toDoProperties`.`dateOfBirthSummary`.`effectiveDate`.`type`) as toDoProperties_dateOfBirthSummary_effectiveDate_type, 
COALESCE(`_removed`.`toDoProperties`.`dateOfBirthSummary`.`effectiveDate`.`date`, `toDoProperties`.`dateOfBirthSummary`.`effectiveDate`.`date`) as toDoProperties_dateOfBirthSummary_effectiveDate_date, 
COALESCE(CAST(`_removed`.`toDoProperties`.`dateOfBirthSummary`.`paymentEffectiveDate`.`hasDate` as STRING), CAST(`toDoProperties`.`dateOfBirthSummary`.`paymentEffectiveDate`.`hasDate` as STRING)) as toDoProperties_dateOfBirthSummary_paymentEffectiveDate_hasDate, 
COALESCE(`_removed`.`toDoProperties`.`dateOfBirthSummary`.`paymentEffectiveDate`.`knownDate`, `toDoProperties`.`dateOfBirthSummary`.`paymentEffectiveDate`.`knownDate`) as toDoProperties_dateOfBirthSummary_paymentEffectiveDate_knownDate, 
COALESCE(`_removed`.`toDoProperties`.`dateOfBirthSummary`.`paymentEffectiveDate`.`type`, `toDoProperties`.`dateOfBirthSummary`.`paymentEffectiveDate`.`type`) as toDoProperties_dateOfBirthSummary_paymentEffectiveDate_type, 
COALESCE(`_removed`.`toDoProperties`.`dateOfBirthSummary`.`paymentEffectiveDate`.`date`, `toDoProperties`.`dateOfBirthSummary`.`paymentEffectiveDate`.`date`) as toDoProperties_dateOfBirthSummary_paymentEffectiveDate_date, 
COALESCE(`_removed`.`toDoProperties`.`dateOfBirthSummary`.`processId`, `toDoProperties`.`dateOfBirthSummary`.`processId`) as toDoProperties_dateOfBirthSummary_processId, 
COALESCE(`_removed`.`toDoProperties`.`dateOfBirthSummary`.`claimantId`, `toDoProperties`.`dateOfBirthSummary`.`claimantId`) as toDoProperties_dateOfBirthSummary_claimantId, 
COALESCE(CAST(`_removed`.`toDoProperties`.`dateOfBirthSummary`.`confirmationRequired` as STRING), CAST(`toDoProperties`.`dateOfBirthSummary`.`confirmationRequired` as STRING)) as toDoProperties_dateOfBirthSummary_confirmationRequired, 
COALESCE(CAST(`_removed`.`toDoProperties`.`dateOfBirthSummary`.`hideDetailsForPartnerDeclaration` as STRING), CAST(`toDoProperties`.`dateOfBirthSummary`.`hideDetailsForPartnerDeclaration` as STRING)) as toDoProperties_dateOfBirthSummary_hideDetailsForPartnerDeclaration, 
COALESCE(CAST(`_removed`.`toDoProperties`.`dateOfBirthSummary`.`perClaimant` as STRING), CAST(`toDoProperties`.`dateOfBirthSummary`.`perClaimant` as STRING)) as toDoProperties_dateOfBirthSummary_perClaimant, 
COALESCE(`_removed`.`toDoProperties`.`dateOfBirthSummary`.`type`, `toDoProperties`.`dateOfBirthSummary`.`type`) as toDoProperties_dateOfBirthSummary_type, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_date_of_birth_summary
 src_agent_core_agenttodoarchive_agent_todo_archive_date_of_birth_summary 
 where `_removed`.`toDoProperties`.`type`='DATE_OF_BIRTH_SUMMARY' or `toDoProperties`.`type`='DATE_OF_BIRTH_SUMMARY';


!echo ------------------------;
!echo ------------------------ agent_todo_REVIEW_SANCTIONS_TODO;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_review_sanctions_todo
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_review_sanctions_todo(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`reviewEndDate`:STRING
,`reviewStartDate`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`reviewEndDate`:STRING
,`reviewStartDate`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_REVIEW_SANCTIONS_TODO;

CREATE TABLE agent_todo_review_sanctions_todo STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`reviewEndDate`, `toDoProperties`.`reviewEndDate`) as toDoProperties_reviewEndDate, 
COALESCE(`_removed`.`toDoProperties`.`reviewStartDate`, `toDoProperties`.`reviewStartDate`) as toDoProperties_reviewStartDate, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_review_sanctions_todo
 src_agent_core_agenttodo_agent_todo_review_sanctions_todo 
 where `_removed`.`toDoProperties`.`type`='REVIEW_SANCTIONS_TODO' or `toDoProperties`.`type`='REVIEW_SANCTIONS_TODO';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_WORK_ALLOWANCE_CHANGES_CONTACT_CLAIMANT;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_work_allowance_changes_contact_claimant
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_work_allowance_changes_contact_claimant(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`allowance`:STRING
,`totalEarnings`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`allowance`:STRING
,`totalEarnings`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_WORK_ALLOWANCE_CHANGES_CONTACT_CLAIMANT;

CREATE TABLE agent_todo_archive_work_allowance_changes_contact_claimant STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`allowance`, `toDoProperties`.`allowance`) as toDoProperties_allowance, 
COALESCE(`_removed`.`toDoProperties`.`totalEarnings`, `toDoProperties`.`totalEarnings`) as toDoProperties_totalEarnings, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_work_allowance_changes_contact_claimant
 src_agent_core_agenttodoarchive_agent_todo_archive_work_allowance_changes_contact_claimant 
 where `_removed`.`toDoProperties`.`type`='WORK_ALLOWANCE_CHANGES_CONTACT_CLAIMANT' or `toDoProperties`.`type`='WORK_ALLOWANCE_CHANGES_CONTACT_CLAIMANT';


!echo ------------------------;
!echo ------------------------ agent_todo_GENERATE_STATEMENT;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_generate_statement
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_generate_statement(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`assessmentPeriodId`:STRING
,`calculationAttachmentId`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`assessmentPeriodId`:STRING
,`calculationAttachmentId`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_GENERATE_STATEMENT;

CREATE TABLE agent_todo_generate_statement STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`assessmentPeriodId`, `toDoProperties`.`assessmentPeriodId`) as toDoProperties_assessmentPeriodId, 
COALESCE(`_removed`.`toDoProperties`.`calculationAttachmentId`, `toDoProperties`.`calculationAttachmentId`) as toDoProperties_calculationAttachmentId, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_generate_statement
 src_agent_core_agenttodo_agent_todo_generate_statement 
 where `_removed`.`toDoProperties`.`type`='GENERATE_STATEMENT' or `toDoProperties`.`type`='GENERATE_STATEMENT';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_VERIFY_CHILDCARE;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_verify_childcare
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_verify_childcare(
`toDoProperties` STRUCT<`dateOfSummaryChange`:STRUCT<`d_date`:STRING>
,`claimantProvideProofToDoId`:STRING
,`declarationToVerifyId`:STRING
,`processId`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`dateOfSummaryChange`:STRUCT<`d_date`:STRING>
,`claimantProvideProofToDoId`:STRING
,`declarationToVerifyId`:STRING
,`processId`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_VERIFY_CHILDCARE;

CREATE TABLE agent_todo_archive_verify_childcare STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`claimantProvideProofToDoId`, `toDoProperties`.`claimantProvideProofToDoId`) as toDoProperties_claimantProvideProofToDoId, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, LENGTH(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`toDoProperties`.`dateOfSummaryChange`.`d_date`, LENGTH(`toDoProperties`.`dateOfSummaryChange`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`toDoProperties`.`dateOfSummaryChange`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`dateOfSummaryChange`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`toDoProperties`.`dateOfSummaryChange`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`dateOfSummaryChange`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`toDoProperties`.`dateOfSummaryChange`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`toDoProperties`.`dateOfSummaryChange`.`d_date`, 21, 3)) AS TIMESTAMP) END) as toDoProperties_dateOfSummaryChange_d_date, 
COALESCE(`_removed`.`toDoProperties`.`declarationToVerifyId`, `toDoProperties`.`declarationToVerifyId`) as toDoProperties_declarationToVerifyId, 
COALESCE(`_removed`.`toDoProperties`.`processId`, `toDoProperties`.`processId`) as toDoProperties_processId, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_verify_childcare
 src_agent_core_agenttodoarchive_agent_todo_archive_verify_childcare 
 where `_removed`.`toDoProperties`.`type`='VERIFY_CHILDCARE' or `toDoProperties`.`type`='VERIFY_CHILDCARE';


!echo ------------------------;
!echo ------------------------ agent_todo_STARTING_SELF_EMPLOYMENT;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_starting_self_employment
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_starting_self_employment(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`effectiveDate`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`effectiveDate`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_STARTING_SELF_EMPLOYMENT;

CREATE TABLE agent_todo_starting_self_employment STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`effectiveDate`, `toDoProperties`.`effectiveDate`) as toDoProperties_effectiveDate, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_starting_self_employment
 src_agent_core_agenttodo_agent_todo_starting_self_employment 
 where `_removed`.`toDoProperties`.`type`='STARTING_SELF_EMPLOYMENT' or `toDoProperties`.`type`='STARTING_SELF_EMPLOYMENT';


!echo ------------------------;
!echo ------------------------ agent_todo_AGENT_GENERATED_TO_DO_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_agent_generated_to_do_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_agent_generated_to_do_properties(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`assessmentPeriodId`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`assessmentPeriodId`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_AGENT_GENERATED_TO_DO_PROPERTIES;

CREATE TABLE agent_todo_agent_generated_to_do_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`assessmentPeriodId`, `toDoProperties`.`assessmentPeriodId`) as toDoProperties_assessmentPeriodId, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_agent_generated_to_do_properties
 src_agent_core_agenttodo_agent_todo_agent_generated_to_do_properties 
 where `_removed`.`toDoProperties`.`type`='AGENT_GENERATED_TO_DO_PROPERTIES' or `toDoProperties`.`type`='AGENT_GENERATED_TO_DO_PROPERTIES';


!echo ------------------------;
!echo ------------------------ agent_todo_REVIEW_MINIMUM_INCOME_FLOOR_TO_DO_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_review_minimum_income_floor_to_do_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_review_minimum_income_floor_to_do_properties(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`reason`:STRING
,`reviewDate`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`reason`:STRING
,`reviewDate`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_REVIEW_MINIMUM_INCOME_FLOOR_TO_DO_PROPERTIES;

CREATE TABLE agent_todo_review_minimum_income_floor_to_do_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`reason`, `toDoProperties`.`reason`) as toDoProperties_reason, 
COALESCE(`_removed`.`toDoProperties`.`reviewDate`, `toDoProperties`.`reviewDate`) as toDoProperties_reviewDate, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_review_minimum_income_floor_to_do_properties
 src_agent_core_agenttodo_agent_todo_review_minimum_income_floor_to_do_properties 
 where `_removed`.`toDoProperties`.`type`='REVIEW_MINIMUM_INCOME_FLOOR_TO_DO_PROPERTIES' or `toDoProperties`.`type`='REVIEW_MINIMUM_INCOME_FLOOR_TO_DO_PROPERTIES';


!echo ------------------------;
!echo ------------------------ todo_ANNUAL_VERIFICATION_TODO_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_todo_todo_annual_verification_todo_properties
;

CREATE EXTERNAL TABLE src_core_todo_todo_annual_verification_todo_properties(
`properties` STRUCT<`contractChanges`:ARRAY<STRING>
,`closeClaimByDate`:STRING
,`suspendPaymentByDate`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`properties`:STRUCT<`contractChanges`:ARRAY<STRING>
,`closeClaimByDate`:STRING
,`suspendPaymentByDate`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/toDo';

DROP TABLE IF EXISTS todo_ANNUAL_VERIFICATION_TODO_PROPERTIES;

CREATE TABLE todo_annual_verification_todo_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`properties`.`closeClaimByDate`, `properties`.`closeClaimByDate`) as properties_closeClaimByDate, 
COALESCE(`removed_exploded_properties_contractchanges`, `exploded_properties_contractchanges`) as properties_contractChanges, 
COALESCE(`_removed`.`properties`.`suspendPaymentByDate`, `properties`.`suspendPaymentByDate`) as properties_suspendPaymentByDate, 
COALESCE(`_removed`.`properties`.`type`, `properties`.`type`) as properties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_core_todo_todo_annual_verification_todo_properties
 LATERAL VIEW OUTER EXPLODE(`properties`.`contractChanges`) view_exploded_properties_contractchanges AS exploded_properties_contractchanges 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`properties`.`contractChanges`) view_removed_exploded_properties_contractchanges AS removed_exploded_properties_contractchanges 
 
 where `_removed`.`properties`.`type`='ANNUAL_VERIFICATION_TODO_PROPERTIES' or `properties`.`type`='ANNUAL_VERIFICATION_TODO_PROPERTIES';


!echo ------------------------;
!echo ------------------------ journal_TakingPartInANewServicePilotJournalEntry;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_journal_journal_takingpartinanewservicepilotjournalentry
;

CREATE EXTERNAL TABLE src_core_journal_journal_takingpartinanewservicepilotjournalentry(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`journalEntryProperties` STRUCT<`type`:STRING>
,`_id` STRUCT<`journalId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`journalEntryProperties`:STRUCT<`type`:STRING>
,`_id`:STRUCT<`journalId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/journal';

DROP TABLE IF EXISTS journal_TakingPartInANewServicePilotJournalEntry;

CREATE TABLE journal_takingpartinanewservicepilotjournalentry STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`journalEntryProperties`.`type`, `journalEntryProperties`.`type`) as journalEntryProperties_type, 
COALESCE(`_removed`.`_id`.`journalId`, `_id`.`journalId`) as id FROM src_core_journal_journal_takingpartinanewservicepilotjournalentry
 src_core_journal_journal_takingpartinanewservicepilotjournalentry 
 where `_removed`.`journalEntryProperties`.`type`='TakingPartInANewServicePilotJournalEntry' or `journalEntryProperties`.`type`='TakingPartInANewServicePilotJournalEntry';


!echo ------------------------;
!echo ------------------------ journal_ReviewUploadDocumentsJournalEntry;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_journal_journal_reviewuploaddocumentsjournalentry
;

CREATE EXTERNAL TABLE src_core_journal_journal_reviewuploaddocumentsjournalentry(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`journalEntryProperties` STRUCT<`claimantAttachmentUploadId`:STRING
,`claimantName`:STRING
,`feedback`:STRING
,`instructions`:STRING
,`type`:STRING>
,`_id` STRUCT<`journalId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`journalEntryProperties`:STRUCT<`claimantAttachmentUploadId`:STRING
,`claimantName`:STRING
,`feedback`:STRING
,`instructions`:STRING
,`type`:STRING>
,`_id`:STRUCT<`journalId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/journal';

DROP TABLE IF EXISTS journal_ReviewUploadDocumentsJournalEntry;

CREATE TABLE journal_reviewuploaddocumentsjournalentry STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`journalEntryProperties`.`claimantAttachmentUploadId`, `journalEntryProperties`.`claimantAttachmentUploadId`) as journalEntryProperties_claimantAttachmentUploadId, 
COALESCE(`_removed`.`journalEntryProperties`.`claimantName`, `journalEntryProperties`.`claimantName`) as journalEntryProperties_claimantName, 
COALESCE(`_removed`.`journalEntryProperties`.`feedback`, `journalEntryProperties`.`feedback`) as journalEntryProperties_feedback, 
COALESCE(`_removed`.`journalEntryProperties`.`instructions`, `journalEntryProperties`.`instructions`) as journalEntryProperties_instructions, 
COALESCE(`_removed`.`journalEntryProperties`.`type`, `journalEntryProperties`.`type`) as journalEntryProperties_type, 
COALESCE(`_removed`.`_id`.`journalId`, `_id`.`journalId`) as id FROM src_core_journal_journal_reviewuploaddocumentsjournalentry
 src_core_journal_journal_reviewuploaddocumentsjournalentry 
 where `_removed`.`journalEntryProperties`.`type`='ReviewUploadDocumentsJournalEntry' or `journalEntryProperties`.`type`='ReviewUploadDocumentsJournalEntry';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_UPDATE_CIS_AFTER_CHANGE_OF_CIRCS;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_update_cis_after_change_of_circs
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_update_cis_after_change_of_circs(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`createdByMigration`:BOOLEAN
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`createdByMigration`:BOOLEAN
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_UPDATE_CIS_AFTER_CHANGE_OF_CIRCS;

CREATE TABLE agent_todo_archive_update_cis_after_change_of_circs STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(CAST(`_removed`.`toDoProperties`.`createdByMigration` as STRING), CAST(`toDoProperties`.`createdByMigration` as STRING)) as toDoProperties_createdByMigration, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_update_cis_after_change_of_circs
 src_agent_core_agenttodoarchive_agent_todo_archive_update_cis_after_change_of_circs 
 where `_removed`.`toDoProperties`.`type`='UPDATE_CIS_AFTER_CHANGE_OF_CIRCS' or `toDoProperties`.`type`='UPDATE_CIS_AFTER_CHANGE_OF_CIRCS';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_BOOK_APPOINTMENT_WORK_GROUP_CHANGE;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_book_appointment_work_group_change
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_book_appointment_work_group_change(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`currentWorkgroup`:STRING
,`youngestChildAge`:STRING
,`youngestChildName`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`currentWorkgroup`:STRING
,`youngestChildAge`:STRING
,`youngestChildName`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_BOOK_APPOINTMENT_WORK_GROUP_CHANGE;

CREATE TABLE agent_todo_archive_book_appointment_work_group_change STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`currentWorkgroup`, `toDoProperties`.`currentWorkgroup`) as toDoProperties_currentWorkgroup, 
COALESCE(`_removed`.`toDoProperties`.`youngestChildAge`, `toDoProperties`.`youngestChildAge`) as toDoProperties_youngestChildAge, 
COALESCE(`_removed`.`toDoProperties`.`youngestChildName`, `toDoProperties`.`youngestChildName`) as toDoProperties_youngestChildName, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_book_appointment_work_group_change
 src_agent_core_agenttodoarchive_agent_todo_archive_book_appointment_work_group_change 
 where `_removed`.`toDoProperties`.`type`='BOOK_APPOINTMENT_WORK_GROUP_CHANGE' or `toDoProperties`.`type`='BOOK_APPOINTMENT_WORK_GROUP_CHANGE';


!echo ------------------------;
!echo ------------------------ agent_todo_WORK_AND_EARNINGS_SUMMARY;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_work_and_earnings_summary
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_work_and_earnings_summary(
`toDoProperties` STRUCT<`workAndEarningsSummary`:STRUCT<`dateOfChange`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`earnings`:STRUCT<`amount`:STRING
,`hoursPerWeek`:STRING
,`paymentFrequency`:STRING>
,`futureEmployment`:STRUCT<`expectedEarnings`:STRING
,`hoursPerWeek`:STRING
,`paymentFrequency`:STRING
,`startDate`:STRING
,`startingEmployment`:BOOLEAN>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`employerAndMaternityAllowanceSummary`:STRUCT<`maternityAllowance`:BOOLEAN
,`maternityAllowanceAmount`:STRING
,`maternityAllowancePaymentFrequency`:STRING
,`otherEmployerPaymentFrequency`:STRING
,`otherPayFromEmployer`:BOOLEAN
,`otherPayFromEmployerAmount`:STRING>
,`workStatusSummary`:STRUCT<`dateStoppedWorking`:STRING
,`stoppedWorkingInLast9Months`:BOOLEAN>
,`claimantId`:STRING
,`contractId`:STRING
,`employmentStatus`:STRING
,`expectedPreviousEarnings`:STRING
,`name`:STRING
,`processId`:STRING
,`startingSelfEmployment`:BOOLEAN
,`working`:BOOLEAN
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`workAndEarningsSummary`:STRUCT<`dateOfChange`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`earnings`:STRUCT<`amount`:STRING
,`hoursPerWeek`:STRING
,`paymentFrequency`:STRING>
,`futureEmployment`:STRUCT<`expectedEarnings`:STRING
,`hoursPerWeek`:STRING
,`paymentFrequency`:STRING
,`startDate`:STRING
,`startingEmployment`:BOOLEAN>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`employerAndMaternityAllowanceSummary`:STRUCT<`maternityAllowance`:BOOLEAN
,`maternityAllowanceAmount`:STRING
,`maternityAllowancePaymentFrequency`:STRING
,`otherEmployerPaymentFrequency`:STRING
,`otherPayFromEmployer`:BOOLEAN
,`otherPayFromEmployerAmount`:STRING>
,`workStatusSummary`:STRUCT<`dateStoppedWorking`:STRING
,`stoppedWorkingInLast9Months`:BOOLEAN>
,`claimantId`:STRING
,`contractId`:STRING
,`employmentStatus`:STRING
,`expectedPreviousEarnings`:STRING
,`name`:STRING
,`processId`:STRING
,`startingSelfEmployment`:BOOLEAN
,`working`:BOOLEAN
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_WORK_AND_EARNINGS_SUMMARY;

CREATE TABLE agent_todo_work_and_earnings_summary STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`claimantId`, `toDoProperties`.`workAndEarningsSummary`.`claimantId`) as toDoProperties_workAndEarningsSummary_claimantId, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`contractId`, `toDoProperties`.`workAndEarningsSummary`.`contractId`) as toDoProperties_workAndEarningsSummary_contractId, 
COALESCE(CAST(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`dateOfChange`.`hasDate` as STRING), CAST(`toDoProperties`.`workAndEarningsSummary`.`dateOfChange`.`hasDate` as STRING)) as toDoProperties_workAndEarningsSummary_dateOfChange_hasDate, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`dateOfChange`.`knownDate`, `toDoProperties`.`workAndEarningsSummary`.`dateOfChange`.`knownDate`) as toDoProperties_workAndEarningsSummary_dateOfChange_knownDate, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`dateOfChange`.`type`, `toDoProperties`.`workAndEarningsSummary`.`dateOfChange`.`type`) as toDoProperties_workAndEarningsSummary_dateOfChange_type, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`dateOfChange`.`date`, `toDoProperties`.`workAndEarningsSummary`.`dateOfChange`.`date`) as toDoProperties_workAndEarningsSummary_dateOfChange_date, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`earnings`.`amount`, `toDoProperties`.`workAndEarningsSummary`.`earnings`.`amount`) as toDoProperties_workAndEarningsSummary_earnings_amount, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`earnings`.`hoursPerWeek`, `toDoProperties`.`workAndEarningsSummary`.`earnings`.`hoursPerWeek`) as toDoProperties_workAndEarningsSummary_earnings_hoursPerWeek, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`earnings`.`paymentFrequency`, `toDoProperties`.`workAndEarningsSummary`.`earnings`.`paymentFrequency`) as toDoProperties_workAndEarningsSummary_earnings_paymentFrequency, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`employmentStatus`, `toDoProperties`.`workAndEarningsSummary`.`employmentStatus`) as toDoProperties_workAndEarningsSummary_employmentStatus, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`expectedPreviousEarnings`, `toDoProperties`.`workAndEarningsSummary`.`expectedPreviousEarnings`) as toDoProperties_workAndEarningsSummary_expectedPreviousEarnings, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`futureEmployment`.`expectedEarnings`, `toDoProperties`.`workAndEarningsSummary`.`futureEmployment`.`expectedEarnings`) as toDoProperties_workAndEarningsSummary_futureEmployment_expectedEarnings, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`futureEmployment`.`hoursPerWeek`, `toDoProperties`.`workAndEarningsSummary`.`futureEmployment`.`hoursPerWeek`) as toDoProperties_workAndEarningsSummary_futureEmployment_hoursPerWeek, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`futureEmployment`.`paymentFrequency`, `toDoProperties`.`workAndEarningsSummary`.`futureEmployment`.`paymentFrequency`) as toDoProperties_workAndEarningsSummary_futureEmployment_paymentFrequency, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`futureEmployment`.`startDate`, `toDoProperties`.`workAndEarningsSummary`.`futureEmployment`.`startDate`) as toDoProperties_workAndEarningsSummary_futureEmployment_startDate, 
COALESCE(CAST(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`futureEmployment`.`startingEmployment` as STRING), CAST(`toDoProperties`.`workAndEarningsSummary`.`futureEmployment`.`startingEmployment` as STRING)) as toDoProperties_workAndEarningsSummary_futureEmployment_startingEmployment, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`name`, `toDoProperties`.`workAndEarningsSummary`.`name`) as toDoProperties_workAndEarningsSummary_name, 
COALESCE(CAST(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`paymentEffectiveDate`.`hasDate` as STRING), CAST(`toDoProperties`.`workAndEarningsSummary`.`paymentEffectiveDate`.`hasDate` as STRING)) as toDoProperties_workAndEarningsSummary_paymentEffectiveDate_hasDate, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`paymentEffectiveDate`.`knownDate`, `toDoProperties`.`workAndEarningsSummary`.`paymentEffectiveDate`.`knownDate`) as toDoProperties_workAndEarningsSummary_paymentEffectiveDate_knownDate, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`paymentEffectiveDate`.`type`, `toDoProperties`.`workAndEarningsSummary`.`paymentEffectiveDate`.`type`) as toDoProperties_workAndEarningsSummary_paymentEffectiveDate_type, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`paymentEffectiveDate`.`date`, `toDoProperties`.`workAndEarningsSummary`.`paymentEffectiveDate`.`date`) as toDoProperties_workAndEarningsSummary_paymentEffectiveDate_date, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`processId`, `toDoProperties`.`workAndEarningsSummary`.`processId`) as toDoProperties_workAndEarningsSummary_processId, 
COALESCE(CAST(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`startingSelfEmployment` as STRING), CAST(`toDoProperties`.`workAndEarningsSummary`.`startingSelfEmployment` as STRING)) as toDoProperties_workAndEarningsSummary_startingSelfEmployment, 
COALESCE(CAST(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`working` as STRING), CAST(`toDoProperties`.`workAndEarningsSummary`.`working` as STRING)) as toDoProperties_workAndEarningsSummary_working, 
COALESCE(CAST(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`confirmationRequired` as STRING), CAST(`toDoProperties`.`workAndEarningsSummary`.`confirmationRequired` as STRING)) as toDoProperties_workAndEarningsSummary_confirmationRequired, 
COALESCE(CAST(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`employerAndMaternityAllowanceSummary`.`maternityAllowance` as STRING), CAST(`toDoProperties`.`workAndEarningsSummary`.`employerAndMaternityAllowanceSummary`.`maternityAllowance` as STRING)) as toDoProperties_workAndEarningsSummary_employerAndMaternityAllowanceSummary_maternityAllowance, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`employerAndMaternityAllowanceSummary`.`maternityAllowanceAmount`, `toDoProperties`.`workAndEarningsSummary`.`employerAndMaternityAllowanceSummary`.`maternityAllowanceAmount`) as toDoProperties_workAndEarningsSummary_employerAndMaternityAllowanceSummary_maternityAllowanceAmount, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`employerAndMaternityAllowanceSummary`.`maternityAllowancePaymentFrequency`, `toDoProperties`.`workAndEarningsSummary`.`employerAndMaternityAllowanceSummary`.`maternityAllowancePaymentFrequency`) as toDoProperties_workAndEarningsSummary_employerAndMaternityAllowanceSummary_maternityAllowancePaymentFrequency, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`employerAndMaternityAllowanceSummary`.`otherEmployerPaymentFrequency`, `toDoProperties`.`workAndEarningsSummary`.`employerAndMaternityAllowanceSummary`.`otherEmployerPaymentFrequency`) as toDoProperties_workAndEarningsSummary_employerAndMaternityAllowanceSummary_otherEmployerPaymentFrequency, 
COALESCE(CAST(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`employerAndMaternityAllowanceSummary`.`otherPayFromEmployer` as STRING), CAST(`toDoProperties`.`workAndEarningsSummary`.`employerAndMaternityAllowanceSummary`.`otherPayFromEmployer` as STRING)) as toDoProperties_workAndEarningsSummary_employerAndMaternityAllowanceSummary_otherPayFromEmployer, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`employerAndMaternityAllowanceSummary`.`otherPayFromEmployerAmount`, `toDoProperties`.`workAndEarningsSummary`.`employerAndMaternityAllowanceSummary`.`otherPayFromEmployerAmount`) as toDoProperties_workAndEarningsSummary_employerAndMaternityAllowanceSummary_otherPayFromEmployerAmount, 
COALESCE(CAST(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`hideDetailsForPartnerDeclaration` as STRING), CAST(`toDoProperties`.`workAndEarningsSummary`.`hideDetailsForPartnerDeclaration` as STRING)) as toDoProperties_workAndEarningsSummary_hideDetailsForPartnerDeclaration, 
COALESCE(CAST(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`perClaimant` as STRING), CAST(`toDoProperties`.`workAndEarningsSummary`.`perClaimant` as STRING)) as toDoProperties_workAndEarningsSummary_perClaimant, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`workStatusSummary`.`dateStoppedWorking`, `toDoProperties`.`workAndEarningsSummary`.`workStatusSummary`.`dateStoppedWorking`) as toDoProperties_workAndEarningsSummary_workStatusSummary_dateStoppedWorking, 
COALESCE(CAST(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`workStatusSummary`.`stoppedWorkingInLast9Months` as STRING), CAST(`toDoProperties`.`workAndEarningsSummary`.`workStatusSummary`.`stoppedWorkingInLast9Months` as STRING)) as toDoProperties_workAndEarningsSummary_workStatusSummary_stoppedWorkingInLast9Months, 
COALESCE(`_removed`.`toDoProperties`.`workAndEarningsSummary`.`type`, `toDoProperties`.`workAndEarningsSummary`.`type`) as toDoProperties_workAndEarningsSummary_type, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_work_and_earnings_summary
 src_agent_core_agenttodo_agent_todo_work_and_earnings_summary 
 where `_removed`.`toDoProperties`.`type`='WORK_AND_EARNINGS_SUMMARY' or `toDoProperties`.`type`='WORK_AND_EARNINGS_SUMMARY';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_REVIEW_MINIMUM_INCOME_FLOOR_TO_DO_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_review_minimum_income_floor_to_do_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_review_minimum_income_floor_to_do_properties(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`reason`:STRING
,`reviewDate`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`reason`:STRING
,`reviewDate`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_REVIEW_MINIMUM_INCOME_FLOOR_TO_DO_PROPERTIES;

CREATE TABLE agent_todo_archive_review_minimum_income_floor_to_do_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`reason`, `toDoProperties`.`reason`) as toDoProperties_reason, 
COALESCE(`_removed`.`toDoProperties`.`reviewDate`, `toDoProperties`.`reviewDate`) as toDoProperties_reviewDate, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_review_minimum_income_floor_to_do_properties
 src_agent_core_agenttodoarchive_agent_todo_archive_review_minimum_income_floor_to_do_properties 
 where `_removed`.`toDoProperties`.`type`='REVIEW_MINIMUM_INCOME_FLOOR_TO_DO_PROPERTIES' or `toDoProperties`.`type`='REVIEW_MINIMUM_INCOME_FLOOR_TO_DO_PROPERTIES';


!echo ------------------------;
!echo ------------------------ agent_todo_ASSESSMENT_PERIOD;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_assessment_period
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_assessment_period(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`assessmentPeriodId`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`assessmentPeriodId`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_ASSESSMENT_PERIOD;

CREATE TABLE agent_todo_assessment_period STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`assessmentPeriodId`, `toDoProperties`.`assessmentPeriodId`) as toDoProperties_assessmentPeriodId, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_assessment_period
 src_agent_core_agenttodo_agent_todo_assessment_period 
 where `_removed`.`toDoProperties`.`type`='ASSESSMENT_PERIOD' or `toDoProperties`.`type`='ASSESSMENT_PERIOD';


!echo ------------------------;
!echo ------------------------ agent_todo_VERIFY_FILE_UPLOADED_CHILDCARE;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_verify_file_uploaded_childcare
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_verify_file_uploaded_childcare(
`toDoProperties` STRUCT<`dateOfSummaryChange`:STRUCT<`d_date`:STRING>
,`claimantUploadDetailsIdList`:ARRAY<STRING>
,`claimantToDoDeadline`:STRING
,`declarationToVerifyId`:STRING
,`processId`:STRING
,`claimantProvideProofToDoId`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`dateOfSummaryChange`:STRUCT<`d_date`:STRING>
,`claimantUploadDetailsIdList`:ARRAY<STRING>
,`claimantToDoDeadline`:STRING
,`declarationToVerifyId`:STRING
,`processId`:STRING
,`claimantProvideProofToDoId`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_VERIFY_FILE_UPLOADED_CHILDCARE;

CREATE TABLE agent_todo_verify_file_uploaded_childcare STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`claimantToDoDeadline`, `toDoProperties`.`claimantToDoDeadline`) as toDoProperties_claimantToDoDeadline, 
COALESCE(`removed_exploded_todoproperties_claimantuploaddetailsidlist`, `exploded_todoproperties_claimantuploaddetailsidlist`) as toDoProperties_claimantUploadDetailsIdList, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, LENGTH(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`toDoProperties`.`dateOfSummaryChange`.`d_date`, LENGTH(`toDoProperties`.`dateOfSummaryChange`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`toDoProperties`.`dateOfSummaryChange`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`dateOfSummaryChange`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`toDoProperties`.`dateOfSummaryChange`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`dateOfSummaryChange`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`toDoProperties`.`dateOfSummaryChange`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`toDoProperties`.`dateOfSummaryChange`.`d_date`, 21, 3)) AS TIMESTAMP) END) as toDoProperties_dateOfSummaryChange_d_date, 
COALESCE(`_removed`.`toDoProperties`.`declarationToVerifyId`, `toDoProperties`.`declarationToVerifyId`) as toDoProperties_declarationToVerifyId, 
COALESCE(`_removed`.`toDoProperties`.`processId`, `toDoProperties`.`processId`) as toDoProperties_processId, 
COALESCE(`_removed`.`toDoProperties`.`claimantProvideProofToDoId`, `toDoProperties`.`claimantProvideProofToDoId`) as toDoProperties_claimantProvideProofToDoId, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_verify_file_uploaded_childcare
 LATERAL VIEW OUTER EXPLODE(`toDoProperties`.`claimantUploadDetailsIdList`) view_exploded_todoproperties_claimantuploaddetailsidlist AS exploded_todoproperties_claimantuploaddetailsidlist 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`toDoProperties`.`claimantUploadDetailsIdList`) view_removed_exploded_todoproperties_claimantuploaddetailsidlist AS removed_exploded_todoproperties_claimantuploaddetailsidlist 
 
 where `_removed`.`toDoProperties`.`type`='VERIFY_FILE_UPLOADED_CHILDCARE' or `toDoProperties`.`type`='VERIFY_FILE_UPLOADED_CHILDCARE';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_REVIEW_DEADLINE_TODO;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_review_deadline_todo
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_review_deadline_todo(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`claimantToDoId`:STRING
,`deadline`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`claimantToDoId`:STRING
,`deadline`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_REVIEW_DEADLINE_TODO;

CREATE TABLE agent_todo_archive_review_deadline_todo STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`claimantToDoId`, `toDoProperties`.`claimantToDoId`) as toDoProperties_claimantToDoId, 
COALESCE(`_removed`.`toDoProperties`.`deadline`, `toDoProperties`.`deadline`) as toDoProperties_deadline, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_review_deadline_todo
 src_agent_core_agenttodoarchive_agent_todo_archive_review_deadline_todo 
 where `_removed`.`toDoProperties`.`type`='REVIEW_DEADLINE_TODO' or `toDoProperties`.`type`='REVIEW_DEADLINE_TODO';


!echo ------------------------;
!echo ------------------------ agent_todo_CALCULATE_PAYMENT_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_calculate_payment_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_calculate_payment_properties(
`toDoProperties` STRUCT<`manualCalculationReasons`:ARRAY<STRUCT<`additionalInformation`:STRING
,`type`:STRING
,`_type`:STRING
>>
,`assessmentPeriodId`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`manualCalculationReasons`:ARRAY<STRUCT<`additionalInformation`:STRING
,`type`:STRING
,`_type`:STRING
>>
,`assessmentPeriodId`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_CALCULATE_PAYMENT_PROPERTIES;

CREATE TABLE agent_todo_calculate_payment_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`assessmentPeriodId`, `toDoProperties`.`assessmentPeriodId`) as toDoProperties_assessmentPeriodId, 
COALESCE(`removed_exploded_todoproperties_manualcalculationreasons`.`additionalInformation`, `exploded_todoproperties_manualcalculationreasons`.`additionalInformation`) as toDoProperties_manualCalculationReasons_additionalInformation, 
COALESCE(`removed_exploded_todoproperties_manualcalculationreasons`.`type`, `exploded_todoproperties_manualcalculationreasons`.`type`) as toDoProperties_manualCalculationReasons_type, 
COALESCE(`removed_exploded_todoproperties_manualcalculationreasons`.`_type`, `exploded_todoproperties_manualcalculationreasons`.`_type`) as toDoProperties_manualCalculationReasons__type, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_calculate_payment_properties
 LATERAL VIEW OUTER EXPLODE(`toDoProperties`.`manualCalculationReasons`) view_exploded_todoproperties_manualcalculationreasons AS exploded_todoproperties_manualcalculationreasons 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`toDoProperties`.`manualCalculationReasons`) view_removed_exploded_todoproperties_manualcalculationreasons AS removed_exploded_todoproperties_manualcalculationreasons 
 
 where `_removed`.`toDoProperties`.`type`='CALCULATE_PAYMENT_PROPERTIES' or `toDoProperties`.`type`='CALCULATE_PAYMENT_PROPERTIES';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_UNMATCHED_CLAIMANT_TO_DO_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_unmatched_claimant_to_do_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_unmatched_claimant_to_do_properties(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`unmatchedDetails`:BOOLEAN
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`unmatchedDetails`:BOOLEAN
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_UNMATCHED_CLAIMANT_TO_DO_PROPERTIES;

CREATE TABLE agent_todo_archive_unmatched_claimant_to_do_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(CAST(`_removed`.`toDoProperties`.`unmatchedDetails` as STRING), CAST(`toDoProperties`.`unmatchedDetails` as STRING)) as toDoProperties_unmatchedDetails, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_unmatched_claimant_to_do_properties
 src_agent_core_agenttodoarchive_agent_todo_archive_unmatched_claimant_to_do_properties 
 where `_removed`.`toDoProperties`.`type`='UNMATCHED_CLAIMANT_TO_DO_PROPERTIES' or `toDoProperties`.`type`='UNMATCHED_CLAIMANT_TO_DO_PROPERTIES';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_ADDRESS_SUMMARY;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_address_summary
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_address_summary(
`toDoProperties` STRUCT<`addressSummary`:STRUCT<`effectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`contractId`:STRING
,`postcode`:STRING
,`processId`:STRING
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`addressSummary`:STRUCT<`effectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`contractId`:STRING
,`postcode`:STRING
,`processId`:STRING
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_ADDRESS_SUMMARY;

CREATE TABLE agent_todo_archive_address_summary STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`addressSummary`.`contractId`, `toDoProperties`.`addressSummary`.`contractId`) as toDoProperties_addressSummary_contractId, 
COALESCE(CAST(`_removed`.`toDoProperties`.`addressSummary`.`effectiveDate`.`hasDate` as STRING), CAST(`toDoProperties`.`addressSummary`.`effectiveDate`.`hasDate` as STRING)) as toDoProperties_addressSummary_effectiveDate_hasDate, 
COALESCE(`_removed`.`toDoProperties`.`addressSummary`.`effectiveDate`.`knownDate`, `toDoProperties`.`addressSummary`.`effectiveDate`.`knownDate`) as toDoProperties_addressSummary_effectiveDate_knownDate, 
COALESCE(`_removed`.`toDoProperties`.`addressSummary`.`effectiveDate`.`type`, `toDoProperties`.`addressSummary`.`effectiveDate`.`type`) as toDoProperties_addressSummary_effectiveDate_type, 
COALESCE(`_removed`.`toDoProperties`.`addressSummary`.`effectiveDate`.`date`, `toDoProperties`.`addressSummary`.`effectiveDate`.`date`) as toDoProperties_addressSummary_effectiveDate_date, 
COALESCE(CAST(`_removed`.`toDoProperties`.`addressSummary`.`paymentEffectiveDate`.`hasDate` as STRING), CAST(`toDoProperties`.`addressSummary`.`paymentEffectiveDate`.`hasDate` as STRING)) as toDoProperties_addressSummary_paymentEffectiveDate_hasDate, 
COALESCE(`_removed`.`toDoProperties`.`addressSummary`.`paymentEffectiveDate`.`knownDate`, `toDoProperties`.`addressSummary`.`paymentEffectiveDate`.`knownDate`) as toDoProperties_addressSummary_paymentEffectiveDate_knownDate, 
COALESCE(`_removed`.`toDoProperties`.`addressSummary`.`paymentEffectiveDate`.`type`, `toDoProperties`.`addressSummary`.`paymentEffectiveDate`.`type`) as toDoProperties_addressSummary_paymentEffectiveDate_type, 
COALESCE(`_removed`.`toDoProperties`.`addressSummary`.`paymentEffectiveDate`.`date`, `toDoProperties`.`addressSummary`.`paymentEffectiveDate`.`date`) as toDoProperties_addressSummary_paymentEffectiveDate_date, 
COALESCE(`_removed`.`toDoProperties`.`addressSummary`.`postcode`, `toDoProperties`.`addressSummary`.`postcode`) as toDoProperties_addressSummary_postcode, 
COALESCE(`_removed`.`toDoProperties`.`addressSummary`.`processId`, `toDoProperties`.`addressSummary`.`processId`) as toDoProperties_addressSummary_processId, 
COALESCE(CAST(`_removed`.`toDoProperties`.`addressSummary`.`confirmationRequired` as STRING), CAST(`toDoProperties`.`addressSummary`.`confirmationRequired` as STRING)) as toDoProperties_addressSummary_confirmationRequired, 
COALESCE(CAST(`_removed`.`toDoProperties`.`addressSummary`.`hideDetailsForPartnerDeclaration` as STRING), CAST(`toDoProperties`.`addressSummary`.`hideDetailsForPartnerDeclaration` as STRING)) as toDoProperties_addressSummary_hideDetailsForPartnerDeclaration, 
COALESCE(CAST(`_removed`.`toDoProperties`.`addressSummary`.`perClaimant` as STRING), CAST(`toDoProperties`.`addressSummary`.`perClaimant` as STRING)) as toDoProperties_addressSummary_perClaimant, 
COALESCE(`_removed`.`toDoProperties`.`addressSummary`.`type`, `toDoProperties`.`addressSummary`.`type`) as toDoProperties_addressSummary_type, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_address_summary
 src_agent_core_agenttodoarchive_agent_todo_archive_address_summary 
 where `_removed`.`toDoProperties`.`type`='ADDRESS_SUMMARY' or `toDoProperties`.`type`='ADDRESS_SUMMARY';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_ENTITLEMENT_REVIEW_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_entitlement_review_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_entitlement_review_properties(
`toDoProperties` STRUCT<`entitlementReviewTriggers`:ARRAY<STRING>
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`entitlementReviewTriggers`:ARRAY<STRING>
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_ENTITLEMENT_REVIEW_PROPERTIES;

CREATE TABLE agent_todo_archive_entitlement_review_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`removed_exploded_todoproperties_entitlementreviewtriggers`, `exploded_todoproperties_entitlementreviewtriggers`) as toDoProperties_entitlementReviewTriggers, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_entitlement_review_properties
 LATERAL VIEW OUTER EXPLODE(`toDoProperties`.`entitlementReviewTriggers`) view_exploded_todoproperties_entitlementreviewtriggers AS exploded_todoproperties_entitlementreviewtriggers 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`toDoProperties`.`entitlementReviewTriggers`) view_removed_exploded_todoproperties_entitlementreviewtriggers AS removed_exploded_todoproperties_entitlementreviewtriggers 
 
 where `_removed`.`toDoProperties`.`type`='ENTITLEMENT_REVIEW_PROPERTIES' or `toDoProperties`.`type`='ENTITLEMENT_REVIEW_PROPERTIES';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_CHECK_WORKGROUP_AND_COMMITMENTS_FOR_PREGNANCY;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_check_workgroup_and_commitments_for_pregnancy
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_check_workgroup_and_commitments_for_pregnancy(
`toDoProperties` STRUCT<`pregnancyDueDateDetails`:STRUCT<`dueDate`:STRING>
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`pregnancyDueDateDetails`:STRUCT<`dueDate`:STRING>
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_CHECK_WORKGROUP_AND_COMMITMENTS_FOR_PREGNANCY;

CREATE TABLE agent_todo_archive_check_workgroup_and_commitments_for_pregnancy STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`pregnancyDueDateDetails`.`dueDate`, `toDoProperties`.`pregnancyDueDateDetails`.`dueDate`) as toDoProperties_pregnancyDueDateDetails_dueDate, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_check_workgroup_and_commitments_for_pregnancy
 src_agent_core_agenttodoarchive_agent_todo_archive_check_workgroup_and_commitments_for_pregnancy 
 where `_removed`.`toDoProperties`.`type`='CHECK_WORKGROUP_AND_COMMITMENTS_FOR_PREGNANCY' or `toDoProperties`.`type`='CHECK_WORKGROUP_AND_COMMITMENTS_FOR_PREGNANCY';


!echo ------------------------;
!echo ------------------------ todo_ATTEND_APPOINTMENT_TODO_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_todo_todo_attend_appointment_todo_properties
;

CREATE EXTERNAL TABLE src_core_todo_todo_attend_appointment_todo_properties(
`properties` STRUCT<`appointmentDateTime`:STRUCT<`d_date`:STRING>
,`addressId`:STRING
,`appointmentChannel`:STRING
,`appointmentType`:STRING
,`claimantInstructions`:STRING
,`otherAppointmentName`:STRING
,`thirdPartyAppointmentReference`:STRING
,`workCoachAgentId`:STRING
,`workCoachAgentName`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`properties`:STRUCT<`appointmentDateTime`:STRUCT<`d_date`:STRING>
,`addressId`:STRING
,`appointmentChannel`:STRING
,`appointmentType`:STRING
,`claimantInstructions`:STRING
,`otherAppointmentName`:STRING
,`thirdPartyAppointmentReference`:STRING
,`workCoachAgentId`:STRING
,`workCoachAgentName`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/toDo';

DROP TABLE IF EXISTS todo_ATTEND_APPOINTMENT_TODO_PROPERTIES;

CREATE TABLE todo_attend_appointment_todo_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`properties`.`addressId`, `properties`.`addressId`) as properties_addressId, 
COALESCE(`_removed`.`properties`.`appointmentChannel`, `properties`.`appointmentChannel`) as properties_appointmentChannel, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`properties`.`appointmentDateTime`.`d_date`, LENGTH(`_removed`.`properties`.`appointmentDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`properties`.`appointmentDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`properties`.`appointmentDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`properties`.`appointmentDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`properties`.`appointmentDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`properties`.`appointmentDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`properties`.`appointmentDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`properties`.`appointmentDateTime`.`d_date`, LENGTH(`properties`.`appointmentDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`properties`.`appointmentDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`properties`.`appointmentDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`properties`.`appointmentDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`properties`.`appointmentDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`properties`.`appointmentDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`properties`.`appointmentDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as properties_appointmentDateTime_d_date, 
COALESCE(`_removed`.`properties`.`appointmentType`, `properties`.`appointmentType`) as properties_appointmentType, 
COALESCE(`_removed`.`properties`.`claimantInstructions`, `properties`.`claimantInstructions`) as properties_claimantInstructions, 
COALESCE(`_removed`.`properties`.`otherAppointmentName`, `properties`.`otherAppointmentName`) as properties_otherAppointmentName, 
COALESCE(`_removed`.`properties`.`thirdPartyAppointmentReference`, `properties`.`thirdPartyAppointmentReference`) as properties_thirdPartyAppointmentReference, 
COALESCE(`_removed`.`properties`.`workCoachAgentId`, `properties`.`workCoachAgentId`) as properties_workCoachAgentId, 
COALESCE(`_removed`.`properties`.`workCoachAgentName`, `properties`.`workCoachAgentName`) as properties_workCoachAgentName, 
COALESCE(`_removed`.`properties`.`type`, `properties`.`type`) as properties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_core_todo_todo_attend_appointment_todo_properties
 src_core_todo_todo_attend_appointment_todo_properties 
 where `_removed`.`properties`.`type`='ATTEND_APPOINTMENT_TODO_PROPERTIES' or `properties`.`type`='ATTEND_APPOINTMENT_TODO_PROPERTIES';


!echo ------------------------;
!echo ------------------------ agent_todo_EXTRA_BEDROOM_DUE_TO_DISABILITY;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_extra_bedroom_due_to_disability
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_extra_bedroom_due_to_disability(
`toDoProperties` STRUCT<`declaredDateTime`:STRUCT<`d_date`:STRING>
,`effectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`dateOfSummaryChange`:STRUCT<`d_date`:STRING>
,`declarationId`:STRING
,`processId`:STRING
,`requiresOvernightCare`:BOOLEAN
,`unableToShareRoomReason`:STRING
,`summaryUpdatedBy`:STRING
,`unableToShareBedroomWithPartner`:BOOLEAN
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`declaredDateTime`:STRUCT<`d_date`:STRING>
,`effectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`dateOfSummaryChange`:STRUCT<`d_date`:STRING>
,`declarationId`:STRING
,`processId`:STRING
,`requiresOvernightCare`:BOOLEAN
,`unableToShareRoomReason`:STRING
,`summaryUpdatedBy`:STRING
,`unableToShareBedroomWithPartner`:BOOLEAN
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_EXTRA_BEDROOM_DUE_TO_DISABILITY;

CREATE TABLE agent_todo_extra_bedroom_due_to_disability STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`declarationId`, `toDoProperties`.`declarationId`) as toDoProperties_declarationId, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`toDoProperties`.`declaredDateTime`.`d_date`, LENGTH(`_removed`.`toDoProperties`.`declaredDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`declaredDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`declaredDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`declaredDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`declaredDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`toDoProperties`.`declaredDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`toDoProperties`.`declaredDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`toDoProperties`.`declaredDateTime`.`d_date`, LENGTH(`toDoProperties`.`declaredDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`toDoProperties`.`declaredDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`declaredDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`toDoProperties`.`declaredDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`declaredDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`toDoProperties`.`declaredDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`toDoProperties`.`declaredDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as toDoProperties_declaredDateTime_d_date, 
COALESCE(CAST(`_removed`.`toDoProperties`.`effectiveDate`.`hasDate` as STRING), CAST(`toDoProperties`.`effectiveDate`.`hasDate` as STRING)) as toDoProperties_effectiveDate_hasDate, 
COALESCE(`_removed`.`toDoProperties`.`effectiveDate`.`knownDate`, `toDoProperties`.`effectiveDate`.`knownDate`) as toDoProperties_effectiveDate_knownDate, 
COALESCE(`_removed`.`toDoProperties`.`effectiveDate`.`type`, `toDoProperties`.`effectiveDate`.`type`) as toDoProperties_effectiveDate_type, 
COALESCE(`_removed`.`toDoProperties`.`effectiveDate`.`date`, `toDoProperties`.`effectiveDate`.`date`) as toDoProperties_effectiveDate_date, 
COALESCE(`_removed`.`toDoProperties`.`processId`, `toDoProperties`.`processId`) as toDoProperties_processId, 
COALESCE(CAST(`_removed`.`toDoProperties`.`requiresOvernightCare` as STRING), CAST(`toDoProperties`.`requiresOvernightCare` as STRING)) as toDoProperties_requiresOvernightCare, 
COALESCE(`_removed`.`toDoProperties`.`unableToShareRoomReason`, `toDoProperties`.`unableToShareRoomReason`) as toDoProperties_unableToShareRoomReason, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, LENGTH(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`toDoProperties`.`dateOfSummaryChange`.`d_date`, LENGTH(`toDoProperties`.`dateOfSummaryChange`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`toDoProperties`.`dateOfSummaryChange`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`dateOfSummaryChange`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`toDoProperties`.`dateOfSummaryChange`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`dateOfSummaryChange`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`toDoProperties`.`dateOfSummaryChange`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`toDoProperties`.`dateOfSummaryChange`.`d_date`, 21, 3)) AS TIMESTAMP) END) as toDoProperties_dateOfSummaryChange_d_date, 
COALESCE(`_removed`.`toDoProperties`.`summaryUpdatedBy`, `toDoProperties`.`summaryUpdatedBy`) as toDoProperties_summaryUpdatedBy, 
COALESCE(CAST(`_removed`.`toDoProperties`.`unableToShareBedroomWithPartner` as STRING), CAST(`toDoProperties`.`unableToShareBedroomWithPartner` as STRING)) as toDoProperties_unableToShareBedroomWithPartner, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_extra_bedroom_due_to_disability
 src_agent_core_agenttodo_agent_todo_extra_bedroom_due_to_disability 
 where `_removed`.`toDoProperties`.`type`='EXTRA_BEDROOM_DUE_TO_DISABILITY' or `toDoProperties`.`type`='EXTRA_BEDROOM_DUE_TO_DISABILITY';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_RECORD_OVERLAPPING_BENEFIT_TO_DO_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_record_overlapping_benefit_to_do_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_record_overlapping_benefit_to_do_properties(
`toDoProperties` STRUCT<`existingBenefit`:STRUCT<`benefitName`:STRING
,`endDate`:STRING
,`officeContactNumber`:STRING
,`officeDescription`:STRING
,`officeTypeDescription`:STRING
,`source`:STRING
,`startDate`:STRING>
,`backdating`:BOOLEAN
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`existingBenefit`:STRUCT<`benefitName`:STRING
,`endDate`:STRING
,`officeContactNumber`:STRING
,`officeDescription`:STRING
,`officeTypeDescription`:STRING
,`source`:STRING
,`startDate`:STRING>
,`backdating`:BOOLEAN
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_RECORD_OVERLAPPING_BENEFIT_TO_DO_PROPERTIES;

CREATE TABLE agent_todo_archive_record_overlapping_benefit_to_do_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(CAST(`_removed`.`toDoProperties`.`backdating` as STRING), CAST(`toDoProperties`.`backdating` as STRING)) as toDoProperties_backdating, 
COALESCE(`_removed`.`toDoProperties`.`existingBenefit`.`benefitName`, `toDoProperties`.`existingBenefit`.`benefitName`) as toDoProperties_existingBenefit_benefitName, 
COALESCE(`_removed`.`toDoProperties`.`existingBenefit`.`endDate`, `toDoProperties`.`existingBenefit`.`endDate`) as toDoProperties_existingBenefit_endDate, 
COALESCE(`_removed`.`toDoProperties`.`existingBenefit`.`officeContactNumber`, `toDoProperties`.`existingBenefit`.`officeContactNumber`) as toDoProperties_existingBenefit_officeContactNumber, 
COALESCE(`_removed`.`toDoProperties`.`existingBenefit`.`officeDescription`, `toDoProperties`.`existingBenefit`.`officeDescription`) as toDoProperties_existingBenefit_officeDescription, 
COALESCE(`_removed`.`toDoProperties`.`existingBenefit`.`officeTypeDescription`, `toDoProperties`.`existingBenefit`.`officeTypeDescription`) as toDoProperties_existingBenefit_officeTypeDescription, 
COALESCE(`_removed`.`toDoProperties`.`existingBenefit`.`source`, `toDoProperties`.`existingBenefit`.`source`) as toDoProperties_existingBenefit_source, 
COALESCE(`_removed`.`toDoProperties`.`existingBenefit`.`startDate`, `toDoProperties`.`existingBenefit`.`startDate`) as toDoProperties_existingBenefit_startDate, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_record_overlapping_benefit_to_do_properties
 src_agent_core_agenttodoarchive_agent_todo_archive_record_overlapping_benefit_to_do_properties 
 where `_removed`.`toDoProperties`.`type`='RECORD_OVERLAPPING_BENEFIT_TO_DO_PROPERTIES' or `toDoProperties`.`type`='RECORD_OVERLAPPING_BENEFIT_TO_DO_PROPERTIES';


!echo ------------------------;
!echo ------------------------ agent_todo_PERSON_DETAILS_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_person_details_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_person_details_properties(
`toDoProperties` STRUCT<`personDetails`:STRUCT<`createdDateTime`:STRUCT<`d_date`:STRING>
,`effectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`_version`:STRING
,`citizenId`:STRING
,`contactPreference`:STRING
,`contractId`:STRING
,`declarationId`:STRING
,`email`:STRING
,`firstName`:STRING
,`gender`:STRING
,`lastName`:STRING
,`middleName`:STRING
,`mobileNumber`:STRING
,`processId`:STRING
,`sanitisedFirstName`:STRING
,`sanitisedLastName`:STRING
,`sanitisedMiddleName`:STRING
,`verifiedUsingBioQuestionsOrThirdParty`:BOOLEAN
,`verifiedWithNameDateOfBirthOrAddressChange`:BOOLEAN
,`type`:STRING>
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`personDetails`:STRUCT<`createdDateTime`:STRUCT<`d_date`:STRING>
,`effectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`_version`:STRING
,`citizenId`:STRING
,`contactPreference`:STRING
,`contractId`:STRING
,`declarationId`:STRING
,`email`:STRING
,`firstName`:STRING
,`gender`:STRING
,`lastName`:STRING
,`middleName`:STRING
,`mobileNumber`:STRING
,`processId`:STRING
,`sanitisedFirstName`:STRING
,`sanitisedLastName`:STRING
,`sanitisedMiddleName`:STRING
,`verifiedUsingBioQuestionsOrThirdParty`:BOOLEAN
,`verifiedWithNameDateOfBirthOrAddressChange`:BOOLEAN
,`type`:STRING>
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_PERSON_DETAILS_PROPERTIES;

CREATE TABLE agent_todo_person_details_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`_version`, `toDoProperties`.`personDetails`.`_version`) as toDoProperties_personDetails__version, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`citizenId`, `toDoProperties`.`personDetails`.`citizenId`) as toDoProperties_personDetails_citizenId, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`contactPreference`, `toDoProperties`.`personDetails`.`contactPreference`) as toDoProperties_personDetails_contactPreference, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`contractId`, `toDoProperties`.`personDetails`.`contractId`) as toDoProperties_personDetails_contractId, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`toDoProperties`.`personDetails`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`toDoProperties`.`personDetails`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`personDetails`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`personDetails`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`personDetails`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`personDetails`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`toDoProperties`.`personDetails`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`toDoProperties`.`personDetails`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`toDoProperties`.`personDetails`.`createdDateTime`.`d_date`, LENGTH(`toDoProperties`.`personDetails`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`toDoProperties`.`personDetails`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`personDetails`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`toDoProperties`.`personDetails`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`personDetails`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`toDoProperties`.`personDetails`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`toDoProperties`.`personDetails`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as toDoProperties_personDetails_createdDateTime_d_date, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`declarationId`, `toDoProperties`.`personDetails`.`declarationId`) as toDoProperties_personDetails_declarationId, 
COALESCE(CAST(`_removed`.`toDoProperties`.`personDetails`.`effectiveDate`.`hasDate` as STRING), CAST(`toDoProperties`.`personDetails`.`effectiveDate`.`hasDate` as STRING)) as toDoProperties_personDetails_effectiveDate_hasDate, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`effectiveDate`.`knownDate`, `toDoProperties`.`personDetails`.`effectiveDate`.`knownDate`) as toDoProperties_personDetails_effectiveDate_knownDate, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`effectiveDate`.`type`, `toDoProperties`.`personDetails`.`effectiveDate`.`type`) as toDoProperties_personDetails_effectiveDate_type, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`effectiveDate`.`date`, `toDoProperties`.`personDetails`.`effectiveDate`.`date`) as toDoProperties_personDetails_effectiveDate_date, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`email`, `toDoProperties`.`personDetails`.`email`) as toDoProperties_personDetails_email, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`firstName`, `toDoProperties`.`personDetails`.`firstName`) as toDoProperties_personDetails_firstName, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`gender`, `toDoProperties`.`personDetails`.`gender`) as toDoProperties_personDetails_gender, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`lastName`, `toDoProperties`.`personDetails`.`lastName`) as toDoProperties_personDetails_lastName, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`middleName`, `toDoProperties`.`personDetails`.`middleName`) as toDoProperties_personDetails_middleName, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`mobileNumber`, `toDoProperties`.`personDetails`.`mobileNumber`) as toDoProperties_personDetails_mobileNumber, 
COALESCE(CAST(`_removed`.`toDoProperties`.`personDetails`.`paymentEffectiveDate`.`hasDate` as STRING), CAST(`toDoProperties`.`personDetails`.`paymentEffectiveDate`.`hasDate` as STRING)) as toDoProperties_personDetails_paymentEffectiveDate_hasDate, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`paymentEffectiveDate`.`knownDate`, `toDoProperties`.`personDetails`.`paymentEffectiveDate`.`knownDate`) as toDoProperties_personDetails_paymentEffectiveDate_knownDate, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`paymentEffectiveDate`.`type`, `toDoProperties`.`personDetails`.`paymentEffectiveDate`.`type`) as toDoProperties_personDetails_paymentEffectiveDate_type, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`paymentEffectiveDate`.`date`, `toDoProperties`.`personDetails`.`paymentEffectiveDate`.`date`) as toDoProperties_personDetails_paymentEffectiveDate_date, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`processId`, `toDoProperties`.`personDetails`.`processId`) as toDoProperties_personDetails_processId, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`sanitisedFirstName`, `toDoProperties`.`personDetails`.`sanitisedFirstName`) as toDoProperties_personDetails_sanitisedFirstName, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`sanitisedLastName`, `toDoProperties`.`personDetails`.`sanitisedLastName`) as toDoProperties_personDetails_sanitisedLastName, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`sanitisedMiddleName`, `toDoProperties`.`personDetails`.`sanitisedMiddleName`) as toDoProperties_personDetails_sanitisedMiddleName, 
COALESCE(CAST(`_removed`.`toDoProperties`.`personDetails`.`verifiedUsingBioQuestionsOrThirdParty` as STRING), CAST(`toDoProperties`.`personDetails`.`verifiedUsingBioQuestionsOrThirdParty` as STRING)) as toDoProperties_personDetails_verifiedUsingBioQuestionsOrThirdParty, 
COALESCE(CAST(`_removed`.`toDoProperties`.`personDetails`.`verifiedWithNameDateOfBirthOrAddressChange` as STRING), CAST(`toDoProperties`.`personDetails`.`verifiedWithNameDateOfBirthOrAddressChange` as STRING)) as toDoProperties_personDetails_verifiedWithNameDateOfBirthOrAddressChange, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`type`, `toDoProperties`.`personDetails`.`type`) as toDoProperties_personDetails_type, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_person_details_properties
 src_agent_core_agenttodo_agent_todo_person_details_properties 
 where `_removed`.`toDoProperties`.`type`='PERSON_DETAILS_PROPERTIES' or `toDoProperties`.`type`='PERSON_DETAILS_PROPERTIES';


!echo ------------------------;
!echo ------------------------ journal_HousingCostsChangeSummaryJournalEntry;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_journal_journal_housingcostschangesummaryjournalentry
;

CREATE EXTERNAL TABLE src_core_journal_journal_housingcostschangesummaryjournalentry(
`journalEntryProperties` STRUCT<`housingCostChangeSummary`:STRUCT<`rentalPayment`:STRUCT<`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`serviceChargePayment`:STRUCT<`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`contractId`:STRING
,`otherChanges`:BOOLEAN
,`processId`:STRING
,`rentChanged`:BOOLEAN
,`rentDateOfChange`:STRING
,`serviceChargeChanged`:BOOLEAN
,`serviceChargeDateOfChange`:STRING
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`rentDateOfChangeAsString`:STRING
,`serviceChargeDateOfChangeAsString`:STRING
,`type`:STRING>
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`journalId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`journalEntryProperties`:STRUCT<`housingCostChangeSummary`:STRUCT<`rentalPayment`:STRUCT<`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`serviceChargePayment`:STRUCT<`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`contractId`:STRING
,`otherChanges`:BOOLEAN
,`processId`:STRING
,`rentChanged`:BOOLEAN
,`rentDateOfChange`:STRING
,`serviceChargeChanged`:BOOLEAN
,`serviceChargeDateOfChange`:STRING
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`rentDateOfChangeAsString`:STRING
,`serviceChargeDateOfChangeAsString`:STRING
,`type`:STRING>
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`journalId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/journal';

DROP TABLE IF EXISTS journal_HousingCostsChangeSummaryJournalEntry;

CREATE TABLE journal_housingcostschangesummaryjournalentry STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`journalEntryProperties`.`housingCostChangeSummary`.`contractId`, `journalEntryProperties`.`housingCostChangeSummary`.`contractId`) as journalEntryProperties_housingCostChangeSummary_contractId, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`housingCostChangeSummary`.`otherChanges` as STRING), CAST(`journalEntryProperties`.`housingCostChangeSummary`.`otherChanges` as STRING)) as journalEntryProperties_housingCostChangeSummary_otherChanges, 
COALESCE(`_removed`.`journalEntryProperties`.`housingCostChangeSummary`.`processId`, `journalEntryProperties`.`housingCostChangeSummary`.`processId`) as journalEntryProperties_housingCostChangeSummary_processId, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`housingCostChangeSummary`.`rentChanged` as STRING), CAST(`journalEntryProperties`.`housingCostChangeSummary`.`rentChanged` as STRING)) as journalEntryProperties_housingCostChangeSummary_rentChanged, 
COALESCE(`_removed`.`journalEntryProperties`.`housingCostChangeSummary`.`rentDateOfChange`, `journalEntryProperties`.`housingCostChangeSummary`.`rentDateOfChange`) as journalEntryProperties_housingCostChangeSummary_rentDateOfChange, 
COALESCE(`_removed`.`journalEntryProperties`.`housingCostChangeSummary`.`rentalPayment`.`amount`, `journalEntryProperties`.`housingCostChangeSummary`.`rentalPayment`.`amount`) as journalEntryProperties_housingCostChangeSummary_rentalPayment_amount, 
COALESCE(`_removed`.`journalEntryProperties`.`housingCostChangeSummary`.`rentalPayment`.`paymentFrequency`, `journalEntryProperties`.`housingCostChangeSummary`.`rentalPayment`.`paymentFrequency`) as journalEntryProperties_housingCostChangeSummary_rentalPayment_paymentFrequency, 
COALESCE(`_removed`.`journalEntryProperties`.`housingCostChangeSummary`.`rentalPayment`.`type`, `journalEntryProperties`.`housingCostChangeSummary`.`rentalPayment`.`type`) as journalEntryProperties_housingCostChangeSummary_rentalPayment_type, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`housingCostChangeSummary`.`serviceChargeChanged` as STRING), CAST(`journalEntryProperties`.`housingCostChangeSummary`.`serviceChargeChanged` as STRING)) as journalEntryProperties_housingCostChangeSummary_serviceChargeChanged, 
COALESCE(`_removed`.`journalEntryProperties`.`housingCostChangeSummary`.`serviceChargeDateOfChange`, `journalEntryProperties`.`housingCostChangeSummary`.`serviceChargeDateOfChange`) as journalEntryProperties_housingCostChangeSummary_serviceChargeDateOfChange, 
COALESCE(`_removed`.`journalEntryProperties`.`housingCostChangeSummary`.`serviceChargePayment`.`amount`, `journalEntryProperties`.`housingCostChangeSummary`.`serviceChargePayment`.`amount`) as journalEntryProperties_housingCostChangeSummary_serviceChargePayment_amount, 
COALESCE(`_removed`.`journalEntryProperties`.`housingCostChangeSummary`.`serviceChargePayment`.`paymentFrequency`, `journalEntryProperties`.`housingCostChangeSummary`.`serviceChargePayment`.`paymentFrequency`) as journalEntryProperties_housingCostChangeSummary_serviceChargePayment_paymentFrequency, 
COALESCE(`_removed`.`journalEntryProperties`.`housingCostChangeSummary`.`serviceChargePayment`.`type`, `journalEntryProperties`.`housingCostChangeSummary`.`serviceChargePayment`.`type`) as journalEntryProperties_housingCostChangeSummary_serviceChargePayment_type, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`housingCostChangeSummary`.`confirmationRequired` as STRING), CAST(`journalEntryProperties`.`housingCostChangeSummary`.`confirmationRequired` as STRING)) as journalEntryProperties_housingCostChangeSummary_confirmationRequired, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`housingCostChangeSummary`.`hideDetailsForPartnerDeclaration` as STRING), CAST(`journalEntryProperties`.`housingCostChangeSummary`.`hideDetailsForPartnerDeclaration` as STRING)) as journalEntryProperties_housingCostChangeSummary_hideDetailsForPartnerDeclaration, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`housingCostChangeSummary`.`perClaimant` as STRING), CAST(`journalEntryProperties`.`housingCostChangeSummary`.`perClaimant` as STRING)) as journalEntryProperties_housingCostChangeSummary_perClaimant, 
COALESCE(`_removed`.`journalEntryProperties`.`housingCostChangeSummary`.`rentDateOfChangeAsString`, `journalEntryProperties`.`housingCostChangeSummary`.`rentDateOfChangeAsString`) as journalEntryProperties_housingCostChangeSummary_rentDateOfChangeAsString, 
COALESCE(`_removed`.`journalEntryProperties`.`housingCostChangeSummary`.`serviceChargeDateOfChangeAsString`, `journalEntryProperties`.`housingCostChangeSummary`.`serviceChargeDateOfChangeAsString`) as journalEntryProperties_housingCostChangeSummary_serviceChargeDateOfChangeAsString, 
COALESCE(`_removed`.`journalEntryProperties`.`housingCostChangeSummary`.`type`, `journalEntryProperties`.`housingCostChangeSummary`.`type`) as journalEntryProperties_housingCostChangeSummary_type, 
COALESCE(`_removed`.`journalEntryProperties`.`type`, `journalEntryProperties`.`type`) as journalEntryProperties_type, 
COALESCE(`_removed`.`_id`.`journalId`, `_id`.`journalId`) as id FROM src_core_journal_journal_housingcostschangesummaryjournalentry
 src_core_journal_journal_housingcostschangesummaryjournalentry 
 where `_removed`.`journalEntryProperties`.`type`='HousingCostsChangeSummaryJournalEntry' or `journalEntryProperties`.`type`='HousingCostsChangeSummaryJournalEntry';


!echo ------------------------;
!echo ------------------------ journal_ucFraudPenaltyAddedJournalEntry;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_journal_journal_ucfraudpenaltyaddedjournalentry
;

CREATE EXTERNAL TABLE src_core_journal_journal_ucfraudpenaltyaddedjournalentry(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`journalEntryProperties` STRUCT<`convictionDate`:STRING
,`determinationDate`:STRING
,`durationInDays`:STRING
,`type`:STRING>
,`_id` STRUCT<`journalId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`journalEntryProperties`:STRUCT<`convictionDate`:STRING
,`determinationDate`:STRING
,`durationInDays`:STRING
,`type`:STRING>
,`_id`:STRUCT<`journalId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/journal';

DROP TABLE IF EXISTS journal_ucFraudPenaltyAddedJournalEntry;

CREATE TABLE journal_ucfraudpenaltyaddedjournalentry STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`journalEntryProperties`.`convictionDate`, `journalEntryProperties`.`convictionDate`) as journalEntryProperties_convictionDate, 
COALESCE(`_removed`.`journalEntryProperties`.`determinationDate`, `journalEntryProperties`.`determinationDate`) as journalEntryProperties_determinationDate, 
COALESCE(`_removed`.`journalEntryProperties`.`durationInDays`, `journalEntryProperties`.`durationInDays`) as journalEntryProperties_durationInDays, 
COALESCE(`_removed`.`journalEntryProperties`.`type`, `journalEntryProperties`.`type`) as journalEntryProperties_type, 
COALESCE(`_removed`.`_id`.`journalId`, `_id`.`journalId`) as id FROM src_core_journal_journal_ucfraudpenaltyaddedjournalentry
 src_core_journal_journal_ucfraudpenaltyaddedjournalentry 
 where `_removed`.`journalEntryProperties`.`type`='ucFraudPenaltyAddedJournalEntry' or `journalEntryProperties`.`type`='ucFraudPenaltyAddedJournalEntry';


!echo ------------------------;
!echo ------------------------ agent_todo_CONSIDER_WCA_REFERRAL_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_consider_wca_referral_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_consider_wca_referral_properties(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`healthAndDeclarationId`:STRING
,`declarationId`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`healthAndDeclarationId`:STRING
,`declarationId`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_CONSIDER_WCA_REFERRAL_PROPERTIES;

CREATE TABLE agent_todo_consider_wca_referral_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`healthAndDeclarationId`, `toDoProperties`.`healthAndDeclarationId`) as toDoProperties_healthAndDeclarationId, 
COALESCE(`_removed`.`toDoProperties`.`declarationId`, `toDoProperties`.`declarationId`) as toDoProperties_declarationId, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_consider_wca_referral_properties
 src_agent_core_agenttodo_agent_todo_consider_wca_referral_properties 
 where `_removed`.`toDoProperties`.`type`='CONSIDER_WCA_REFERRAL_PROPERTIES' or `toDoProperties`.`type`='CONSIDER_WCA_REFERRAL_PROPERTIES';


!echo ------------------------;
!echo ------------------------ agent_todo_CALCULATE_DEDUCTIONS_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_calculate_deductions_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_calculate_deductions_properties(
`toDoProperties` STRUCT<`manualCalculationReason`:STRUCT<`additionalInformation`:STRING
,`type`:STRING
,`_type`:STRING>
,`assessmentPeriodId`:STRING
,`hasDmsDebt`:BOOLEAN
,`hasNonDmsDebt`:BOOLEAN
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`manualCalculationReason`:STRUCT<`additionalInformation`:STRING
,`type`:STRING
,`_type`:STRING>
,`assessmentPeriodId`:STRING
,`hasDmsDebt`:BOOLEAN
,`hasNonDmsDebt`:BOOLEAN
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_CALCULATE_DEDUCTIONS_PROPERTIES;

CREATE TABLE agent_todo_calculate_deductions_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`assessmentPeriodId`, `toDoProperties`.`assessmentPeriodId`) as toDoProperties_assessmentPeriodId, 
COALESCE(CAST(`_removed`.`toDoProperties`.`hasDmsDebt` as STRING), CAST(`toDoProperties`.`hasDmsDebt` as STRING)) as toDoProperties_hasDmsDebt, 
COALESCE(CAST(`_removed`.`toDoProperties`.`hasNonDmsDebt` as STRING), CAST(`toDoProperties`.`hasNonDmsDebt` as STRING)) as toDoProperties_hasNonDmsDebt, 
COALESCE(`_removed`.`toDoProperties`.`manualCalculationReason`.`additionalInformation`, `toDoProperties`.`manualCalculationReason`.`additionalInformation`) as toDoProperties_manualCalculationReason_additionalInformation, 
COALESCE(`_removed`.`toDoProperties`.`manualCalculationReason`.`type`, `toDoProperties`.`manualCalculationReason`.`type`) as toDoProperties_manualCalculationReason_type, 
COALESCE(`_removed`.`toDoProperties`.`manualCalculationReason`.`_type`, `toDoProperties`.`manualCalculationReason`.`_type`) as toDoProperties_manualCalculationReason__type, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_calculate_deductions_properties
 src_agent_core_agenttodo_agent_todo_calculate_deductions_properties 
 where `_removed`.`toDoProperties`.`type`='CALCULATE_DEDUCTIONS_PROPERTIES' or `toDoProperties`.`type`='CALCULATE_DEDUCTIONS_PROPERTIES';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_WHO_LIVES_WITH_YOU_SUMMARY;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_who_lives_with_you_summary
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_who_lives_with_you_summary(
`toDoProperties` STRUCT<`whoLivesWithYouSummary`:STRUCT<`children`:ARRAY<STRUCT<`disabilityDetails`:STRUCT<`dlaCareComponent`:STRING
,`pipDailyLivingComponent`:STRING
,`receivingDisabilityLivingAllowance`:BOOLEAN
,`receivingPersonalIndependencePayment`:BOOLEAN
,`registeredBlind`:BOOLEAN>
,`nonDependantDetails`:STRUCT<`awayOnArmedForcesOperations`:BOOLEAN
,`personIsClaimantsChild`:BOOLEAN
,`primaryCarer`:STRING
,`receivingArmedForcesIndependencePayment`:BOOLEAN
,`receivingAttendanceAllowance`:BOOLEAN
,`receivingCarersAllowance`:BOOLEAN
,`receivingDisabilityLivingAllowance`:BOOLEAN
,`receivingPersonalIndependencePayment`:BOOLEAN
,`receivingStatePensionCredit`:BOOLEAN>
,`temporaryAbsence`:STRUCT<`abroadForMoreThanOneMonth`:BOOLEAN
,`inPrison`:BOOLEAN
,`inTheCareOfLocalAuthority`:BOOLEAN>
,`adoptedOrUnderGuardianship`:BOOLEAN
,`childId`:STRING
,`dateOfBirth`:STRING
,`firstName`:STRING
,`fullName`:STRING
,`inQualifyingFullTimeEducation`:BOOLEAN
>>
,`dateOfChange`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`contractId`:STRING
,`hasExceptionToTwoChildPolicy`:BOOLEAN
,`primaryCarerName`:STRING
,`processId`:STRING
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`whoLivesWithYouSummary`:STRUCT<`children`:ARRAY<STRUCT<`disabilityDetails`:STRUCT<`dlaCareComponent`:STRING
,`pipDailyLivingComponent`:STRING
,`receivingDisabilityLivingAllowance`:BOOLEAN
,`receivingPersonalIndependencePayment`:BOOLEAN
,`registeredBlind`:BOOLEAN>
,`nonDependantDetails`:STRUCT<`awayOnArmedForcesOperations`:BOOLEAN
,`personIsClaimantsChild`:BOOLEAN
,`primaryCarer`:STRING
,`receivingArmedForcesIndependencePayment`:BOOLEAN
,`receivingAttendanceAllowance`:BOOLEAN
,`receivingCarersAllowance`:BOOLEAN
,`receivingDisabilityLivingAllowance`:BOOLEAN
,`receivingPersonalIndependencePayment`:BOOLEAN
,`receivingStatePensionCredit`:BOOLEAN>
,`temporaryAbsence`:STRUCT<`abroadForMoreThanOneMonth`:BOOLEAN
,`inPrison`:BOOLEAN
,`inTheCareOfLocalAuthority`:BOOLEAN>
,`adoptedOrUnderGuardianship`:BOOLEAN
,`childId`:STRING
,`dateOfBirth`:STRING
,`firstName`:STRING
,`fullName`:STRING
,`inQualifyingFullTimeEducation`:BOOLEAN
>>
,`dateOfChange`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`contractId`:STRING
,`hasExceptionToTwoChildPolicy`:BOOLEAN
,`primaryCarerName`:STRING
,`processId`:STRING
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_WHO_LIVES_WITH_YOU_SUMMARY;

CREATE TABLE agent_todo_archive_who_lives_with_you_summary STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(CAST(`removed_exploded_todoproperties_wholiveswithyousummary_children`.`adoptedOrUnderGuardianship` as STRING), CAST(`exploded_todoproperties_wholiveswithyousummary_children`.`adoptedOrUnderGuardianship` as STRING)) as toDoProperties_whoLivesWithYouSummary_children_adoptedOrUnderGuardianship, 
COALESCE(`removed_exploded_todoproperties_wholiveswithyousummary_children`.`childId`, `exploded_todoproperties_wholiveswithyousummary_children`.`childId`) as toDoProperties_whoLivesWithYouSummary_children_childId, 
COALESCE(`removed_exploded_todoproperties_wholiveswithyousummary_children`.`dateOfBirth`, `exploded_todoproperties_wholiveswithyousummary_children`.`dateOfBirth`) as toDoProperties_whoLivesWithYouSummary_children_dateOfBirth, 
COALESCE(`removed_exploded_todoproperties_wholiveswithyousummary_children`.`disabilityDetails`.`dlaCareComponent`, `exploded_todoproperties_wholiveswithyousummary_children`.`disabilityDetails`.`dlaCareComponent`) as toDoProperties_whoLivesWithYouSummary_children_disabilityDetails_dlaCareComponent, 
COALESCE(`removed_exploded_todoproperties_wholiveswithyousummary_children`.`disabilityDetails`.`pipDailyLivingComponent`, `exploded_todoproperties_wholiveswithyousummary_children`.`disabilityDetails`.`pipDailyLivingComponent`) as toDoProperties_whoLivesWithYouSummary_children_disabilityDetails_pipDailyLivingComponent, 
COALESCE(CAST(`removed_exploded_todoproperties_wholiveswithyousummary_children`.`disabilityDetails`.`receivingDisabilityLivingAllowance` as STRING), CAST(`exploded_todoproperties_wholiveswithyousummary_children`.`disabilityDetails`.`receivingDisabilityLivingAllowance` as STRING)) as toDoProperties_whoLivesWithYouSummary_children_disabilityDetails_receivingDisabilityLivingAllowance, 
COALESCE(CAST(`removed_exploded_todoproperties_wholiveswithyousummary_children`.`disabilityDetails`.`receivingPersonalIndependencePayment` as STRING), CAST(`exploded_todoproperties_wholiveswithyousummary_children`.`disabilityDetails`.`receivingPersonalIndependencePayment` as STRING)) as toDoProperties_whoLivesWithYouSummary_children_disabilityDetails_receivingPersonalIndependencePayment, 
COALESCE(CAST(`removed_exploded_todoproperties_wholiveswithyousummary_children`.`disabilityDetails`.`registeredBlind` as STRING), CAST(`exploded_todoproperties_wholiveswithyousummary_children`.`disabilityDetails`.`registeredBlind` as STRING)) as toDoProperties_whoLivesWithYouSummary_children_disabilityDetails_registeredBlind, 
COALESCE(`removed_exploded_todoproperties_wholiveswithyousummary_children`.`firstName`, `exploded_todoproperties_wholiveswithyousummary_children`.`firstName`) as toDoProperties_whoLivesWithYouSummary_children_firstName, 
COALESCE(`removed_exploded_todoproperties_wholiveswithyousummary_children`.`fullName`, `exploded_todoproperties_wholiveswithyousummary_children`.`fullName`) as toDoProperties_whoLivesWithYouSummary_children_fullName, 
COALESCE(CAST(`removed_exploded_todoproperties_wholiveswithyousummary_children`.`inQualifyingFullTimeEducation` as STRING), CAST(`exploded_todoproperties_wholiveswithyousummary_children`.`inQualifyingFullTimeEducation` as STRING)) as toDoProperties_whoLivesWithYouSummary_children_inQualifyingFullTimeEducation, 
COALESCE(CAST(`removed_exploded_todoproperties_wholiveswithyousummary_children`.`nonDependantDetails`.`awayOnArmedForcesOperations` as STRING), CAST(`exploded_todoproperties_wholiveswithyousummary_children`.`nonDependantDetails`.`awayOnArmedForcesOperations` as STRING)) as toDoProperties_whoLivesWithYouSummary_children_nonDependantDetails_awayOnArmedForcesOperations, 
COALESCE(CAST(`removed_exploded_todoproperties_wholiveswithyousummary_children`.`nonDependantDetails`.`personIsClaimantsChild` as STRING), CAST(`exploded_todoproperties_wholiveswithyousummary_children`.`nonDependantDetails`.`personIsClaimantsChild` as STRING)) as toDoProperties_whoLivesWithYouSummary_children_nonDependantDetails_personIsClaimantsChild, 
COALESCE(`removed_exploded_todoproperties_wholiveswithyousummary_children`.`nonDependantDetails`.`primaryCarer`, `exploded_todoproperties_wholiveswithyousummary_children`.`nonDependantDetails`.`primaryCarer`) as toDoProperties_whoLivesWithYouSummary_children_nonDependantDetails_primaryCarer, 
COALESCE(CAST(`removed_exploded_todoproperties_wholiveswithyousummary_children`.`nonDependantDetails`.`receivingArmedForcesIndependencePayment` as STRING), CAST(`exploded_todoproperties_wholiveswithyousummary_children`.`nonDependantDetails`.`receivingArmedForcesIndependencePayment` as STRING)) as toDoProperties_whoLivesWithYouSummary_children_nonDependantDetails_receivingArmedForcesIndependencePayment, 
COALESCE(CAST(`removed_exploded_todoproperties_wholiveswithyousummary_children`.`nonDependantDetails`.`receivingAttendanceAllowance` as STRING), CAST(`exploded_todoproperties_wholiveswithyousummary_children`.`nonDependantDetails`.`receivingAttendanceAllowance` as STRING)) as toDoProperties_whoLivesWithYouSummary_children_nonDependantDetails_receivingAttendanceAllowance, 
COALESCE(CAST(`removed_exploded_todoproperties_wholiveswithyousummary_children`.`nonDependantDetails`.`receivingCarersAllowance` as STRING), CAST(`exploded_todoproperties_wholiveswithyousummary_children`.`nonDependantDetails`.`receivingCarersAllowance` as STRING)) as toDoProperties_whoLivesWithYouSummary_children_nonDependantDetails_receivingCarersAllowance, 
COALESCE(CAST(`removed_exploded_todoproperties_wholiveswithyousummary_children`.`nonDependantDetails`.`receivingDisabilityLivingAllowance` as STRING), CAST(`exploded_todoproperties_wholiveswithyousummary_children`.`nonDependantDetails`.`receivingDisabilityLivingAllowance` as STRING)) as toDoProperties_whoLivesWithYouSummary_children_nonDependantDetails_receivingDisabilityLivingAllowance, 
COALESCE(CAST(`removed_exploded_todoproperties_wholiveswithyousummary_children`.`nonDependantDetails`.`receivingPersonalIndependencePayment` as STRING), CAST(`exploded_todoproperties_wholiveswithyousummary_children`.`nonDependantDetails`.`receivingPersonalIndependencePayment` as STRING)) as toDoProperties_whoLivesWithYouSummary_children_nonDependantDetails_receivingPersonalIndependencePayment, 
COALESCE(CAST(`removed_exploded_todoproperties_wholiveswithyousummary_children`.`nonDependantDetails`.`receivingStatePensionCredit` as STRING), CAST(`exploded_todoproperties_wholiveswithyousummary_children`.`nonDependantDetails`.`receivingStatePensionCredit` as STRING)) as toDoProperties_whoLivesWithYouSummary_children_nonDependantDetails_receivingStatePensionCredit, 
COALESCE(CAST(`removed_exploded_todoproperties_wholiveswithyousummary_children`.`temporaryAbsence`.`abroadForMoreThanOneMonth` as STRING), CAST(`exploded_todoproperties_wholiveswithyousummary_children`.`temporaryAbsence`.`abroadForMoreThanOneMonth` as STRING)) as toDoProperties_whoLivesWithYouSummary_children_temporaryAbsence_abroadForMoreThanOneMonth, 
COALESCE(CAST(`removed_exploded_todoproperties_wholiveswithyousummary_children`.`temporaryAbsence`.`inPrison` as STRING), CAST(`exploded_todoproperties_wholiveswithyousummary_children`.`temporaryAbsence`.`inPrison` as STRING)) as toDoProperties_whoLivesWithYouSummary_children_temporaryAbsence_inPrison, 
COALESCE(CAST(`removed_exploded_todoproperties_wholiveswithyousummary_children`.`temporaryAbsence`.`inTheCareOfLocalAuthority` as STRING), CAST(`exploded_todoproperties_wholiveswithyousummary_children`.`temporaryAbsence`.`inTheCareOfLocalAuthority` as STRING)) as toDoProperties_whoLivesWithYouSummary_children_temporaryAbsence_inTheCareOfLocalAuthority, 
COALESCE(`_removed`.`toDoProperties`.`whoLivesWithYouSummary`.`contractId`, `toDoProperties`.`whoLivesWithYouSummary`.`contractId`) as toDoProperties_whoLivesWithYouSummary_contractId, 
COALESCE(CAST(`_removed`.`toDoProperties`.`whoLivesWithYouSummary`.`dateOfChange`.`hasDate` as STRING), CAST(`toDoProperties`.`whoLivesWithYouSummary`.`dateOfChange`.`hasDate` as STRING)) as toDoProperties_whoLivesWithYouSummary_dateOfChange_hasDate, 
COALESCE(`_removed`.`toDoProperties`.`whoLivesWithYouSummary`.`dateOfChange`.`knownDate`, `toDoProperties`.`whoLivesWithYouSummary`.`dateOfChange`.`knownDate`) as toDoProperties_whoLivesWithYouSummary_dateOfChange_knownDate, 
COALESCE(`_removed`.`toDoProperties`.`whoLivesWithYouSummary`.`dateOfChange`.`type`, `toDoProperties`.`whoLivesWithYouSummary`.`dateOfChange`.`type`) as toDoProperties_whoLivesWithYouSummary_dateOfChange_type, 
COALESCE(`_removed`.`toDoProperties`.`whoLivesWithYouSummary`.`dateOfChange`.`date`, `toDoProperties`.`whoLivesWithYouSummary`.`dateOfChange`.`date`) as toDoProperties_whoLivesWithYouSummary_dateOfChange_date, 
COALESCE(CAST(`_removed`.`toDoProperties`.`whoLivesWithYouSummary`.`hasExceptionToTwoChildPolicy` as STRING), CAST(`toDoProperties`.`whoLivesWithYouSummary`.`hasExceptionToTwoChildPolicy` as STRING)) as toDoProperties_whoLivesWithYouSummary_hasExceptionToTwoChildPolicy, 
COALESCE(CAST(`_removed`.`toDoProperties`.`whoLivesWithYouSummary`.`paymentEffectiveDate`.`hasDate` as STRING), CAST(`toDoProperties`.`whoLivesWithYouSummary`.`paymentEffectiveDate`.`hasDate` as STRING)) as toDoProperties_whoLivesWithYouSummary_paymentEffectiveDate_hasDate, 
COALESCE(`_removed`.`toDoProperties`.`whoLivesWithYouSummary`.`paymentEffectiveDate`.`knownDate`, `toDoProperties`.`whoLivesWithYouSummary`.`paymentEffectiveDate`.`knownDate`) as toDoProperties_whoLivesWithYouSummary_paymentEffectiveDate_knownDate, 
COALESCE(`_removed`.`toDoProperties`.`whoLivesWithYouSummary`.`paymentEffectiveDate`.`type`, `toDoProperties`.`whoLivesWithYouSummary`.`paymentEffectiveDate`.`type`) as toDoProperties_whoLivesWithYouSummary_paymentEffectiveDate_type, 
COALESCE(`_removed`.`toDoProperties`.`whoLivesWithYouSummary`.`paymentEffectiveDate`.`date`, `toDoProperties`.`whoLivesWithYouSummary`.`paymentEffectiveDate`.`date`) as toDoProperties_whoLivesWithYouSummary_paymentEffectiveDate_date, 
COALESCE(`_removed`.`toDoProperties`.`whoLivesWithYouSummary`.`primaryCarerName`, `toDoProperties`.`whoLivesWithYouSummary`.`primaryCarerName`) as toDoProperties_whoLivesWithYouSummary_primaryCarerName, 
COALESCE(`_removed`.`toDoProperties`.`whoLivesWithYouSummary`.`processId`, `toDoProperties`.`whoLivesWithYouSummary`.`processId`) as toDoProperties_whoLivesWithYouSummary_processId, 
COALESCE(CAST(`_removed`.`toDoProperties`.`whoLivesWithYouSummary`.`confirmationRequired` as STRING), CAST(`toDoProperties`.`whoLivesWithYouSummary`.`confirmationRequired` as STRING)) as toDoProperties_whoLivesWithYouSummary_confirmationRequired, 
COALESCE(CAST(`_removed`.`toDoProperties`.`whoLivesWithYouSummary`.`hideDetailsForPartnerDeclaration` as STRING), CAST(`toDoProperties`.`whoLivesWithYouSummary`.`hideDetailsForPartnerDeclaration` as STRING)) as toDoProperties_whoLivesWithYouSummary_hideDetailsForPartnerDeclaration, 
COALESCE(CAST(`_removed`.`toDoProperties`.`whoLivesWithYouSummary`.`perClaimant` as STRING), CAST(`toDoProperties`.`whoLivesWithYouSummary`.`perClaimant` as STRING)) as toDoProperties_whoLivesWithYouSummary_perClaimant, 
COALESCE(`_removed`.`toDoProperties`.`whoLivesWithYouSummary`.`type`, `toDoProperties`.`whoLivesWithYouSummary`.`type`) as toDoProperties_whoLivesWithYouSummary_type, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_who_lives_with_you_summary
 LATERAL VIEW OUTER EXPLODE(`toDoProperties`.`whoLivesWithYouSummary`.`children`) view_exploded_todoproperties_wholiveswithyousummary_children AS exploded_todoproperties_wholiveswithyousummary_children 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`toDoProperties`.`whoLivesWithYouSummary`.`children`) view_removed_exploded_todoproperties_wholiveswithyousummary_children AS removed_exploded_todoproperties_wholiveswithyousummary_children 
 
 where `_removed`.`toDoProperties`.`type`='WHO_LIVES_WITH_YOU_SUMMARY' or `toDoProperties`.`type`='WHO_LIVES_WITH_YOU_SUMMARY';


!echo ------------------------;
!echo ------------------------ journal_ApaApprovedJournalEntry;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_journal_journal_apaapprovedjournalentry
;

CREATE EXTERNAL TABLE src_core_journal_journal_apaapprovedjournalentry(
`journalEntryProperties` STRUCT<`apaTypes`:ARRAY<STRING>
,`apaAmount`:STRING
,`paymentDate`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`journalId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`journalEntryProperties`:STRUCT<`apaTypes`:ARRAY<STRING>
,`apaAmount`:STRING
,`paymentDate`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`journalId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/journal';

DROP TABLE IF EXISTS journal_ApaApprovedJournalEntry;

CREATE TABLE journal_apaapprovedjournalentry STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`journalEntryProperties`.`apaAmount`, `journalEntryProperties`.`apaAmount`) as journalEntryProperties_apaAmount, 
COALESCE(`removed_exploded_journalentryproperties_apatypes`, `exploded_journalentryproperties_apatypes`) as journalEntryProperties_apaTypes, 
COALESCE(`_removed`.`journalEntryProperties`.`paymentDate`, `journalEntryProperties`.`paymentDate`) as journalEntryProperties_paymentDate, 
COALESCE(`_removed`.`journalEntryProperties`.`type`, `journalEntryProperties`.`type`) as journalEntryProperties_type, 
COALESCE(`_removed`.`_id`.`journalId`, `_id`.`journalId`) as id FROM src_core_journal_journal_apaapprovedjournalentry
 LATERAL VIEW OUTER EXPLODE(`journalEntryProperties`.`apaTypes`) view_exploded_journalentryproperties_apatypes AS exploded_journalentryproperties_apatypes 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`journalEntryProperties`.`apaTypes`) view_removed_exploded_journalentryproperties_apatypes AS removed_exploded_journalentryproperties_apatypes 
 
 where `_removed`.`journalEntryProperties`.`type`='ApaApprovedJournalEntry' or `journalEntryProperties`.`type`='ApaApprovedJournalEntry';


!echo ------------------------;
!echo ------------------------ agent_todo_TIME_OFF_CARING;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_time_off_caring
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_time_off_caring(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`endDate`:STRING
,`personCaredForName`:STRING
,`startDate`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`endDate`:STRING
,`personCaredForName`:STRING
,`startDate`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_TIME_OFF_CARING;

CREATE TABLE agent_todo_time_off_caring STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`endDate`, `toDoProperties`.`endDate`) as toDoProperties_endDate, 
COALESCE(`_removed`.`toDoProperties`.`personCaredForName`, `toDoProperties`.`personCaredForName`) as toDoProperties_personCaredForName, 
COALESCE(`_removed`.`toDoProperties`.`startDate`, `toDoProperties`.`startDate`) as toDoProperties_startDate, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_time_off_caring
 src_agent_core_agenttodo_agent_todo_time_off_caring 
 where `_removed`.`toDoProperties`.`type`='TIME_OFF_CARING' or `toDoProperties`.`type`='TIME_OFF_CARING';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_CHECK_CIS_FOR_CARERS_ALLOWANCE_TO_DO_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_check_cis_for_carers_allowance_to_do_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_check_cis_for_carers_allowance_to_do_properties(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`assessmentPeriodId`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`assessmentPeriodId`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_CHECK_CIS_FOR_CARERS_ALLOWANCE_TO_DO_PROPERTIES;

CREATE TABLE agent_todo_archive_check_cis_for_carers_allowance_to_do_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`assessmentPeriodId`, `toDoProperties`.`assessmentPeriodId`) as toDoProperties_assessmentPeriodId, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_check_cis_for_carers_allowance_to_do_properties
 src_agent_core_agenttodoarchive_agent_todo_archive_check_cis_for_carers_allowance_to_do_properties 
 where `_removed`.`toDoProperties`.`type`='CHECK_CIS_FOR_CARERS_ALLOWANCE_TO_DO_PROPERTIES' or `toDoProperties`.`type`='CHECK_CIS_FOR_CARERS_ALLOWANCE_TO_DO_PROPERTIES';


!echo ------------------------;
!echo ------------------------ agent_todo_HRT_ENTITLEMENT_RECHECK_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_hrt_entitlement_recheck_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_hrt_entitlement_recheck_properties(
`toDoProperties` STRUCT<`declaration`:STRUCT<`effectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING>
,`_version`:STRING
,`createdDateTime`:STRING
,`processId`:STRING>
,`personDetails`:STRUCT<`createdDateTime`:STRUCT<`d_date`:STRING>
,`effectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING>
,`_version`:STRING
,`citizenId`:STRING
,`contactPreference`:STRING
,`contractId`:STRING
,`declarationId`:STRING
,`email`:STRING
,`firstName`:STRING
,`gender`:STRING
,`lastName`:STRING
,`middleName`:STRING
,`mobileNumber`:STRING
,`processId`:STRING
,`sanitisedFirstName`:STRING
,`sanitisedLastName`:STRING
,`sanitisedMiddleName`:STRING
,`verifiedUsingBioQuestionsOrThirdParty`:BOOLEAN
,`verifiedWithNameDateOfBirthOrAddressChange`:BOOLEAN
,`type`:STRING>
,`recheckReason`:STRING
,`sanctionId`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`declaration`:STRUCT<`effectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING>
,`_version`:STRING
,`createdDateTime`:STRING
,`processId`:STRING>
,`personDetails`:STRUCT<`createdDateTime`:STRUCT<`d_date`:STRING>
,`effectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING>
,`_version`:STRING
,`citizenId`:STRING
,`contactPreference`:STRING
,`contractId`:STRING
,`declarationId`:STRING
,`email`:STRING
,`firstName`:STRING
,`gender`:STRING
,`lastName`:STRING
,`middleName`:STRING
,`mobileNumber`:STRING
,`processId`:STRING
,`sanitisedFirstName`:STRING
,`sanitisedLastName`:STRING
,`sanitisedMiddleName`:STRING
,`verifiedUsingBioQuestionsOrThirdParty`:BOOLEAN
,`verifiedWithNameDateOfBirthOrAddressChange`:BOOLEAN
,`type`:STRING>
,`recheckReason`:STRING
,`sanctionId`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_HRT_ENTITLEMENT_RECHECK_PROPERTIES;

CREATE TABLE agent_todo_hrt_entitlement_recheck_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`declaration`.`_version`, `toDoProperties`.`declaration`.`_version`) as toDoProperties_declaration__version, 
COALESCE(`_removed`.`toDoProperties`.`declaration`.`createdDateTime`, `toDoProperties`.`declaration`.`createdDateTime`) as toDoProperties_declaration_createdDateTime, 
COALESCE(CAST(`_removed`.`toDoProperties`.`declaration`.`effectiveDate`.`hasDate` as STRING), CAST(`toDoProperties`.`declaration`.`effectiveDate`.`hasDate` as STRING)) as toDoProperties_declaration_effectiveDate_hasDate, 
COALESCE(`_removed`.`toDoProperties`.`declaration`.`effectiveDate`.`knownDate`, `toDoProperties`.`declaration`.`effectiveDate`.`knownDate`) as toDoProperties_declaration_effectiveDate_knownDate, 
COALESCE(`_removed`.`toDoProperties`.`declaration`.`processId`, `toDoProperties`.`declaration`.`processId`) as toDoProperties_declaration_processId, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`_version`, `toDoProperties`.`personDetails`.`_version`) as toDoProperties_personDetails__version, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`citizenId`, `toDoProperties`.`personDetails`.`citizenId`) as toDoProperties_personDetails_citizenId, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`contactPreference`, `toDoProperties`.`personDetails`.`contactPreference`) as toDoProperties_personDetails_contactPreference, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`contractId`, `toDoProperties`.`personDetails`.`contractId`) as toDoProperties_personDetails_contractId, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`toDoProperties`.`personDetails`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`toDoProperties`.`personDetails`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`personDetails`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`personDetails`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`personDetails`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`personDetails`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`toDoProperties`.`personDetails`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`toDoProperties`.`personDetails`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`toDoProperties`.`personDetails`.`createdDateTime`.`d_date`, LENGTH(`toDoProperties`.`personDetails`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`toDoProperties`.`personDetails`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`personDetails`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`toDoProperties`.`personDetails`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`personDetails`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`toDoProperties`.`personDetails`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`toDoProperties`.`personDetails`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as toDoProperties_personDetails_createdDateTime_d_date, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`declarationId`, `toDoProperties`.`personDetails`.`declarationId`) as toDoProperties_personDetails_declarationId, 
COALESCE(CAST(`_removed`.`toDoProperties`.`personDetails`.`effectiveDate`.`hasDate` as STRING), CAST(`toDoProperties`.`personDetails`.`effectiveDate`.`hasDate` as STRING)) as toDoProperties_personDetails_effectiveDate_hasDate, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`effectiveDate`.`knownDate`, `toDoProperties`.`personDetails`.`effectiveDate`.`knownDate`) as toDoProperties_personDetails_effectiveDate_knownDate, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`email`, `toDoProperties`.`personDetails`.`email`) as toDoProperties_personDetails_email, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`firstName`, `toDoProperties`.`personDetails`.`firstName`) as toDoProperties_personDetails_firstName, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`gender`, `toDoProperties`.`personDetails`.`gender`) as toDoProperties_personDetails_gender, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`lastName`, `toDoProperties`.`personDetails`.`lastName`) as toDoProperties_personDetails_lastName, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`middleName`, `toDoProperties`.`personDetails`.`middleName`) as toDoProperties_personDetails_middleName, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`mobileNumber`, `toDoProperties`.`personDetails`.`mobileNumber`) as toDoProperties_personDetails_mobileNumber, 
COALESCE(CAST(`_removed`.`toDoProperties`.`personDetails`.`paymentEffectiveDate`.`hasDate` as STRING), CAST(`toDoProperties`.`personDetails`.`paymentEffectiveDate`.`hasDate` as STRING)) as toDoProperties_personDetails_paymentEffectiveDate_hasDate, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`paymentEffectiveDate`.`knownDate`, `toDoProperties`.`personDetails`.`paymentEffectiveDate`.`knownDate`) as toDoProperties_personDetails_paymentEffectiveDate_knownDate, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`processId`, `toDoProperties`.`personDetails`.`processId`) as toDoProperties_personDetails_processId, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`sanitisedFirstName`, `toDoProperties`.`personDetails`.`sanitisedFirstName`) as toDoProperties_personDetails_sanitisedFirstName, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`sanitisedLastName`, `toDoProperties`.`personDetails`.`sanitisedLastName`) as toDoProperties_personDetails_sanitisedLastName, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`sanitisedMiddleName`, `toDoProperties`.`personDetails`.`sanitisedMiddleName`) as toDoProperties_personDetails_sanitisedMiddleName, 
COALESCE(CAST(`_removed`.`toDoProperties`.`personDetails`.`verifiedUsingBioQuestionsOrThirdParty` as STRING), CAST(`toDoProperties`.`personDetails`.`verifiedUsingBioQuestionsOrThirdParty` as STRING)) as toDoProperties_personDetails_verifiedUsingBioQuestionsOrThirdParty, 
COALESCE(CAST(`_removed`.`toDoProperties`.`personDetails`.`verifiedWithNameDateOfBirthOrAddressChange` as STRING), CAST(`toDoProperties`.`personDetails`.`verifiedWithNameDateOfBirthOrAddressChange` as STRING)) as toDoProperties_personDetails_verifiedWithNameDateOfBirthOrAddressChange, 
COALESCE(`_removed`.`toDoProperties`.`personDetails`.`type`, `toDoProperties`.`personDetails`.`type`) as toDoProperties_personDetails_type, 
COALESCE(`_removed`.`toDoProperties`.`recheckReason`, `toDoProperties`.`recheckReason`) as toDoProperties_recheckReason, 
COALESCE(`_removed`.`toDoProperties`.`sanctionId`, `toDoProperties`.`sanctionId`) as toDoProperties_sanctionId, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_hrt_entitlement_recheck_properties
 src_agent_core_agenttodo_agent_todo_hrt_entitlement_recheck_properties 
 where `_removed`.`toDoProperties`.`type`='HRT_ENTITLEMENT_RECHECK_PROPERTIES' or `toDoProperties`.`type`='HRT_ENTITLEMENT_RECHECK_PROPERTIES';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_EARNINGS;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_earnings
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_earnings(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`netEarningsForAssessmentPeriod`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`netEarningsForAssessmentPeriod`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_EARNINGS;

CREATE TABLE agent_todo_archive_earnings STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`netEarningsForAssessmentPeriod`, `toDoProperties`.`netEarningsForAssessmentPeriod`) as toDoProperties_netEarningsForAssessmentPeriod, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_earnings
 src_agent_core_agenttodoarchive_agent_todo_archive_earnings 
 where `_removed`.`toDoProperties`.`type`='EARNINGS' or `toDoProperties`.`type`='EARNINGS';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_SELF_EMPLOYED_EARNINGS_TO_DO_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_self_employed_earnings_to_do_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_self_employed_earnings_to_do_properties(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`assessmentPeriodId`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`assessmentPeriodId`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_SELF_EMPLOYED_EARNINGS_TO_DO_PROPERTIES;

CREATE TABLE agent_todo_archive_self_employed_earnings_to_do_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`assessmentPeriodId`, `toDoProperties`.`assessmentPeriodId`) as toDoProperties_assessmentPeriodId, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_self_employed_earnings_to_do_properties
 src_agent_core_agenttodoarchive_agent_todo_archive_self_employed_earnings_to_do_properties 
 where `_removed`.`toDoProperties`.`type`='SELF_EMPLOYED_EARNINGS_TO_DO_PROPERTIES' or `toDoProperties`.`type`='SELF_EMPLOYED_EARNINGS_TO_DO_PROPERTIES';


!echo ------------------------;
!echo ------------------------ agent_todo_FOR_ASSESSMENT_PERIOD_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_for_assessment_period_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_for_assessment_period_properties(
`toDoProperties` STRUCT<`untrustedAutoCalcReasons`:ARRAY<STRING>
,`assessmentPeriodId`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`untrustedAutoCalcReasons`:ARRAY<STRING>
,`assessmentPeriodId`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_FOR_ASSESSMENT_PERIOD_PROPERTIES;

CREATE TABLE agent_todo_for_assessment_period_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`assessmentPeriodId`, `toDoProperties`.`assessmentPeriodId`) as toDoProperties_assessmentPeriodId, 
COALESCE(`removed_exploded_todoproperties_untrustedautocalcreasons`, `exploded_todoproperties_untrustedautocalcreasons`) as toDoProperties_untrustedAutoCalcReasons, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_for_assessment_period_properties
 LATERAL VIEW OUTER EXPLODE(`toDoProperties`.`untrustedAutoCalcReasons`) view_exploded_todoproperties_untrustedautocalcreasons AS exploded_todoproperties_untrustedautocalcreasons 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`toDoProperties`.`untrustedAutoCalcReasons`) view_removed_exploded_todoproperties_untrustedautocalcreasons AS removed_exploded_todoproperties_untrustedautocalcreasons 
 
 where `_removed`.`toDoProperties`.`type`='FOR_ASSESSMENT_PERIOD_PROPERTIES' or `toDoProperties`.`type`='FOR_ASSESSMENT_PERIOD_PROPERTIES';


!echo ------------------------;
!echo ------------------------ journal_CompleteANewServicePilotJournalEntry;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_journal_journal_completeanewservicepilotjournalentry
;

CREATE EXTERNAL TABLE src_core_journal_journal_completeanewservicepilotjournalentry(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`journalEntryProperties` STRUCT<`type`:STRING>
,`_id` STRUCT<`journalId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`journalEntryProperties`:STRUCT<`type`:STRING>
,`_id`:STRUCT<`journalId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/journal';

DROP TABLE IF EXISTS journal_CompleteANewServicePilotJournalEntry;

CREATE TABLE journal_completeanewservicepilotjournalentry STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`journalEntryProperties`.`type`, `journalEntryProperties`.`type`) as journalEntryProperties_type, 
COALESCE(`_removed`.`_id`.`journalId`, `_id`.`journalId`) as id FROM src_core_journal_journal_completeanewservicepilotjournalentry
 src_core_journal_journal_completeanewservicepilotjournalentry 
 where `_removed`.`journalEntryProperties`.`type`='CompleteANewServicePilotJournalEntry' or `journalEntryProperties`.`type`='CompleteANewServicePilotJournalEntry';


!echo ------------------------;
!echo ------------------------ agent_todo_PREPARE_COMMITMENTS_TO_DO_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_prepare_commitments_to_do_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_prepare_commitments_to_do_properties(
`toDoProperties` STRUCT<`prepareToMeetWorkCoachOutcome`:STRUCT<`hoursAWeekOutcome`:STRUCT<`hoursAWeekFullTimeSearch`:BOOLEAN
,`hoursAWeekReason`:STRING>
,`travelToWorkOutcome`:STRUCT<`travelToWorkFullCommute`:BOOLEAN
,`travelToWorkReason`:STRING>
,`workHoursOutcome`:STRUCT<`workHoursFullTime`:BOOLEAN
,`workHoursReason`:STRING>
,`activities`:ARRAY<STRING>
,`jobs`:ARRAY<STRING>
,`claimantId`:STRING
,`contractId`:STRING
,`cvAvailable`:BOOLEAN
,`moreInformation`:STRING
,`prepareToMeetWorkCoachJourney`:STRING
,`qualificationsAndWorkExperience`:STRING>
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`prepareToMeetWorkCoachOutcome`:STRUCT<`hoursAWeekOutcome`:STRUCT<`hoursAWeekFullTimeSearch`:BOOLEAN
,`hoursAWeekReason`:STRING>
,`travelToWorkOutcome`:STRUCT<`travelToWorkFullCommute`:BOOLEAN
,`travelToWorkReason`:STRING>
,`workHoursOutcome`:STRUCT<`workHoursFullTime`:BOOLEAN
,`workHoursReason`:STRING>
,`activities`:ARRAY<STRING>
,`jobs`:ARRAY<STRING>
,`claimantId`:STRING
,`contractId`:STRING
,`cvAvailable`:BOOLEAN
,`moreInformation`:STRING
,`prepareToMeetWorkCoachJourney`:STRING
,`qualificationsAndWorkExperience`:STRING>
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_PREPARE_COMMITMENTS_TO_DO_PROPERTIES;

CREATE TABLE agent_todo_prepare_commitments_to_do_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`removed_exploded_todoproperties_preparetomeetworkcoachoutcome_activities`, `exploded_todoproperties_preparetomeetworkcoachoutcome_activities`) as toDoProperties_prepareToMeetWorkCoachOutcome_activities, 
COALESCE(`_removed`.`toDoProperties`.`prepareToMeetWorkCoachOutcome`.`claimantId`, `toDoProperties`.`prepareToMeetWorkCoachOutcome`.`claimantId`) as toDoProperties_prepareToMeetWorkCoachOutcome_claimantId, 
COALESCE(`_removed`.`toDoProperties`.`prepareToMeetWorkCoachOutcome`.`contractId`, `toDoProperties`.`prepareToMeetWorkCoachOutcome`.`contractId`) as toDoProperties_prepareToMeetWorkCoachOutcome_contractId, 
COALESCE(CAST(`_removed`.`toDoProperties`.`prepareToMeetWorkCoachOutcome`.`cvAvailable` as STRING), CAST(`toDoProperties`.`prepareToMeetWorkCoachOutcome`.`cvAvailable` as STRING)) as toDoProperties_prepareToMeetWorkCoachOutcome_cvAvailable, 
COALESCE(CAST(`_removed`.`toDoProperties`.`prepareToMeetWorkCoachOutcome`.`hoursAWeekOutcome`.`hoursAWeekFullTimeSearch` as STRING), CAST(`toDoProperties`.`prepareToMeetWorkCoachOutcome`.`hoursAWeekOutcome`.`hoursAWeekFullTimeSearch` as STRING)) as toDoProperties_prepareToMeetWorkCoachOutcome_hoursAWeekOutcome_hoursAWeekFullTimeSearch, 
COALESCE(`_removed`.`toDoProperties`.`prepareToMeetWorkCoachOutcome`.`hoursAWeekOutcome`.`hoursAWeekReason`, `toDoProperties`.`prepareToMeetWorkCoachOutcome`.`hoursAWeekOutcome`.`hoursAWeekReason`) as toDoProperties_prepareToMeetWorkCoachOutcome_hoursAWeekOutcome_hoursAWeekReason, 
COALESCE(`removed_exploded_todoproperties_preparetomeetworkcoachoutcome_jobs`, `exploded_todoproperties_preparetomeetworkcoachoutcome_jobs`) as toDoProperties_prepareToMeetWorkCoachOutcome_jobs, 
COALESCE(`_removed`.`toDoProperties`.`prepareToMeetWorkCoachOutcome`.`moreInformation`, `toDoProperties`.`prepareToMeetWorkCoachOutcome`.`moreInformation`) as toDoProperties_prepareToMeetWorkCoachOutcome_moreInformation, 
COALESCE(`_removed`.`toDoProperties`.`prepareToMeetWorkCoachOutcome`.`prepareToMeetWorkCoachJourney`, `toDoProperties`.`prepareToMeetWorkCoachOutcome`.`prepareToMeetWorkCoachJourney`) as toDoProperties_prepareToMeetWorkCoachOutcome_prepareToMeetWorkCoachJourney, 
COALESCE(`_removed`.`toDoProperties`.`prepareToMeetWorkCoachOutcome`.`qualificationsAndWorkExperience`, `toDoProperties`.`prepareToMeetWorkCoachOutcome`.`qualificationsAndWorkExperience`) as toDoProperties_prepareToMeetWorkCoachOutcome_qualificationsAndWorkExperience, 
COALESCE(CAST(`_removed`.`toDoProperties`.`prepareToMeetWorkCoachOutcome`.`travelToWorkOutcome`.`travelToWorkFullCommute` as STRING), CAST(`toDoProperties`.`prepareToMeetWorkCoachOutcome`.`travelToWorkOutcome`.`travelToWorkFullCommute` as STRING)) as toDoProperties_prepareToMeetWorkCoachOutcome_travelToWorkOutcome_travelToWorkFullCommute, 
COALESCE(`_removed`.`toDoProperties`.`prepareToMeetWorkCoachOutcome`.`travelToWorkOutcome`.`travelToWorkReason`, `toDoProperties`.`prepareToMeetWorkCoachOutcome`.`travelToWorkOutcome`.`travelToWorkReason`) as toDoProperties_prepareToMeetWorkCoachOutcome_travelToWorkOutcome_travelToWorkReason, 
COALESCE(CAST(`_removed`.`toDoProperties`.`prepareToMeetWorkCoachOutcome`.`workHoursOutcome`.`workHoursFullTime` as STRING), CAST(`toDoProperties`.`prepareToMeetWorkCoachOutcome`.`workHoursOutcome`.`workHoursFullTime` as STRING)) as toDoProperties_prepareToMeetWorkCoachOutcome_workHoursOutcome_workHoursFullTime, 
COALESCE(`_removed`.`toDoProperties`.`prepareToMeetWorkCoachOutcome`.`workHoursOutcome`.`workHoursReason`, `toDoProperties`.`prepareToMeetWorkCoachOutcome`.`workHoursOutcome`.`workHoursReason`) as toDoProperties_prepareToMeetWorkCoachOutcome_workHoursOutcome_workHoursReason, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_prepare_commitments_to_do_properties
 LATERAL VIEW OUTER EXPLODE(`toDoProperties`.`prepareToMeetWorkCoachOutcome`.`activities`) view_exploded_todoproperties_preparetomeetworkcoachoutcome_activities AS exploded_todoproperties_preparetomeetworkcoachoutcome_activities 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`toDoProperties`.`prepareToMeetWorkCoachOutcome`.`activities`) view_removed_exploded_todoproperties_preparetomeetworkcoachoutcome_activities AS removed_exploded_todoproperties_preparetomeetworkcoachoutcome_activities 
 LATERAL VIEW OUTER EXPLODE(`toDoProperties`.`prepareToMeetWorkCoachOutcome`.`jobs`) view_exploded_todoproperties_preparetomeetworkcoachoutcome_jobs AS exploded_todoproperties_preparetomeetworkcoachoutcome_jobs 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`toDoProperties`.`prepareToMeetWorkCoachOutcome`.`jobs`) view_removed_exploded_todoproperties_preparetomeetworkcoachoutcome_jobs AS removed_exploded_todoproperties_preparetomeetworkcoachoutcome_jobs 
 
 where `_removed`.`toDoProperties`.`type`='PREPARE_COMMITMENTS_TO_DO_PROPERTIES' or `toDoProperties`.`type`='PREPARE_COMMITMENTS_TO_DO_PROPERTIES';


!echo ------------------------;
!echo ------------------------ journal_AdhocTodoJournalEntry;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_journal_journal_adhoctodojournalentry
;

CREATE EXTERNAL TABLE src_core_journal_journal_adhoctodojournalentry(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`journalEntryProperties` STRUCT<`deadlineDate`:STRING
,`deadlineTime`:STRING
,`description`:STRING
,`notes`:STRING
,`title`:STRING
,`type`:STRING>
,`_id` STRUCT<`journalId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`journalEntryProperties`:STRUCT<`deadlineDate`:STRING
,`deadlineTime`:STRING
,`description`:STRING
,`notes`:STRING
,`title`:STRING
,`type`:STRING>
,`_id`:STRUCT<`journalId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/journal';

DROP TABLE IF EXISTS journal_AdhocTodoJournalEntry;

CREATE TABLE journal_adhoctodojournalentry STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`journalEntryProperties`.`deadlineDate`, `journalEntryProperties`.`deadlineDate`) as journalEntryProperties_deadlineDate, 
COALESCE(`_removed`.`journalEntryProperties`.`deadlineTime`, `journalEntryProperties`.`deadlineTime`) as journalEntryProperties_deadlineTime, 
COALESCE(`_removed`.`journalEntryProperties`.`description`, `journalEntryProperties`.`description`) as journalEntryProperties_description, 
COALESCE(`_removed`.`journalEntryProperties`.`notes`, `journalEntryProperties`.`notes`) as journalEntryProperties_notes, 
COALESCE(`_removed`.`journalEntryProperties`.`title`, `journalEntryProperties`.`title`) as journalEntryProperties_title, 
COALESCE(`_removed`.`journalEntryProperties`.`type`, `journalEntryProperties`.`type`) as journalEntryProperties_type, 
COALESCE(`_removed`.`_id`.`journalId`, `_id`.`journalId`) as id FROM src_core_journal_journal_adhoctodojournalentry
 src_core_journal_journal_adhoctodojournalentry 
 where `_removed`.`journalEntryProperties`.`type`='AdhocTodoJournalEntry' or `journalEntryProperties`.`type`='AdhocTodoJournalEntry';


!echo ------------------------;
!echo ------------------------ journal_legacySanctionRemovedJournalEntry;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_journal_journal_legacysanctionremovedjournalentry
;

CREATE EXTERNAL TABLE src_core_journal_journal_legacysanctionremovedjournalentry(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`journalEntryProperties` STRUCT<`durationInDays`:STRING
,`failureDate`:STRING
,`originalBenefitType`:STRING
,`type`:STRING>
,`_id` STRUCT<`journalId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`journalEntryProperties`:STRUCT<`durationInDays`:STRING
,`failureDate`:STRING
,`originalBenefitType`:STRING
,`type`:STRING>
,`_id`:STRUCT<`journalId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/journal';

DROP TABLE IF EXISTS journal_legacySanctionRemovedJournalEntry;

CREATE TABLE journal_legacysanctionremovedjournalentry STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`journalEntryProperties`.`durationInDays`, `journalEntryProperties`.`durationInDays`) as journalEntryProperties_durationInDays, 
COALESCE(`_removed`.`journalEntryProperties`.`failureDate`, `journalEntryProperties`.`failureDate`) as journalEntryProperties_failureDate, 
COALESCE(`_removed`.`journalEntryProperties`.`originalBenefitType`, `journalEntryProperties`.`originalBenefitType`) as journalEntryProperties_originalBenefitType, 
COALESCE(`_removed`.`journalEntryProperties`.`type`, `journalEntryProperties`.`type`) as journalEntryProperties_type, 
COALESCE(`_removed`.`_id`.`journalId`, `_id`.`journalId`) as id FROM src_core_journal_journal_legacysanctionremovedjournalentry
 src_core_journal_journal_legacysanctionremovedjournalentry 
 where `_removed`.`journalEntryProperties`.`type`='legacySanctionRemovedJournalEntry' or `journalEntryProperties`.`type`='legacySanctionRemovedJournalEntry';


!echo ------------------------;
!echo ------------------------ journal_CarerStartedSummaryJournalEntry;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_journal_journal_carerstartedsummaryjournalentry
;

CREATE EXTERNAL TABLE src_core_journal_journal_carerstartedsummaryjournalentry(
`journalEntryProperties` STRUCT<`carerSummary`:STRUCT<`caringCircumstancesSummary`:STRUCT<`caringForSomeone`:BOOLEAN
,`personReceivesBenefit`:BOOLEAN>
,`claimantDeclaredChanges`:STRUCT<`d_date`:STRING>
,`dateOfChange`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`otherCaringResponsibilitiesSummary`:STRUCT<`caringForSomeoneElse`:BOOLEAN
,`personReceivesBenefit`:BOOLEAN>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`stoppedCaringCircumstancesSummary`:STRUCT<`dateStoppedCaring`:STRING
,`dueToDeath`:BOOLEAN>
,`timeOffCircumstancesSummary`:STRUCT<`endDate`:STRING
,`startDate`:STRING>
,`whoYouCareForCircumstancesSummary`:STRUCT<`addressNumber`:STRING
,`dateOfBirth`:STRING
,`firstName`:STRING
,`lastName`:STRING
,`middleName`:STRING
,`postcode`:STRING
,`relationship`:STRING
,`townCity`:STRING>
,`claimantId`:STRING
,`contractId`:STRING
,`moreThan35Hours`:BOOLEAN
,`name`:STRING
,`processId`:STRING
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`journalId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`journalEntryProperties`:STRUCT<`carerSummary`:STRUCT<`caringCircumstancesSummary`:STRUCT<`caringForSomeone`:BOOLEAN
,`personReceivesBenefit`:BOOLEAN>
,`claimantDeclaredChanges`:STRUCT<`d_date`:STRING>
,`dateOfChange`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`otherCaringResponsibilitiesSummary`:STRUCT<`caringForSomeoneElse`:BOOLEAN
,`personReceivesBenefit`:BOOLEAN>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`stoppedCaringCircumstancesSummary`:STRUCT<`dateStoppedCaring`:STRING
,`dueToDeath`:BOOLEAN>
,`timeOffCircumstancesSummary`:STRUCT<`endDate`:STRING
,`startDate`:STRING>
,`whoYouCareForCircumstancesSummary`:STRUCT<`addressNumber`:STRING
,`dateOfBirth`:STRING
,`firstName`:STRING
,`lastName`:STRING
,`middleName`:STRING
,`postcode`:STRING
,`relationship`:STRING
,`townCity`:STRING>
,`claimantId`:STRING
,`contractId`:STRING
,`moreThan35Hours`:BOOLEAN
,`name`:STRING
,`processId`:STRING
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`journalId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/journal';

DROP TABLE IF EXISTS journal_CarerStartedSummaryJournalEntry;

CREATE TABLE journal_carerstartedsummaryjournalentry STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`carerSummary`.`caringCircumstancesSummary`.`caringForSomeone` as STRING), CAST(`journalEntryProperties`.`carerSummary`.`caringCircumstancesSummary`.`caringForSomeone` as STRING)) as journalEntryProperties_carerSummary_caringCircumstancesSummary_caringForSomeone, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`carerSummary`.`caringCircumstancesSummary`.`personReceivesBenefit` as STRING), CAST(`journalEntryProperties`.`carerSummary`.`caringCircumstancesSummary`.`personReceivesBenefit` as STRING)) as journalEntryProperties_carerSummary_caringCircumstancesSummary_personReceivesBenefit, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`journalEntryProperties`.`carerSummary`.`claimantDeclaredChanges`.`d_date`, LENGTH(`_removed`.`journalEntryProperties`.`carerSummary`.`claimantDeclaredChanges`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`journalEntryProperties`.`carerSummary`.`claimantDeclaredChanges`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`journalEntryProperties`.`carerSummary`.`claimantDeclaredChanges`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`journalEntryProperties`.`carerSummary`.`claimantDeclaredChanges`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`journalEntryProperties`.`carerSummary`.`claimantDeclaredChanges`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`journalEntryProperties`.`carerSummary`.`claimantDeclaredChanges`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`journalEntryProperties`.`carerSummary`.`claimantDeclaredChanges`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`journalEntryProperties`.`carerSummary`.`claimantDeclaredChanges`.`d_date`, LENGTH(`journalEntryProperties`.`carerSummary`.`claimantDeclaredChanges`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`journalEntryProperties`.`carerSummary`.`claimantDeclaredChanges`.`d_date`, 1, 10), ' ', SUBSTR(`journalEntryProperties`.`carerSummary`.`claimantDeclaredChanges`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`journalEntryProperties`.`carerSummary`.`claimantDeclaredChanges`.`d_date`, 1, 10), ' ', SUBSTR(`journalEntryProperties`.`carerSummary`.`claimantDeclaredChanges`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`journalEntryProperties`.`carerSummary`.`claimantDeclaredChanges`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`journalEntryProperties`.`carerSummary`.`claimantDeclaredChanges`.`d_date`, 21, 3)) AS TIMESTAMP) END) as journalEntryProperties_carerSummary_claimantDeclaredChanges_d_date, 
COALESCE(`_removed`.`journalEntryProperties`.`carerSummary`.`claimantId`, `journalEntryProperties`.`carerSummary`.`claimantId`) as journalEntryProperties_carerSummary_claimantId, 
COALESCE(`_removed`.`journalEntryProperties`.`carerSummary`.`contractId`, `journalEntryProperties`.`carerSummary`.`contractId`) as journalEntryProperties_carerSummary_contractId, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`carerSummary`.`dateOfChange`.`hasDate` as STRING), CAST(`journalEntryProperties`.`carerSummary`.`dateOfChange`.`hasDate` as STRING)) as journalEntryProperties_carerSummary_dateOfChange_hasDate, 
COALESCE(`_removed`.`journalEntryProperties`.`carerSummary`.`dateOfChange`.`knownDate`, `journalEntryProperties`.`carerSummary`.`dateOfChange`.`knownDate`) as journalEntryProperties_carerSummary_dateOfChange_knownDate, 
COALESCE(`_removed`.`journalEntryProperties`.`carerSummary`.`dateOfChange`.`type`, `journalEntryProperties`.`carerSummary`.`dateOfChange`.`type`) as journalEntryProperties_carerSummary_dateOfChange_type, 
COALESCE(`_removed`.`journalEntryProperties`.`carerSummary`.`dateOfChange`.`date`, `journalEntryProperties`.`carerSummary`.`dateOfChange`.`date`) as journalEntryProperties_carerSummary_dateOfChange_date, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`carerSummary`.`moreThan35Hours` as STRING), CAST(`journalEntryProperties`.`carerSummary`.`moreThan35Hours` as STRING)) as journalEntryProperties_carerSummary_moreThan35Hours, 
COALESCE(`_removed`.`journalEntryProperties`.`carerSummary`.`name`, `journalEntryProperties`.`carerSummary`.`name`) as journalEntryProperties_carerSummary_name, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`carerSummary`.`otherCaringResponsibilitiesSummary`.`caringForSomeoneElse` as STRING), CAST(`journalEntryProperties`.`carerSummary`.`otherCaringResponsibilitiesSummary`.`caringForSomeoneElse` as STRING)) as journalEntryProperties_carerSummary_otherCaringResponsibilitiesSummary_caringForSomeoneElse, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`carerSummary`.`otherCaringResponsibilitiesSummary`.`personReceivesBenefit` as STRING), CAST(`journalEntryProperties`.`carerSummary`.`otherCaringResponsibilitiesSummary`.`personReceivesBenefit` as STRING)) as journalEntryProperties_carerSummary_otherCaringResponsibilitiesSummary_personReceivesBenefit, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`carerSummary`.`paymentEffectiveDate`.`hasDate` as STRING), CAST(`journalEntryProperties`.`carerSummary`.`paymentEffectiveDate`.`hasDate` as STRING)) as journalEntryProperties_carerSummary_paymentEffectiveDate_hasDate, 
COALESCE(`_removed`.`journalEntryProperties`.`carerSummary`.`paymentEffectiveDate`.`knownDate`, `journalEntryProperties`.`carerSummary`.`paymentEffectiveDate`.`knownDate`) as journalEntryProperties_carerSummary_paymentEffectiveDate_knownDate, 
COALESCE(`_removed`.`journalEntryProperties`.`carerSummary`.`paymentEffectiveDate`.`type`, `journalEntryProperties`.`carerSummary`.`paymentEffectiveDate`.`type`) as journalEntryProperties_carerSummary_paymentEffectiveDate_type, 
COALESCE(`_removed`.`journalEntryProperties`.`carerSummary`.`paymentEffectiveDate`.`date`, `journalEntryProperties`.`carerSummary`.`paymentEffectiveDate`.`date`) as journalEntryProperties_carerSummary_paymentEffectiveDate_date, 
COALESCE(`_removed`.`journalEntryProperties`.`carerSummary`.`processId`, `journalEntryProperties`.`carerSummary`.`processId`) as journalEntryProperties_carerSummary_processId, 
COALESCE(`_removed`.`journalEntryProperties`.`carerSummary`.`stoppedCaringCircumstancesSummary`.`dateStoppedCaring`, `journalEntryProperties`.`carerSummary`.`stoppedCaringCircumstancesSummary`.`dateStoppedCaring`) as journalEntryProperties_carerSummary_stoppedCaringCircumstancesSummary_dateStoppedCaring, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`carerSummary`.`stoppedCaringCircumstancesSummary`.`dueToDeath` as STRING), CAST(`journalEntryProperties`.`carerSummary`.`stoppedCaringCircumstancesSummary`.`dueToDeath` as STRING)) as journalEntryProperties_carerSummary_stoppedCaringCircumstancesSummary_dueToDeath, 
COALESCE(`_removed`.`journalEntryProperties`.`carerSummary`.`timeOffCircumstancesSummary`.`endDate`, `journalEntryProperties`.`carerSummary`.`timeOffCircumstancesSummary`.`endDate`) as journalEntryProperties_carerSummary_timeOffCircumstancesSummary_endDate, 
COALESCE(`_removed`.`journalEntryProperties`.`carerSummary`.`timeOffCircumstancesSummary`.`startDate`, `journalEntryProperties`.`carerSummary`.`timeOffCircumstancesSummary`.`startDate`) as journalEntryProperties_carerSummary_timeOffCircumstancesSummary_startDate, 
COALESCE(`_removed`.`journalEntryProperties`.`carerSummary`.`whoYouCareForCircumstancesSummary`.`addressNumber`, `journalEntryProperties`.`carerSummary`.`whoYouCareForCircumstancesSummary`.`addressNumber`) as journalEntryProperties_carerSummary_whoYouCareForCircumstancesSummary_addressNumber, 
COALESCE(`_removed`.`journalEntryProperties`.`carerSummary`.`whoYouCareForCircumstancesSummary`.`dateOfBirth`, `journalEntryProperties`.`carerSummary`.`whoYouCareForCircumstancesSummary`.`dateOfBirth`) as journalEntryProperties_carerSummary_whoYouCareForCircumstancesSummary_dateOfBirth, 
COALESCE(`_removed`.`journalEntryProperties`.`carerSummary`.`whoYouCareForCircumstancesSummary`.`firstName`, `journalEntryProperties`.`carerSummary`.`whoYouCareForCircumstancesSummary`.`firstName`) as journalEntryProperties_carerSummary_whoYouCareForCircumstancesSummary_firstName, 
COALESCE(`_removed`.`journalEntryProperties`.`carerSummary`.`whoYouCareForCircumstancesSummary`.`lastName`, `journalEntryProperties`.`carerSummary`.`whoYouCareForCircumstancesSummary`.`lastName`) as journalEntryProperties_carerSummary_whoYouCareForCircumstancesSummary_lastName, 
COALESCE(`_removed`.`journalEntryProperties`.`carerSummary`.`whoYouCareForCircumstancesSummary`.`middleName`, `journalEntryProperties`.`carerSummary`.`whoYouCareForCircumstancesSummary`.`middleName`) as journalEntryProperties_carerSummary_whoYouCareForCircumstancesSummary_middleName, 
COALESCE(`_removed`.`journalEntryProperties`.`carerSummary`.`whoYouCareForCircumstancesSummary`.`postcode`, `journalEntryProperties`.`carerSummary`.`whoYouCareForCircumstancesSummary`.`postcode`) as journalEntryProperties_carerSummary_whoYouCareForCircumstancesSummary_postcode, 
COALESCE(`_removed`.`journalEntryProperties`.`carerSummary`.`whoYouCareForCircumstancesSummary`.`relationship`, `journalEntryProperties`.`carerSummary`.`whoYouCareForCircumstancesSummary`.`relationship`) as journalEntryProperties_carerSummary_whoYouCareForCircumstancesSummary_relationship, 
COALESCE(`_removed`.`journalEntryProperties`.`carerSummary`.`whoYouCareForCircumstancesSummary`.`townCity`, `journalEntryProperties`.`carerSummary`.`whoYouCareForCircumstancesSummary`.`townCity`) as journalEntryProperties_carerSummary_whoYouCareForCircumstancesSummary_townCity, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`carerSummary`.`confirmationRequired` as STRING), CAST(`journalEntryProperties`.`carerSummary`.`confirmationRequired` as STRING)) as journalEntryProperties_carerSummary_confirmationRequired, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`carerSummary`.`hideDetailsForPartnerDeclaration` as STRING), CAST(`journalEntryProperties`.`carerSummary`.`hideDetailsForPartnerDeclaration` as STRING)) as journalEntryProperties_carerSummary_hideDetailsForPartnerDeclaration, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`carerSummary`.`perClaimant` as STRING), CAST(`journalEntryProperties`.`carerSummary`.`perClaimant` as STRING)) as journalEntryProperties_carerSummary_perClaimant, 
COALESCE(`_removed`.`journalEntryProperties`.`carerSummary`.`type`, `journalEntryProperties`.`carerSummary`.`type`) as journalEntryProperties_carerSummary_type, 
COALESCE(`_removed`.`journalEntryProperties`.`type`, `journalEntryProperties`.`type`) as journalEntryProperties_type, 
COALESCE(`_removed`.`_id`.`journalId`, `_id`.`journalId`) as id FROM src_core_journal_journal_carerstartedsummaryjournalentry
 src_core_journal_journal_carerstartedsummaryjournalentry 
 where `_removed`.`journalEntryProperties`.`type`='CarerStartedSummaryJournalEntry' or `journalEntryProperties`.`type`='CarerStartedSummaryJournalEntry';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_REJECTED_CARING;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_rejected_caring
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_rejected_caring(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`decisionNotes`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`decisionNotes`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_REJECTED_CARING;

CREATE TABLE agent_todo_archive_rejected_caring STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`decisionNotes`, `toDoProperties`.`decisionNotes`) as toDoProperties_decisionNotes, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_rejected_caring
 src_agent_core_agenttodoarchive_agent_todo_archive_rejected_caring 
 where `_removed`.`toDoProperties`.`type`='REJECTED_CARING' or `toDoProperties`.`type`='REJECTED_CARING';


!echo ------------------------;
!echo ------------------------ agent_todo_MAKE_A_PAYMENT_TODO_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_make_a_payment_todo_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_make_a_payment_todo_properties(
`toDoProperties` STRUCT<`schedulingProperties`:STRUCT<`amount`:STRING
,`netAmount`:STRING
,`orderNumber`:STRING
,`paymentDueDate`:STRING
,`scheduledPaymentsId`:STRING
,`totalPaymentCount`:STRING>
,`assessmentPeriodId`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`schedulingProperties`:STRUCT<`amount`:STRING
,`netAmount`:STRING
,`orderNumber`:STRING
,`paymentDueDate`:STRING
,`scheduledPaymentsId`:STRING
,`totalPaymentCount`:STRING>
,`assessmentPeriodId`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_MAKE_A_PAYMENT_TODO_PROPERTIES;

CREATE TABLE agent_todo_make_a_payment_todo_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`assessmentPeriodId`, `toDoProperties`.`assessmentPeriodId`) as toDoProperties_assessmentPeriodId, 
COALESCE(`_removed`.`toDoProperties`.`schedulingProperties`.`amount`, `toDoProperties`.`schedulingProperties`.`amount`) as toDoProperties_schedulingProperties_amount, 
COALESCE(`_removed`.`toDoProperties`.`schedulingProperties`.`netAmount`, `toDoProperties`.`schedulingProperties`.`netAmount`) as toDoProperties_schedulingProperties_netAmount, 
COALESCE(`_removed`.`toDoProperties`.`schedulingProperties`.`orderNumber`, `toDoProperties`.`schedulingProperties`.`orderNumber`) as toDoProperties_schedulingProperties_orderNumber, 
COALESCE(`_removed`.`toDoProperties`.`schedulingProperties`.`paymentDueDate`, `toDoProperties`.`schedulingProperties`.`paymentDueDate`) as toDoProperties_schedulingProperties_paymentDueDate, 
COALESCE(`_removed`.`toDoProperties`.`schedulingProperties`.`scheduledPaymentsId`, `toDoProperties`.`schedulingProperties`.`scheduledPaymentsId`) as toDoProperties_schedulingProperties_scheduledPaymentsId, 
COALESCE(`_removed`.`toDoProperties`.`schedulingProperties`.`totalPaymentCount`, `toDoProperties`.`schedulingProperties`.`totalPaymentCount`) as toDoProperties_schedulingProperties_totalPaymentCount, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_make_a_payment_todo_properties
 src_agent_core_agenttodo_agent_todo_make_a_payment_todo_properties 
 where `_removed`.`toDoProperties`.`type`='MAKE_A_PAYMENT_TODO_PROPERTIES' or `toDoProperties`.`type`='MAKE_A_PAYMENT_TODO_PROPERTIES';


!echo ------------------------;
!echo ------------------------ journal_FlexDirectPaymentToLandlordAgentToDoJournalEntry;
!echo ------------------------;
DROP TABLE IF EXISTS src_core_journal_journal_flexdirectpaymenttolandlordagenttodojournalentry
;

CREATE EXTERNAL TABLE src_core_journal_journal_flexdirectpaymenttolandlordagenttodojournalentry(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`journalEntryProperties` STRUCT<`directPaymentToLandlordStarted`:BOOLEAN
,`estimatedPaymentAmount`:STRING
,`paymentDate`:STRING
,`type`:STRING>
,`_id` STRUCT<`journalId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`journalEntryProperties`:STRUCT<`directPaymentToLandlordStarted`:BOOLEAN
,`estimatedPaymentAmount`:STRING
,`paymentDate`:STRING
,`type`:STRING>
,`_id`:STRUCT<`journalId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/core/journal';

DROP TABLE IF EXISTS journal_FlexDirectPaymentToLandlordAgentToDoJournalEntry;

CREATE TABLE journal_flexdirectpaymenttolandlordagenttodojournalentry STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(CAST(`_removed`.`journalEntryProperties`.`directPaymentToLandlordStarted` as STRING), CAST(`journalEntryProperties`.`directPaymentToLandlordStarted` as STRING)) as journalEntryProperties_directPaymentToLandlordStarted, 
COALESCE(`_removed`.`journalEntryProperties`.`estimatedPaymentAmount`, `journalEntryProperties`.`estimatedPaymentAmount`) as journalEntryProperties_estimatedPaymentAmount, 
COALESCE(`_removed`.`journalEntryProperties`.`paymentDate`, `journalEntryProperties`.`paymentDate`) as journalEntryProperties_paymentDate, 
COALESCE(`_removed`.`journalEntryProperties`.`type`, `journalEntryProperties`.`type`) as journalEntryProperties_type, 
COALESCE(`_removed`.`_id`.`journalId`, `_id`.`journalId`) as id FROM src_core_journal_journal_flexdirectpaymenttolandlordagenttodojournalentry
 src_core_journal_journal_flexdirectpaymenttolandlordagenttodojournalentry 
 where `_removed`.`journalEntryProperties`.`type`='FlexDirectPaymentToLandlordAgentToDoJournalEntry' or `journalEntryProperties`.`type`='FlexDirectPaymentToLandlordAgentToDoJournalEntry';


!echo ------------------------;
!echo ------------------------ agent_todo_EARNINGS;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_earnings
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_earnings(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`netEarningsForAssessmentPeriod`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`netEarningsForAssessmentPeriod`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_EARNINGS;

CREATE TABLE agent_todo_earnings STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`netEarningsForAssessmentPeriod`, `toDoProperties`.`netEarningsForAssessmentPeriod`) as toDoProperties_netEarningsForAssessmentPeriod, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_earnings
 src_agent_core_agenttodo_agent_todo_earnings 
 where `_removed`.`toDoProperties`.`type`='EARNINGS' or `toDoProperties`.`type`='EARNINGS';


!echo ------------------------;
!echo ------------------------ agent_todo_SCOTTISH_FLEX_DIRECT_PAYMENT_TO_LANDLORD;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_scottish_flex_direct_payment_to_landlord
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_scottish_flex_direct_payment_to_landlord(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`claimantToDoId`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`claimantToDoId`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_SCOTTISH_FLEX_DIRECT_PAYMENT_TO_LANDLORD;

CREATE TABLE agent_todo_scottish_flex_direct_payment_to_landlord STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`claimantToDoId`, `toDoProperties`.`claimantToDoId`) as toDoProperties_claimantToDoId, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_scottish_flex_direct_payment_to_landlord
 src_agent_core_agenttodo_agent_todo_scottish_flex_direct_payment_to_landlord 
 where `_removed`.`toDoProperties`.`type`='SCOTTISH_FLEX_DIRECT_PAYMENT_TO_LANDLORD' or `toDoProperties`.`type`='SCOTTISH_FLEX_DIRECT_PAYMENT_TO_LANDLORD';


!echo ------------------------;
!echo ------------------------ agent_todo_VERIFY_SOCIAL_HOUSING_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_verify_social_housing_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_verify_social_housing_properties(
`toDoProperties` STRUCT<`agreeAndUpdateChangesProcessContext`:STRUCT<`updatedHousingSummary`:STRUCT<`rentalSummary`:STRUCT<`jointTenancySummary`:STRUCT<`totalRent`:STRUCT<`monthlyAmount`:STRING
,`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`totalServiceChargePayment`:STRUCT<`monthlyAmount`:STRING
,`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`numberLivingWith`:STRING>
,`socialRentalSummary`:STRUCT<`serviceChargePayment`:STRUCT<`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`rentFreeWeeks`:STRING>
,`privateRentalSummary`:STRUCT<`financialInterest`:BOOLEAN
,`landlordLivesWithYou`:BOOLEAN
,`landlordRelative`:BOOLEAN>
,`rentalPayment`:STRUCT<`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`tenancyAgreementSummary`:STRUCT<`bothYouAndPartnerNamedOnTenancyOrRentalAgreement`:BOOLEAN
,`jointTenancyWithSomeoneOtherThanPartner`:BOOLEAN>
,`dateMovedToAddress`:STRING
,`landlordName`:STRING
,`numberBedrooms`:STRING>
,`ownHomeSummary`:STRUCT<`mortgageDetailsList`:ARRAY<STRUCT<`amount`:STRING
,`forDisabilityAdaptation`:BOOLEAN
,`lender`:STRING
,`lenderCode`:STRING
,`loanReferenceNumber`:STRING
,`mortgageDetailsId`:STRING
>>
,`serviceChargeDetails`:STRUCT<`amount`:STRING
,`frequency`:STRING>
,`hasMortgage`:BOOLEAN
,`paysServiceCharges`:BOOLEAN>
,`councilTax`:STRUCT<`appliedToCouncilTaxReduction`:STRING
,`councilTaxInClaimantName`:BOOLEAN>
,`dateOfChange`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`noApplicableHousingCostsSummary`:STRUCT<`noApplicableHousingCostsType`:STRING>
,`otherHousingTypeSummary`:STRUCT<`otherAccommodationType`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`councilTaxSummary`:STRUCT<`appliedToCouncilTaxReduction`:STRING
,`councilTaxInClaimantName`:BOOLEAN>
,`contractId`:STRING
,`housingTypeMessagePostfix`:STRING
,`processId`:STRING
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`differencesSummary`:STRUCT<`originalDeclarationSummary`:STRUCT<`rent`:STRUCT<`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`serviceCharges`:STRUCT<`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`bothNamedOnTheTenancyAgreement`:BOOLEAN
,`jointTenancy`:BOOLEAN
,`numberOfBedrooms`:STRING
,`numberOfPeopleInJointTenancy`:STRING
,`rentFreeWeeks`:STRING
,`temporaryAccommodation`:BOOLEAN>
,`updatedDeclarationSummary`:STRUCT<`rent`:STRUCT<`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`serviceCharges`:STRUCT<`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`bothNamedOnTheTenancyAgreement`:BOOLEAN
,`jointTenancy`:BOOLEAN
,`numberOfBedrooms`:STRING
,`numberOfPeopleInJointTenancy`:STRING
,`rentFreeWeeks`:STRING
,`temporaryAccommodation`:BOOLEAN>
,`numberOfBedroomsUpdated`:BOOLEAN
,`rentFreeWeeksUpdated`:BOOLEAN
,`rentUpdated`:BOOLEAN
,`serviceChargesUpdated`:BOOLEAN
,`anyChanges`:BOOLEAN
,`bothNamedOnTheTenancyAgreementUpdated`:BOOLEAN
,`jointTenancyUpdated`:BOOLEAN
,`nowTemporaryAccommodation`:BOOLEAN
,`numberOfPeopleInJointTenancyUpdated`:BOOLEAN
,`temporaryAccommodationUpdated`:BOOLEAN>
,`history`:ARRAY<STRUCT<`eventTime`:STRUCT<`d_date`:STRING>
,`processState`:STRING
>>
,`lastEvent`:STRUCT<`eventTime`:STRUCT<`d_date`:STRING>
,`processState`:STRING>
,`agreeAndUpdateChangesToDoId`:STRING
,`contactLandlordToUpdateChangesToDoId`:STRING
,`currentState`:STRING>
,`thirdPartyPortalProcessContext`:STRUCT<`tenancyDetailsResponse`:STRUCT<`tenancyDetailsDeclaration`:STRUCT<`tenancyDetails`:STRUCT<`eligibleServiceCharges`:STRUCT<`amount`:STRING
,`paymentFrequency`:STRING>
,`ineligibleServiceCharges`:STRUCT<`amount`:STRING
,`paymentFrequency`:STRING>
,`rent`:STRUCT<`amount`:STRING
,`paymentFrequency`:STRING>
,`bothClaimantsOnTenancy`:BOOLEAN
,`effectiveAtDate`:STRING
,`jointTenancy`:BOOLEAN
,`numberOfBedrooms`:STRING
,`numberOfJointTenants`:STRING
,`numberOfRentFreeWeeks`:STRING
,`rentReference`:STRING
,`temporaryAccommodation`:BOOLEAN>
,`declaredDateTime`:STRUCT<`d_date`:STRING>
,`aTenant`:BOOLEAN
,`declaredByUserEmail`:STRING
,`declaredByUserId`:STRING
,`declaredByUserName`:STRING
,`notATenantButAcceptingOtherCharges`:BOOLEAN
,`notATenantDetails`:STRING
,`thirdPartyId`:STRING>
,`requestId`:STRING
,`tenancyAgreementId`:STRING
,`thirdPartyId`:STRING>
,`history`:ARRAY<STRUCT<`eventTime`:STRUCT<`d_date`:STRING>
,`processState`:STRING
>>
,`lastEvent`:STRUCT<`eventTime`:STRUCT<`d_date`:STRING>
,`processState`:STRING>
,`provideTenancyDetailsRequestId`:STRING
,`thirdPartyCreditorId`:STRING
,`thirdPartyName`:STRING
,`currentState`:STRING>
,`dateOfSummaryChange`:STRUCT<`d_date`:STRING>
,`apaOrRentDeductionAppliedFor`:BOOLEAN
,`costsOnlyVerification`:BOOLEAN
,`declarationId`:STRING
,`processId`:STRING
,`summaryUpdatedBy`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`agreeAndUpdateChangesProcessContext`:STRUCT<`updatedHousingSummary`:STRUCT<`rentalSummary`:STRUCT<`jointTenancySummary`:STRUCT<`totalRent`:STRUCT<`monthlyAmount`:STRING
,`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`totalServiceChargePayment`:STRUCT<`monthlyAmount`:STRING
,`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`numberLivingWith`:STRING>
,`socialRentalSummary`:STRUCT<`serviceChargePayment`:STRUCT<`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`rentFreeWeeks`:STRING>
,`privateRentalSummary`:STRUCT<`financialInterest`:BOOLEAN
,`landlordLivesWithYou`:BOOLEAN
,`landlordRelative`:BOOLEAN>
,`rentalPayment`:STRUCT<`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`tenancyAgreementSummary`:STRUCT<`bothYouAndPartnerNamedOnTenancyOrRentalAgreement`:BOOLEAN
,`jointTenancyWithSomeoneOtherThanPartner`:BOOLEAN>
,`dateMovedToAddress`:STRING
,`landlordName`:STRING
,`numberBedrooms`:STRING>
,`ownHomeSummary`:STRUCT<`mortgageDetailsList`:ARRAY<STRUCT<`amount`:STRING
,`forDisabilityAdaptation`:BOOLEAN
,`lender`:STRING
,`lenderCode`:STRING
,`loanReferenceNumber`:STRING
,`mortgageDetailsId`:STRING
>>
,`serviceChargeDetails`:STRUCT<`amount`:STRING
,`frequency`:STRING>
,`hasMortgage`:BOOLEAN
,`paysServiceCharges`:BOOLEAN>
,`councilTax`:STRUCT<`appliedToCouncilTaxReduction`:STRING
,`councilTaxInClaimantName`:BOOLEAN>
,`dateOfChange`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`noApplicableHousingCostsSummary`:STRUCT<`noApplicableHousingCostsType`:STRING>
,`otherHousingTypeSummary`:STRUCT<`otherAccommodationType`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`councilTaxSummary`:STRUCT<`appliedToCouncilTaxReduction`:STRING
,`councilTaxInClaimantName`:BOOLEAN>
,`contractId`:STRING
,`housingTypeMessagePostfix`:STRING
,`processId`:STRING
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`differencesSummary`:STRUCT<`originalDeclarationSummary`:STRUCT<`rent`:STRUCT<`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`serviceCharges`:STRUCT<`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`bothNamedOnTheTenancyAgreement`:BOOLEAN
,`jointTenancy`:BOOLEAN
,`numberOfBedrooms`:STRING
,`numberOfPeopleInJointTenancy`:STRING
,`rentFreeWeeks`:STRING
,`temporaryAccommodation`:BOOLEAN>
,`updatedDeclarationSummary`:STRUCT<`rent`:STRUCT<`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`serviceCharges`:STRUCT<`amount`:STRING
,`paymentFrequency`:STRING
,`type`:STRING>
,`bothNamedOnTheTenancyAgreement`:BOOLEAN
,`jointTenancy`:BOOLEAN
,`numberOfBedrooms`:STRING
,`numberOfPeopleInJointTenancy`:STRING
,`rentFreeWeeks`:STRING
,`temporaryAccommodation`:BOOLEAN>
,`numberOfBedroomsUpdated`:BOOLEAN
,`rentFreeWeeksUpdated`:BOOLEAN
,`rentUpdated`:BOOLEAN
,`serviceChargesUpdated`:BOOLEAN
,`anyChanges`:BOOLEAN
,`bothNamedOnTheTenancyAgreementUpdated`:BOOLEAN
,`jointTenancyUpdated`:BOOLEAN
,`nowTemporaryAccommodation`:BOOLEAN
,`numberOfPeopleInJointTenancyUpdated`:BOOLEAN
,`temporaryAccommodationUpdated`:BOOLEAN>
,`history`:ARRAY<STRUCT<`eventTime`:STRUCT<`d_date`:STRING>
,`processState`:STRING
>>
,`lastEvent`:STRUCT<`eventTime`:STRUCT<`d_date`:STRING>
,`processState`:STRING>
,`agreeAndUpdateChangesToDoId`:STRING
,`contactLandlordToUpdateChangesToDoId`:STRING
,`currentState`:STRING>
,`thirdPartyPortalProcessContext`:STRUCT<`tenancyDetailsResponse`:STRUCT<`tenancyDetailsDeclaration`:STRUCT<`tenancyDetails`:STRUCT<`eligibleServiceCharges`:STRUCT<`amount`:STRING
,`paymentFrequency`:STRING>
,`ineligibleServiceCharges`:STRUCT<`amount`:STRING
,`paymentFrequency`:STRING>
,`rent`:STRUCT<`amount`:STRING
,`paymentFrequency`:STRING>
,`bothClaimantsOnTenancy`:BOOLEAN
,`effectiveAtDate`:STRING
,`jointTenancy`:BOOLEAN
,`numberOfBedrooms`:STRING
,`numberOfJointTenants`:STRING
,`numberOfRentFreeWeeks`:STRING
,`rentReference`:STRING
,`temporaryAccommodation`:BOOLEAN>
,`declaredDateTime`:STRUCT<`d_date`:STRING>
,`aTenant`:BOOLEAN
,`declaredByUserEmail`:STRING
,`declaredByUserId`:STRING
,`declaredByUserName`:STRING
,`notATenantButAcceptingOtherCharges`:BOOLEAN
,`notATenantDetails`:STRING
,`thirdPartyId`:STRING>
,`requestId`:STRING
,`tenancyAgreementId`:STRING
,`thirdPartyId`:STRING>
,`history`:ARRAY<STRUCT<`eventTime`:STRUCT<`d_date`:STRING>
,`processState`:STRING
>>
,`lastEvent`:STRUCT<`eventTime`:STRUCT<`d_date`:STRING>
,`processState`:STRING>
,`provideTenancyDetailsRequestId`:STRING
,`thirdPartyCreditorId`:STRING
,`thirdPartyName`:STRING
,`currentState`:STRING>
,`dateOfSummaryChange`:STRUCT<`d_date`:STRING>
,`apaOrRentDeductionAppliedFor`:BOOLEAN
,`costsOnlyVerification`:BOOLEAN
,`declarationId`:STRING
,`processId`:STRING
,`summaryUpdatedBy`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_VERIFY_SOCIAL_HOUSING_PROPERTIES;

CREATE TABLE agent_todo_verify_social_housing_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`agreeAndUpdateChangesToDoId`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`agreeAndUpdateChangesToDoId`) as toDoProperties_agreeAndUpdateChangesProcessContext_agreeAndUpdateChangesToDoId, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`contactLandlordToUpdateChangesToDoId`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`contactLandlordToUpdateChangesToDoId`) as toDoProperties_agreeAndUpdateChangesProcessContext_contactLandlordToUpdateChangesToDoId, 
COALESCE(CAST(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`numberOfBedroomsUpdated` as STRING), CAST(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`numberOfBedroomsUpdated` as STRING)) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_numberOfBedroomsUpdated, 
COALESCE(CAST(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`originalDeclarationSummary`.`bothNamedOnTheTenancyAgreement` as STRING), CAST(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`originalDeclarationSummary`.`bothNamedOnTheTenancyAgreement` as STRING)) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_originalDeclarationSummary_bothNamedOnTheTenancyAgreement, 
COALESCE(CAST(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`originalDeclarationSummary`.`jointTenancy` as STRING), CAST(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`originalDeclarationSummary`.`jointTenancy` as STRING)) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_originalDeclarationSummary_jointTenancy, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`originalDeclarationSummary`.`numberOfBedrooms`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`originalDeclarationSummary`.`numberOfBedrooms`) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_originalDeclarationSummary_numberOfBedrooms, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`originalDeclarationSummary`.`numberOfPeopleInJointTenancy`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`originalDeclarationSummary`.`numberOfPeopleInJointTenancy`) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_originalDeclarationSummary_numberOfPeopleInJointTenancy, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`originalDeclarationSummary`.`rent`.`amount`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`originalDeclarationSummary`.`rent`.`amount`) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_originalDeclarationSummary_rent_amount, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`originalDeclarationSummary`.`rent`.`paymentFrequency`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`originalDeclarationSummary`.`rent`.`paymentFrequency`) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_originalDeclarationSummary_rent_paymentFrequency, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`originalDeclarationSummary`.`rent`.`type`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`originalDeclarationSummary`.`rent`.`type`) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_originalDeclarationSummary_rent_type, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`originalDeclarationSummary`.`rentFreeWeeks`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`originalDeclarationSummary`.`rentFreeWeeks`) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_originalDeclarationSummary_rentFreeWeeks, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`originalDeclarationSummary`.`serviceCharges`.`amount`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`originalDeclarationSummary`.`serviceCharges`.`amount`) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_originalDeclarationSummary_serviceCharges_amount, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`originalDeclarationSummary`.`serviceCharges`.`paymentFrequency`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`originalDeclarationSummary`.`serviceCharges`.`paymentFrequency`) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_originalDeclarationSummary_serviceCharges_paymentFrequency, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`originalDeclarationSummary`.`serviceCharges`.`type`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`originalDeclarationSummary`.`serviceCharges`.`type`) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_originalDeclarationSummary_serviceCharges_type, 
COALESCE(CAST(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`originalDeclarationSummary`.`temporaryAccommodation` as STRING), CAST(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`originalDeclarationSummary`.`temporaryAccommodation` as STRING)) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_originalDeclarationSummary_temporaryAccommodation, 
COALESCE(CAST(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`rentFreeWeeksUpdated` as STRING), CAST(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`rentFreeWeeksUpdated` as STRING)) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_rentFreeWeeksUpdated, 
COALESCE(CAST(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`rentUpdated` as STRING), CAST(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`rentUpdated` as STRING)) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_rentUpdated, 
COALESCE(CAST(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`serviceChargesUpdated` as STRING), CAST(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`serviceChargesUpdated` as STRING)) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_serviceChargesUpdated, 
COALESCE(CAST(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`updatedDeclarationSummary`.`bothNamedOnTheTenancyAgreement` as STRING), CAST(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`updatedDeclarationSummary`.`bothNamedOnTheTenancyAgreement` as STRING)) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_updatedDeclarationSummary_bothNamedOnTheTenancyAgreement, 
COALESCE(CAST(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`updatedDeclarationSummary`.`jointTenancy` as STRING), CAST(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`updatedDeclarationSummary`.`jointTenancy` as STRING)) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_updatedDeclarationSummary_jointTenancy, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`updatedDeclarationSummary`.`numberOfBedrooms`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`updatedDeclarationSummary`.`numberOfBedrooms`) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_updatedDeclarationSummary_numberOfBedrooms, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`updatedDeclarationSummary`.`numberOfPeopleInJointTenancy`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`updatedDeclarationSummary`.`numberOfPeopleInJointTenancy`) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_updatedDeclarationSummary_numberOfPeopleInJointTenancy, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`updatedDeclarationSummary`.`rent`.`amount`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`updatedDeclarationSummary`.`rent`.`amount`) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_updatedDeclarationSummary_rent_amount, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`updatedDeclarationSummary`.`rent`.`paymentFrequency`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`updatedDeclarationSummary`.`rent`.`paymentFrequency`) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_updatedDeclarationSummary_rent_paymentFrequency, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`updatedDeclarationSummary`.`rent`.`type`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`updatedDeclarationSummary`.`rent`.`type`) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_updatedDeclarationSummary_rent_type, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`updatedDeclarationSummary`.`rentFreeWeeks`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`updatedDeclarationSummary`.`rentFreeWeeks`) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_updatedDeclarationSummary_rentFreeWeeks, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`updatedDeclarationSummary`.`serviceCharges`.`amount`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`updatedDeclarationSummary`.`serviceCharges`.`amount`) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_updatedDeclarationSummary_serviceCharges_amount, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`updatedDeclarationSummary`.`serviceCharges`.`paymentFrequency`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`updatedDeclarationSummary`.`serviceCharges`.`paymentFrequency`) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_updatedDeclarationSummary_serviceCharges_paymentFrequency, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`updatedDeclarationSummary`.`serviceCharges`.`type`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`updatedDeclarationSummary`.`serviceCharges`.`type`) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_updatedDeclarationSummary_serviceCharges_type, 
COALESCE(CAST(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`updatedDeclarationSummary`.`temporaryAccommodation` as STRING), CAST(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`updatedDeclarationSummary`.`temporaryAccommodation` as STRING)) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_updatedDeclarationSummary_temporaryAccommodation, 
COALESCE(CAST(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`anyChanges` as STRING), CAST(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`anyChanges` as STRING)) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_anyChanges, 
COALESCE(CAST(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`bothNamedOnTheTenancyAgreementUpdated` as STRING), CAST(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`bothNamedOnTheTenancyAgreementUpdated` as STRING)) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_bothNamedOnTheTenancyAgreementUpdated, 
COALESCE(CAST(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`jointTenancyUpdated` as STRING), CAST(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`jointTenancyUpdated` as STRING)) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_jointTenancyUpdated, 
COALESCE(CAST(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`nowTemporaryAccommodation` as STRING), CAST(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`nowTemporaryAccommodation` as STRING)) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_nowTemporaryAccommodation, 
COALESCE(CAST(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`numberOfPeopleInJointTenancyUpdated` as STRING), CAST(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`numberOfPeopleInJointTenancyUpdated` as STRING)) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_numberOfPeopleInJointTenancyUpdated, 
COALESCE(CAST(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`temporaryAccommodationUpdated` as STRING), CAST(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`differencesSummary`.`temporaryAccommodationUpdated` as STRING)) as toDoProperties_agreeAndUpdateChangesProcessContext_differencesSummary_temporaryAccommodationUpdated, 
COALESCE(CASE WHEN SUBSTRING(`removed_exploded_todoproperties_agreeandupdatechangesprocesscontext_history`.`eventTime`.`d_date`, LENGTH(`removed_exploded_todoproperties_agreeandupdatechangesprocesscontext_history`.`eventTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`removed_exploded_todoproperties_agreeandupdatechangesprocesscontext_history`.`eventTime`.`d_date`, 1, 10), ' ', SUBSTR(`removed_exploded_todoproperties_agreeandupdatechangesprocesscontext_history`.`eventTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`removed_exploded_todoproperties_agreeandupdatechangesprocesscontext_history`.`eventTime`.`d_date`, 1, 10), ' ', SUBSTR(`removed_exploded_todoproperties_agreeandupdatechangesprocesscontext_history`.`eventTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`removed_exploded_todoproperties_agreeandupdatechangesprocesscontext_history`.`eventTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`removed_exploded_todoproperties_agreeandupdatechangesprocesscontext_history`.`eventTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`exploded_todoproperties_agreeandupdatechangesprocesscontext_history`.`eventTime`.`d_date`, LENGTH(`exploded_todoproperties_agreeandupdatechangesprocesscontext_history`.`eventTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`exploded_todoproperties_agreeandupdatechangesprocesscontext_history`.`eventTime`.`d_date`, 1, 10), ' ', SUBSTR(`exploded_todoproperties_agreeandupdatechangesprocesscontext_history`.`eventTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`exploded_todoproperties_agreeandupdatechangesprocesscontext_history`.`eventTime`.`d_date`, 1, 10), ' ', SUBSTR(`exploded_todoproperties_agreeandupdatechangesprocesscontext_history`.`eventTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`exploded_todoproperties_agreeandupdatechangesprocesscontext_history`.`eventTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`exploded_todoproperties_agreeandupdatechangesprocesscontext_history`.`eventTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as toDoProperties_agreeAndUpdateChangesProcessContext_history_eventTime_d_date, 
COALESCE(`removed_exploded_todoproperties_agreeandupdatechangesprocesscontext_history`.`processState`, `exploded_todoproperties_agreeandupdatechangesprocesscontext_history`.`processState`) as toDoProperties_agreeAndUpdateChangesProcessContext_history_processState, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`contractId`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`contractId`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_contractId, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`councilTax`.`appliedToCouncilTaxReduction`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`councilTax`.`appliedToCouncilTaxReduction`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_councilTax_appliedToCouncilTaxReduction, 
COALESCE(CAST(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`councilTax`.`councilTaxInClaimantName` as STRING), CAST(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`councilTax`.`councilTaxInClaimantName` as STRING)) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_councilTax_councilTaxInClaimantName, 
COALESCE(CAST(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`dateOfChange`.`hasDate` as STRING), CAST(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`dateOfChange`.`hasDate` as STRING)) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_dateOfChange_hasDate, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`dateOfChange`.`knownDate`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`dateOfChange`.`knownDate`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_dateOfChange_knownDate, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`dateOfChange`.`type`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`dateOfChange`.`type`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_dateOfChange_type, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`dateOfChange`.`date`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`dateOfChange`.`date`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_dateOfChange_date, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`housingTypeMessagePostfix`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`housingTypeMessagePostfix`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_housingTypeMessagePostfix, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`noApplicableHousingCostsSummary`.`noApplicableHousingCostsType`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`noApplicableHousingCostsSummary`.`noApplicableHousingCostsType`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_noApplicableHousingCostsSummary_noApplicableHousingCostsType, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`otherHousingTypeSummary`.`otherAccommodationType`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`otherHousingTypeSummary`.`otherAccommodationType`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_otherHousingTypeSummary_otherAccommodationType, 
COALESCE(CAST(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`ownHomeSummary`.`hasMortgage` as STRING), CAST(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`ownHomeSummary`.`hasMortgage` as STRING)) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_ownHomeSummary_hasMortgage, 
COALESCE(CAST(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`ownHomeSummary`.`paysServiceCharges` as STRING), CAST(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`ownHomeSummary`.`paysServiceCharges` as STRING)) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_ownHomeSummary_paysServiceCharges, 
COALESCE(`removed_exploded_todoproperties_agreeandupdatechangesprocesscontext_updatedhousingsummary_ownhomesummary_mortgagedetailslist`.`amount`, `exploded_todoproperties_agreeandupdatechangesprocesscontext_updatedhousingsummary_ownhomesummary_mortgagedetailslist`.`amount`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_ownHomeSummary_mortgageDetailsList_amount, 
COALESCE(CAST(`removed_exploded_todoproperties_agreeandupdatechangesprocesscontext_updatedhousingsummary_ownhomesummary_mortgagedetailslist`.`forDisabilityAdaptation` as STRING), CAST(`exploded_todoproperties_agreeandupdatechangesprocesscontext_updatedhousingsummary_ownhomesummary_mortgagedetailslist`.`forDisabilityAdaptation` as STRING)) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_ownHomeSummary_mortgageDetailsList_forDisabilityAdaptation, 
COALESCE(`removed_exploded_todoproperties_agreeandupdatechangesprocesscontext_updatedhousingsummary_ownhomesummary_mortgagedetailslist`.`lender`, `exploded_todoproperties_agreeandupdatechangesprocesscontext_updatedhousingsummary_ownhomesummary_mortgagedetailslist`.`lender`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_ownHomeSummary_mortgageDetailsList_lender, 
COALESCE(`removed_exploded_todoproperties_agreeandupdatechangesprocesscontext_updatedhousingsummary_ownhomesummary_mortgagedetailslist`.`lenderCode`, `exploded_todoproperties_agreeandupdatechangesprocesscontext_updatedhousingsummary_ownhomesummary_mortgagedetailslist`.`lenderCode`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_ownHomeSummary_mortgageDetailsList_lenderCode, 
COALESCE(`removed_exploded_todoproperties_agreeandupdatechangesprocesscontext_updatedhousingsummary_ownhomesummary_mortgagedetailslist`.`loanReferenceNumber`, `exploded_todoproperties_agreeandupdatechangesprocesscontext_updatedhousingsummary_ownhomesummary_mortgagedetailslist`.`loanReferenceNumber`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_ownHomeSummary_mortgageDetailsList_loanReferenceNumber, 
COALESCE(`removed_exploded_todoproperties_agreeandupdatechangesprocesscontext_updatedhousingsummary_ownhomesummary_mortgagedetailslist`.`mortgageDetailsId`, `exploded_todoproperties_agreeandupdatechangesprocesscontext_updatedhousingsummary_ownhomesummary_mortgagedetailslist`.`mortgageDetailsId`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_ownHomeSummary_mortgageDetailsList_mortgageDetailsId, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`ownHomeSummary`.`serviceChargeDetails`.`amount`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`ownHomeSummary`.`serviceChargeDetails`.`amount`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_ownHomeSummary_serviceChargeDetails_amount, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`ownHomeSummary`.`serviceChargeDetails`.`frequency`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`ownHomeSummary`.`serviceChargeDetails`.`frequency`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_ownHomeSummary_serviceChargeDetails_frequency, 
COALESCE(CAST(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`paymentEffectiveDate`.`hasDate` as STRING), CAST(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`paymentEffectiveDate`.`hasDate` as STRING)) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_paymentEffectiveDate_hasDate, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`paymentEffectiveDate`.`knownDate`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`paymentEffectiveDate`.`knownDate`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_paymentEffectiveDate_knownDate, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`paymentEffectiveDate`.`type`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`paymentEffectiveDate`.`type`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_paymentEffectiveDate_type, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`paymentEffectiveDate`.`date`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`paymentEffectiveDate`.`date`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_paymentEffectiveDate_date, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`processId`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`processId`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_processId, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`dateMovedToAddress`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`dateMovedToAddress`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_rentalSummary_dateMovedToAddress, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`jointTenancySummary`.`numberLivingWith`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`jointTenancySummary`.`numberLivingWith`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_rentalSummary_jointTenancySummary_numberLivingWith, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`jointTenancySummary`.`totalRent`.`monthlyAmount`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`jointTenancySummary`.`totalRent`.`monthlyAmount`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_rentalSummary_jointTenancySummary_totalRent_monthlyAmount, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`jointTenancySummary`.`totalRent`.`amount`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`jointTenancySummary`.`totalRent`.`amount`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_rentalSummary_jointTenancySummary_totalRent_amount, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`jointTenancySummary`.`totalRent`.`paymentFrequency`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`jointTenancySummary`.`totalRent`.`paymentFrequency`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_rentalSummary_jointTenancySummary_totalRent_paymentFrequency, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`jointTenancySummary`.`totalRent`.`type`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`jointTenancySummary`.`totalRent`.`type`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_rentalSummary_jointTenancySummary_totalRent_type, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`jointTenancySummary`.`totalServiceChargePayment`.`monthlyAmount`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`jointTenancySummary`.`totalServiceChargePayment`.`monthlyAmount`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_rentalSummary_jointTenancySummary_totalServiceChargePayment_monthlyAmount, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`jointTenancySummary`.`totalServiceChargePayment`.`amount`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`jointTenancySummary`.`totalServiceChargePayment`.`amount`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_rentalSummary_jointTenancySummary_totalServiceChargePayment_amount, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`jointTenancySummary`.`totalServiceChargePayment`.`paymentFrequency`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`jointTenancySummary`.`totalServiceChargePayment`.`paymentFrequency`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_rentalSummary_jointTenancySummary_totalServiceChargePayment_paymentFrequency, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`jointTenancySummary`.`totalServiceChargePayment`.`type`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`jointTenancySummary`.`totalServiceChargePayment`.`type`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_rentalSummary_jointTenancySummary_totalServiceChargePayment_type, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`landlordName`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`landlordName`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_rentalSummary_landlordName, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`numberBedrooms`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`numberBedrooms`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_rentalSummary_numberBedrooms, 
COALESCE(CAST(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`privateRentalSummary`.`financialInterest` as STRING), CAST(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`privateRentalSummary`.`financialInterest` as STRING)) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_rentalSummary_privateRentalSummary_financialInterest, 
COALESCE(CAST(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`privateRentalSummary`.`landlordLivesWithYou` as STRING), CAST(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`privateRentalSummary`.`landlordLivesWithYou` as STRING)) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_rentalSummary_privateRentalSummary_landlordLivesWithYou, 
COALESCE(CAST(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`privateRentalSummary`.`landlordRelative` as STRING), CAST(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`privateRentalSummary`.`landlordRelative` as STRING)) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_rentalSummary_privateRentalSummary_landlordRelative, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`rentalPayment`.`amount`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`rentalPayment`.`amount`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_rentalSummary_rentalPayment_amount, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`rentalPayment`.`paymentFrequency`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`rentalPayment`.`paymentFrequency`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_rentalSummary_rentalPayment_paymentFrequency, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`rentalPayment`.`type`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`rentalPayment`.`type`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_rentalSummary_rentalPayment_type, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`socialRentalSummary`.`rentFreeWeeks`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`socialRentalSummary`.`rentFreeWeeks`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_rentalSummary_socialRentalSummary_rentFreeWeeks, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`socialRentalSummary`.`serviceChargePayment`.`amount`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`socialRentalSummary`.`serviceChargePayment`.`amount`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_rentalSummary_socialRentalSummary_serviceChargePayment_amount, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`socialRentalSummary`.`serviceChargePayment`.`paymentFrequency`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`socialRentalSummary`.`serviceChargePayment`.`paymentFrequency`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_rentalSummary_socialRentalSummary_serviceChargePayment_paymentFrequency, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`socialRentalSummary`.`serviceChargePayment`.`type`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`socialRentalSummary`.`serviceChargePayment`.`type`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_rentalSummary_socialRentalSummary_serviceChargePayment_type, 
COALESCE(CAST(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`tenancyAgreementSummary`.`bothYouAndPartnerNamedOnTenancyOrRentalAgreement` as STRING), CAST(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`tenancyAgreementSummary`.`bothYouAndPartnerNamedOnTenancyOrRentalAgreement` as STRING)) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_rentalSummary_tenancyAgreementSummary_bothYouAndPartnerNamedOnTenancyOrRentalAgreement, 
COALESCE(CAST(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`tenancyAgreementSummary`.`jointTenancyWithSomeoneOtherThanPartner` as STRING), CAST(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`rentalSummary`.`tenancyAgreementSummary`.`jointTenancyWithSomeoneOtherThanPartner` as STRING)) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_rentalSummary_tenancyAgreementSummary_jointTenancyWithSomeoneOtherThanPartner, 
COALESCE(CAST(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`confirmationRequired` as STRING), CAST(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`confirmationRequired` as STRING)) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_confirmationRequired, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`councilTaxSummary`.`appliedToCouncilTaxReduction`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`councilTaxSummary`.`appliedToCouncilTaxReduction`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_councilTaxSummary_appliedToCouncilTaxReduction, 
COALESCE(CAST(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`councilTaxSummary`.`councilTaxInClaimantName` as STRING), CAST(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`councilTaxSummary`.`councilTaxInClaimantName` as STRING)) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_councilTaxSummary_councilTaxInClaimantName, 
COALESCE(CAST(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`hideDetailsForPartnerDeclaration` as STRING), CAST(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`hideDetailsForPartnerDeclaration` as STRING)) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_hideDetailsForPartnerDeclaration, 
COALESCE(CAST(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`perClaimant` as STRING), CAST(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`perClaimant` as STRING)) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_perClaimant, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`type`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`type`) as toDoProperties_agreeAndUpdateChangesProcessContext_updatedHousingSummary_type, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`currentState`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`currentState`) as toDoProperties_agreeAndUpdateChangesProcessContext_currentState, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`lastEvent`.`eventTime`.`d_date`, LENGTH(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`lastEvent`.`eventTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`lastEvent`.`eventTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`lastEvent`.`eventTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`lastEvent`.`eventTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`lastEvent`.`eventTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`lastEvent`.`eventTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`lastEvent`.`eventTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`lastEvent`.`eventTime`.`d_date`, LENGTH(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`lastEvent`.`eventTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`lastEvent`.`eventTime`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`lastEvent`.`eventTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`lastEvent`.`eventTime`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`lastEvent`.`eventTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`lastEvent`.`eventTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`lastEvent`.`eventTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as toDoProperties_agreeAndUpdateChangesProcessContext_lastEvent_eventTime_d_date, 
COALESCE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`lastEvent`.`processState`, `toDoProperties`.`agreeAndUpdateChangesProcessContext`.`lastEvent`.`processState`) as toDoProperties_agreeAndUpdateChangesProcessContext_lastEvent_processState, 
COALESCE(CAST(`_removed`.`toDoProperties`.`apaOrRentDeductionAppliedFor` as STRING), CAST(`toDoProperties`.`apaOrRentDeductionAppliedFor` as STRING)) as toDoProperties_apaOrRentDeductionAppliedFor, 
COALESCE(CAST(`_removed`.`toDoProperties`.`costsOnlyVerification` as STRING), CAST(`toDoProperties`.`costsOnlyVerification` as STRING)) as toDoProperties_costsOnlyVerification, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, LENGTH(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`toDoProperties`.`dateOfSummaryChange`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`toDoProperties`.`dateOfSummaryChange`.`d_date`, LENGTH(`toDoProperties`.`dateOfSummaryChange`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`toDoProperties`.`dateOfSummaryChange`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`dateOfSummaryChange`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`toDoProperties`.`dateOfSummaryChange`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`dateOfSummaryChange`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`toDoProperties`.`dateOfSummaryChange`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`toDoProperties`.`dateOfSummaryChange`.`d_date`, 21, 3)) AS TIMESTAMP) END) as toDoProperties_dateOfSummaryChange_d_date, 
COALESCE(`_removed`.`toDoProperties`.`declarationId`, `toDoProperties`.`declarationId`) as toDoProperties_declarationId, 
COALESCE(`_removed`.`toDoProperties`.`processId`, `toDoProperties`.`processId`) as toDoProperties_processId, 
COALESCE(`_removed`.`toDoProperties`.`summaryUpdatedBy`, `toDoProperties`.`summaryUpdatedBy`) as toDoProperties_summaryUpdatedBy, 
COALESCE(CASE WHEN SUBSTRING(`removed_exploded_todoproperties_thirdpartyportalprocesscontext_history`.`eventTime`.`d_date`, LENGTH(`removed_exploded_todoproperties_thirdpartyportalprocesscontext_history`.`eventTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`removed_exploded_todoproperties_thirdpartyportalprocesscontext_history`.`eventTime`.`d_date`, 1, 10), ' ', SUBSTR(`removed_exploded_todoproperties_thirdpartyportalprocesscontext_history`.`eventTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`removed_exploded_todoproperties_thirdpartyportalprocesscontext_history`.`eventTime`.`d_date`, 1, 10), ' ', SUBSTR(`removed_exploded_todoproperties_thirdpartyportalprocesscontext_history`.`eventTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`removed_exploded_todoproperties_thirdpartyportalprocesscontext_history`.`eventTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`removed_exploded_todoproperties_thirdpartyportalprocesscontext_history`.`eventTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`exploded_todoproperties_thirdpartyportalprocesscontext_history`.`eventTime`.`d_date`, LENGTH(`exploded_todoproperties_thirdpartyportalprocesscontext_history`.`eventTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`exploded_todoproperties_thirdpartyportalprocesscontext_history`.`eventTime`.`d_date`, 1, 10), ' ', SUBSTR(`exploded_todoproperties_thirdpartyportalprocesscontext_history`.`eventTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`exploded_todoproperties_thirdpartyportalprocesscontext_history`.`eventTime`.`d_date`, 1, 10), ' ', SUBSTR(`exploded_todoproperties_thirdpartyportalprocesscontext_history`.`eventTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`exploded_todoproperties_thirdpartyportalprocesscontext_history`.`eventTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`exploded_todoproperties_thirdpartyportalprocesscontext_history`.`eventTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as toDoProperties_thirdPartyPortalProcessContext_history_eventTime_d_date, 
COALESCE(`removed_exploded_todoproperties_thirdpartyportalprocesscontext_history`.`processState`, `exploded_todoproperties_thirdpartyportalprocesscontext_history`.`processState`) as toDoProperties_thirdPartyPortalProcessContext_history_processState, 
COALESCE(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`provideTenancyDetailsRequestId`, `toDoProperties`.`thirdPartyPortalProcessContext`.`provideTenancyDetailsRequestId`) as toDoProperties_thirdPartyPortalProcessContext_provideTenancyDetailsRequestId, 
COALESCE(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`requestId`, `toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`requestId`) as toDoProperties_thirdPartyPortalProcessContext_tenancyDetailsResponse_requestId, 
COALESCE(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyAgreementId`, `toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyAgreementId`) as toDoProperties_thirdPartyPortalProcessContext_tenancyDetailsResponse_tenancyAgreementId, 
COALESCE(CAST(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`aTenant` as STRING), CAST(`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`aTenant` as STRING)) as toDoProperties_thirdPartyPortalProcessContext_tenancyDetailsResponse_tenancyDetailsDeclaration_aTenant, 
COALESCE(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`declaredByUserEmail`, `toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`declaredByUserEmail`) as toDoProperties_thirdPartyPortalProcessContext_tenancyDetailsResponse_tenancyDetailsDeclaration_declaredByUserEmail, 
COALESCE(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`declaredByUserId`, `toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`declaredByUserId`) as toDoProperties_thirdPartyPortalProcessContext_tenancyDetailsResponse_tenancyDetailsDeclaration_declaredByUserId, 
COALESCE(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`declaredByUserName`, `toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`declaredByUserName`) as toDoProperties_thirdPartyPortalProcessContext_tenancyDetailsResponse_tenancyDetailsDeclaration_declaredByUserName, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`declaredDateTime`.`d_date`, LENGTH(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`declaredDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`declaredDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`declaredDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`declaredDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`declaredDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`declaredDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`declaredDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`declaredDateTime`.`d_date`, LENGTH(`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`declaredDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`declaredDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`declaredDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`declaredDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`declaredDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`declaredDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`declaredDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as toDoProperties_thirdPartyPortalProcessContext_tenancyDetailsResponse_tenancyDetailsDeclaration_declaredDateTime_d_date, 
COALESCE(CAST(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`notATenantButAcceptingOtherCharges` as STRING), CAST(`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`notATenantButAcceptingOtherCharges` as STRING)) as toDoProperties_thirdPartyPortalProcessContext_tenancyDetailsResponse_tenancyDetailsDeclaration_notATenantButAcceptingOtherCharges, 
COALESCE(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`notATenantDetails`, `toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`notATenantDetails`) as toDoProperties_thirdPartyPortalProcessContext_tenancyDetailsResponse_tenancyDetailsDeclaration_notATenantDetails, 
COALESCE(CAST(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`tenancyDetails`.`bothClaimantsOnTenancy` as STRING), CAST(`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`tenancyDetails`.`bothClaimantsOnTenancy` as STRING)) as toDoProperties_thirdPartyPortalProcessContext_tenancyDetailsResponse_tenancyDetailsDeclaration_tenancyDetails_bothClaimantsOnTenancy, 
COALESCE(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`tenancyDetails`.`effectiveAtDate`, `toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`tenancyDetails`.`effectiveAtDate`) as toDoProperties_thirdPartyPortalProcessContext_tenancyDetailsResponse_tenancyDetailsDeclaration_tenancyDetails_effectiveAtDate, 
COALESCE(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`tenancyDetails`.`eligibleServiceCharges`.`amount`, `toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`tenancyDetails`.`eligibleServiceCharges`.`amount`) as toDoProperties_thirdPartyPortalProcessContext_tenancyDetailsResponse_tenancyDetailsDeclaration_tenancyDetails_eligibleServiceCharges_amount, 
COALESCE(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`tenancyDetails`.`eligibleServiceCharges`.`paymentFrequency`, `toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`tenancyDetails`.`eligibleServiceCharges`.`paymentFrequency`) as toDoProperties_thirdPartyPortalProcessContext_tenancyDetailsResponse_tenancyDetailsDeclaration_tenancyDetails_eligibleServiceCharges_paymentFrequency, 
COALESCE(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`tenancyDetails`.`ineligibleServiceCharges`.`amount`, `toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`tenancyDetails`.`ineligibleServiceCharges`.`amount`) as toDoProperties_thirdPartyPortalProcessContext_tenancyDetailsResponse_tenancyDetailsDeclaration_tenancyDetails_ineligibleServiceCharges_amount, 
COALESCE(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`tenancyDetails`.`ineligibleServiceCharges`.`paymentFrequency`, `toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`tenancyDetails`.`ineligibleServiceCharges`.`paymentFrequency`) as toDoProperties_thirdPartyPortalProcessContext_tenancyDetailsResponse_tenancyDetailsDeclaration_tenancyDetails_ineligibleServiceCharges_paymentFrequency, 
COALESCE(CAST(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`tenancyDetails`.`jointTenancy` as STRING), CAST(`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`tenancyDetails`.`jointTenancy` as STRING)) as toDoProperties_thirdPartyPortalProcessContext_tenancyDetailsResponse_tenancyDetailsDeclaration_tenancyDetails_jointTenancy, 
COALESCE(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`tenancyDetails`.`numberOfBedrooms`, `toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`tenancyDetails`.`numberOfBedrooms`) as toDoProperties_thirdPartyPortalProcessContext_tenancyDetailsResponse_tenancyDetailsDeclaration_tenancyDetails_numberOfBedrooms, 
COALESCE(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`tenancyDetails`.`numberOfJointTenants`, `toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`tenancyDetails`.`numberOfJointTenants`) as toDoProperties_thirdPartyPortalProcessContext_tenancyDetailsResponse_tenancyDetailsDeclaration_tenancyDetails_numberOfJointTenants, 
COALESCE(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`tenancyDetails`.`numberOfRentFreeWeeks`, `toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`tenancyDetails`.`numberOfRentFreeWeeks`) as toDoProperties_thirdPartyPortalProcessContext_tenancyDetailsResponse_tenancyDetailsDeclaration_tenancyDetails_numberOfRentFreeWeeks, 
COALESCE(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`tenancyDetails`.`rent`.`amount`, `toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`tenancyDetails`.`rent`.`amount`) as toDoProperties_thirdPartyPortalProcessContext_tenancyDetailsResponse_tenancyDetailsDeclaration_tenancyDetails_rent_amount, 
COALESCE(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`tenancyDetails`.`rent`.`paymentFrequency`, `toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`tenancyDetails`.`rent`.`paymentFrequency`) as toDoProperties_thirdPartyPortalProcessContext_tenancyDetailsResponse_tenancyDetailsDeclaration_tenancyDetails_rent_paymentFrequency, 
COALESCE(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`tenancyDetails`.`rentReference`, `toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`tenancyDetails`.`rentReference`) as toDoProperties_thirdPartyPortalProcessContext_tenancyDetailsResponse_tenancyDetailsDeclaration_tenancyDetails_rentReference, 
COALESCE(CAST(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`tenancyDetails`.`temporaryAccommodation` as STRING), CAST(`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`tenancyDetails`.`temporaryAccommodation` as STRING)) as toDoProperties_thirdPartyPortalProcessContext_tenancyDetailsResponse_tenancyDetailsDeclaration_tenancyDetails_temporaryAccommodation, 
COALESCE(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`thirdPartyId`, `toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`tenancyDetailsDeclaration`.`thirdPartyId`) as toDoProperties_thirdPartyPortalProcessContext_tenancyDetailsResponse_tenancyDetailsDeclaration_thirdPartyId, 
COALESCE(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`thirdPartyId`, `toDoProperties`.`thirdPartyPortalProcessContext`.`tenancyDetailsResponse`.`thirdPartyId`) as toDoProperties_thirdPartyPortalProcessContext_tenancyDetailsResponse_thirdPartyId, 
COALESCE(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`thirdPartyCreditorId`, `toDoProperties`.`thirdPartyPortalProcessContext`.`thirdPartyCreditorId`) as toDoProperties_thirdPartyPortalProcessContext_thirdPartyCreditorId, 
COALESCE(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`thirdPartyName`, `toDoProperties`.`thirdPartyPortalProcessContext`.`thirdPartyName`) as toDoProperties_thirdPartyPortalProcessContext_thirdPartyName, 
COALESCE(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`currentState`, `toDoProperties`.`thirdPartyPortalProcessContext`.`currentState`) as toDoProperties_thirdPartyPortalProcessContext_currentState, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`lastEvent`.`eventTime`.`d_date`, LENGTH(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`lastEvent`.`eventTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`lastEvent`.`eventTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`lastEvent`.`eventTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`lastEvent`.`eventTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`lastEvent`.`eventTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`lastEvent`.`eventTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`lastEvent`.`eventTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`toDoProperties`.`thirdPartyPortalProcessContext`.`lastEvent`.`eventTime`.`d_date`, LENGTH(`toDoProperties`.`thirdPartyPortalProcessContext`.`lastEvent`.`eventTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`toDoProperties`.`thirdPartyPortalProcessContext`.`lastEvent`.`eventTime`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`thirdPartyPortalProcessContext`.`lastEvent`.`eventTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`toDoProperties`.`thirdPartyPortalProcessContext`.`lastEvent`.`eventTime`.`d_date`, 1, 10), ' ', SUBSTR(`toDoProperties`.`thirdPartyPortalProcessContext`.`lastEvent`.`eventTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`toDoProperties`.`thirdPartyPortalProcessContext`.`lastEvent`.`eventTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`toDoProperties`.`thirdPartyPortalProcessContext`.`lastEvent`.`eventTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as toDoProperties_thirdPartyPortalProcessContext_lastEvent_eventTime_d_date, 
COALESCE(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`lastEvent`.`processState`, `toDoProperties`.`thirdPartyPortalProcessContext`.`lastEvent`.`processState`) as toDoProperties_thirdPartyPortalProcessContext_lastEvent_processState, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_verify_social_housing_properties
 LATERAL VIEW OUTER EXPLODE(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`history`) view_exploded_todoproperties_agreeandupdatechangesprocesscontext_history AS exploded_todoproperties_agreeandupdatechangesprocesscontext_history 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`history`) view_removed_exploded_todoproperties_agreeandupdatechangesprocesscontext_history AS removed_exploded_todoproperties_agreeandupdatechangesprocesscontext_history 
 LATERAL VIEW OUTER EXPLODE(`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`ownHomeSummary`.`mortgageDetailsList`) view_exploded_todoproperties_agreeandupdatechangesprocesscontext_updatedhousingsummary_ownhomesummary_mortgagedetailslist AS exploded_todoproperties_agreeandupdatechangesprocesscontext_updatedhousingsummary_ownhomesummary_mortgagedetailslist 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`toDoProperties`.`agreeAndUpdateChangesProcessContext`.`updatedHousingSummary`.`ownHomeSummary`.`mortgageDetailsList`) view_removed_exploded_todoproperties_agreeandupdatechangesprocesscontext_updatedhousingsummary_ownhomesummary_mortgagedetailslist AS removed_exploded_todoproperties_agreeandupdatechangesprocesscontext_updatedhousingsummary_ownhomesummary_mortgagedetailslist 
 LATERAL VIEW OUTER EXPLODE(`toDoProperties`.`thirdPartyPortalProcessContext`.`history`) view_exploded_todoproperties_thirdpartyportalprocesscontext_history AS exploded_todoproperties_thirdpartyportalprocesscontext_history 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`toDoProperties`.`thirdPartyPortalProcessContext`.`history`) view_removed_exploded_todoproperties_thirdpartyportalprocesscontext_history AS removed_exploded_todoproperties_thirdpartyportalprocesscontext_history 
 
 where `_removed`.`toDoProperties`.`type`='VERIFY_SOCIAL_HOUSING_PROPERTIES' or `toDoProperties`.`type`='VERIFY_SOCIAL_HOUSING_PROPERTIES';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_RECOVER_OVERLAPPING_BENEFIT_PAYMENTS;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_recover_overlapping_benefit_payments
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_recover_overlapping_benefit_payments(
`toDoProperties` STRUCT<`overlappingBenefitAmounts`:STRUCT<`overlappingBenefits`:ARRAY<STRUCT<`trace`:STRUCT<`elements`:ARRAY<STRUCT<`code`:STRING
,`description`:STRING
,`elementType`:STRING
>>>
,`value`:STRUCT<`amount`:STRING
,`claimantId`:STRING
,`otherBenefitAwardType`:STRING>
>>>
,`adjustmentTotal`:STRING
,`universalCreditMaximum`:STRING
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`overlappingBenefitAmounts`:STRUCT<`overlappingBenefits`:ARRAY<STRUCT<`trace`:STRUCT<`elements`:ARRAY<STRUCT<`code`:STRING
,`description`:STRING
,`elementType`:STRING
>>>
,`value`:STRUCT<`amount`:STRING
,`claimantId`:STRING
,`otherBenefitAwardType`:STRING>
>>>
,`adjustmentTotal`:STRING
,`universalCreditMaximum`:STRING
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_RECOVER_OVERLAPPING_BENEFIT_PAYMENTS;

CREATE TABLE agent_todo_archive_recover_overlapping_benefit_payments STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`adjustmentTotal`, `toDoProperties`.`adjustmentTotal`) as toDoProperties_adjustmentTotal, 
COALESCE(`removed_exploded_todoproperties_overlappingbenefitamounts_overlappingbenefits_exploded_trace_elements`.`code`, `exploded_todoproperties_overlappingbenefitamounts_overlappingbenefits_exploded_trace_elements`.`code`) as toDoProperties_overlappingBenefitAmounts_overlappingBenefits_trace_elements_code, 
COALESCE(`removed_exploded_todoproperties_overlappingbenefitamounts_overlappingbenefits_exploded_trace_elements`.`description`, `exploded_todoproperties_overlappingbenefitamounts_overlappingbenefits_exploded_trace_elements`.`description`) as toDoProperties_overlappingBenefitAmounts_overlappingBenefits_trace_elements_description, 
COALESCE(`removed_exploded_todoproperties_overlappingbenefitamounts_overlappingbenefits_exploded_trace_elements`.`elementType`, `exploded_todoproperties_overlappingbenefitamounts_overlappingbenefits_exploded_trace_elements`.`elementType`) as toDoProperties_overlappingBenefitAmounts_overlappingBenefits_trace_elements_elementType, 
COALESCE(`removed_exploded_todoproperties_overlappingbenefitamounts_overlappingbenefits`.`value`.`amount`, `exploded_todoproperties_overlappingbenefitamounts_overlappingbenefits`.`value`.`amount`) as toDoProperties_overlappingBenefitAmounts_overlappingBenefits_value_amount, 
COALESCE(`removed_exploded_todoproperties_overlappingbenefitamounts_overlappingbenefits`.`value`.`claimantId`, `exploded_todoproperties_overlappingbenefitamounts_overlappingbenefits`.`value`.`claimantId`) as toDoProperties_overlappingBenefitAmounts_overlappingBenefits_value_claimantId, 
COALESCE(`removed_exploded_todoproperties_overlappingbenefitamounts_overlappingbenefits`.`value`.`otherBenefitAwardType`, `exploded_todoproperties_overlappingbenefitamounts_overlappingbenefits`.`value`.`otherBenefitAwardType`) as toDoProperties_overlappingBenefitAmounts_overlappingBenefits_value_otherBenefitAwardType, 
COALESCE(`_removed`.`toDoProperties`.`universalCreditMaximum`, `toDoProperties`.`universalCreditMaximum`) as toDoProperties_universalCreditMaximum, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_recover_overlapping_benefit_payments
 LATERAL VIEW OUTER EXPLODE(`toDoProperties`.`overlappingBenefitAmounts`.`overlappingBenefits`) view_exploded_todoproperties_overlappingbenefitamounts_overlappingbenefits AS exploded_todoproperties_overlappingbenefitamounts_overlappingbenefits 
 LATERAL VIEW OUTER EXPLODE(`exploded_todoproperties_overlappingbenefitamounts_overlappingbenefits`.`trace`.`elements`) view_exploded_todoproperties_overlappingbenefitamounts_overlappingbenefits_exploded_trace_elements AS exploded_todoproperties_overlappingbenefitamounts_overlappingbenefits_exploded_trace_elements 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`toDoProperties`.`overlappingBenefitAmounts`.`overlappingBenefits`) view_removed_exploded_todoproperties_overlappingbenefitamounts_overlappingbenefits AS removed_exploded_todoproperties_overlappingbenefitamounts_overlappingbenefits 
 LATERAL VIEW OUTER EXPLODE(`removed_exploded_todoproperties_overlappingbenefitamounts_overlappingbenefits`.`trace`.`elements`) view_removed_exploded_todoproperties_overlappingbenefitamounts_overlappingbenefits_exploded_trace_elements AS removed_exploded_todoproperties_overlappingbenefitamounts_overlappingbenefits_exploded_trace_elements 
 
 where `_removed`.`toDoProperties`.`type`='RECOVER_OVERLAPPING_BENEFIT_PAYMENTS' or `toDoProperties`.`type`='RECOVER_OVERLAPPING_BENEFIT_PAYMENTS';


!echo ------------------------;
!echo ------------------------ agent_todo_OVERDUE_TO_DOS_FOR_CALCULATION;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_overdue_to_dos_for_calculation
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_overdue_to_dos_for_calculation(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`assessmentPeriodId`:STRING
,`source`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`assessmentPeriodId`:STRING
,`source`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_OVERDUE_TO_DOS_FOR_CALCULATION;

CREATE TABLE agent_todo_overdue_to_dos_for_calculation STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`assessmentPeriodId`, `toDoProperties`.`assessmentPeriodId`) as toDoProperties_assessmentPeriodId, 
COALESCE(`_removed`.`toDoProperties`.`source`, `toDoProperties`.`source`) as toDoProperties_source, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_overdue_to_dos_for_calculation
 src_agent_core_agenttodo_agent_todo_overdue_to_dos_for_calculation 
 where `_removed`.`toDoProperties`.`type`='OVERDUE_TO_DOS_FOR_CALCULATION' or `toDoProperties`.`type`='OVERDUE_TO_DOS_FOR_CALCULATION';


!echo ------------------------;
!echo ------------------------ agent_todo_RTE_SUPPLIED;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodo_agent_todo_rte_supplied
;

CREATE EXTERNAL TABLE src_agent_core_agenttodo_agent_todo_rte_supplied(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`message`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`message`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDo';

DROP TABLE IF EXISTS agent_todo_RTE_SUPPLIED;

CREATE TABLE agent_todo_rte_supplied STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`message`, `toDoProperties`.`message`) as toDoProperties_message, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodo_agent_todo_rte_supplied
 src_agent_core_agenttodo_agent_todo_rte_supplied 
 where `_removed`.`toDoProperties`.`type`='RTE_SUPPLIED' or `toDoProperties`.`type`='RTE_SUPPLIED';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_PERSON_SUMMARY;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_person_summary
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_person_summary(
`toDoProperties` STRUCT<`personSummary`:STRUCT<`effectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`contactPreference`:STRING
,`contractId`:STRING
,`emailAddress`:STRING
,`firstName`:STRING
,`lastName`:STRING
,`middleName`:STRING
,`mobileNumber`:STRING
,`name`:STRING
,`processId`:STRING
,`claimantId`:STRING
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`personSummary`:STRUCT<`effectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`paymentEffectiveDate`:STRUCT<`hasDate`:BOOLEAN
,`knownDate`:STRING
,`type`:STRING
,`date`:STRING>
,`contactPreference`:STRING
,`contractId`:STRING
,`emailAddress`:STRING
,`firstName`:STRING
,`lastName`:STRING
,`middleName`:STRING
,`mobileNumber`:STRING
,`name`:STRING
,`processId`:STRING
,`claimantId`:STRING
,`confirmationRequired`:BOOLEAN
,`hideDetailsForPartnerDeclaration`:BOOLEAN
,`perClaimant`:BOOLEAN
,`type`:STRING>
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_PERSON_SUMMARY;

CREATE TABLE agent_todo_archive_person_summary STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`personSummary`.`contactPreference`, `toDoProperties`.`personSummary`.`contactPreference`) as toDoProperties_personSummary_contactPreference, 
COALESCE(`_removed`.`toDoProperties`.`personSummary`.`contractId`, `toDoProperties`.`personSummary`.`contractId`) as toDoProperties_personSummary_contractId, 
COALESCE(CAST(`_removed`.`toDoProperties`.`personSummary`.`effectiveDate`.`hasDate` as STRING), CAST(`toDoProperties`.`personSummary`.`effectiveDate`.`hasDate` as STRING)) as toDoProperties_personSummary_effectiveDate_hasDate, 
COALESCE(`_removed`.`toDoProperties`.`personSummary`.`effectiveDate`.`knownDate`, `toDoProperties`.`personSummary`.`effectiveDate`.`knownDate`) as toDoProperties_personSummary_effectiveDate_knownDate, 
COALESCE(`_removed`.`toDoProperties`.`personSummary`.`effectiveDate`.`type`, `toDoProperties`.`personSummary`.`effectiveDate`.`type`) as toDoProperties_personSummary_effectiveDate_type, 
COALESCE(`_removed`.`toDoProperties`.`personSummary`.`effectiveDate`.`date`, `toDoProperties`.`personSummary`.`effectiveDate`.`date`) as toDoProperties_personSummary_effectiveDate_date, 
COALESCE(`_removed`.`toDoProperties`.`personSummary`.`emailAddress`, `toDoProperties`.`personSummary`.`emailAddress`) as toDoProperties_personSummary_emailAddress, 
COALESCE(`_removed`.`toDoProperties`.`personSummary`.`firstName`, `toDoProperties`.`personSummary`.`firstName`) as toDoProperties_personSummary_firstName, 
COALESCE(`_removed`.`toDoProperties`.`personSummary`.`lastName`, `toDoProperties`.`personSummary`.`lastName`) as toDoProperties_personSummary_lastName, 
COALESCE(`_removed`.`toDoProperties`.`personSummary`.`middleName`, `toDoProperties`.`personSummary`.`middleName`) as toDoProperties_personSummary_middleName, 
COALESCE(`_removed`.`toDoProperties`.`personSummary`.`mobileNumber`, `toDoProperties`.`personSummary`.`mobileNumber`) as toDoProperties_personSummary_mobileNumber, 
COALESCE(`_removed`.`toDoProperties`.`personSummary`.`name`, `toDoProperties`.`personSummary`.`name`) as toDoProperties_personSummary_name, 
COALESCE(CAST(`_removed`.`toDoProperties`.`personSummary`.`paymentEffectiveDate`.`hasDate` as STRING), CAST(`toDoProperties`.`personSummary`.`paymentEffectiveDate`.`hasDate` as STRING)) as toDoProperties_personSummary_paymentEffectiveDate_hasDate, 
COALESCE(`_removed`.`toDoProperties`.`personSummary`.`paymentEffectiveDate`.`knownDate`, `toDoProperties`.`personSummary`.`paymentEffectiveDate`.`knownDate`) as toDoProperties_personSummary_paymentEffectiveDate_knownDate, 
COALESCE(`_removed`.`toDoProperties`.`personSummary`.`paymentEffectiveDate`.`type`, `toDoProperties`.`personSummary`.`paymentEffectiveDate`.`type`) as toDoProperties_personSummary_paymentEffectiveDate_type, 
COALESCE(`_removed`.`toDoProperties`.`personSummary`.`paymentEffectiveDate`.`date`, `toDoProperties`.`personSummary`.`paymentEffectiveDate`.`date`) as toDoProperties_personSummary_paymentEffectiveDate_date, 
COALESCE(`_removed`.`toDoProperties`.`personSummary`.`processId`, `toDoProperties`.`personSummary`.`processId`) as toDoProperties_personSummary_processId, 
COALESCE(`_removed`.`toDoProperties`.`personSummary`.`claimantId`, `toDoProperties`.`personSummary`.`claimantId`) as toDoProperties_personSummary_claimantId, 
COALESCE(CAST(`_removed`.`toDoProperties`.`personSummary`.`confirmationRequired` as STRING), CAST(`toDoProperties`.`personSummary`.`confirmationRequired` as STRING)) as toDoProperties_personSummary_confirmationRequired, 
COALESCE(CAST(`_removed`.`toDoProperties`.`personSummary`.`hideDetailsForPartnerDeclaration` as STRING), CAST(`toDoProperties`.`personSummary`.`hideDetailsForPartnerDeclaration` as STRING)) as toDoProperties_personSummary_hideDetailsForPartnerDeclaration, 
COALESCE(CAST(`_removed`.`toDoProperties`.`personSummary`.`perClaimant` as STRING), CAST(`toDoProperties`.`personSummary`.`perClaimant` as STRING)) as toDoProperties_personSummary_perClaimant, 
COALESCE(`_removed`.`toDoProperties`.`personSummary`.`type`, `toDoProperties`.`personSummary`.`type`) as toDoProperties_personSummary_type, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_person_summary
 src_agent_core_agenttodoarchive_agent_todo_archive_person_summary 
 where `_removed`.`toDoProperties`.`type`='PERSON_SUMMARY' or `toDoProperties`.`type`='PERSON_SUMMARY';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_PREPARE_COMMITMENTS_TO_DO_PROPERTIES;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_prepare_commitments_to_do_properties
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_prepare_commitments_to_do_properties(
`toDoProperties` STRUCT<`prepareToMeetWorkCoachOutcome`:STRUCT<`hoursAWeekOutcome`:STRUCT<`hoursAWeekFullTimeSearch`:BOOLEAN
,`hoursAWeekReason`:STRING>
,`travelToWorkOutcome`:STRUCT<`travelToWorkFullCommute`:BOOLEAN
,`travelToWorkReason`:STRING>
,`workHoursOutcome`:STRUCT<`workHoursFullTime`:BOOLEAN
,`workHoursReason`:STRING>
,`activities`:ARRAY<STRING>
,`jobs`:ARRAY<STRING>
,`claimantId`:STRING
,`contractId`:STRING
,`cvAvailable`:BOOLEAN
,`moreInformation`:STRING
,`prepareToMeetWorkCoachJourney`:STRING
,`qualificationsAndWorkExperience`:STRING>
,`type`:STRING>
,`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`toDoProperties`:STRUCT<`prepareToMeetWorkCoachOutcome`:STRUCT<`hoursAWeekOutcome`:STRUCT<`hoursAWeekFullTimeSearch`:BOOLEAN
,`hoursAWeekReason`:STRING>
,`travelToWorkOutcome`:STRUCT<`travelToWorkFullCommute`:BOOLEAN
,`travelToWorkReason`:STRING>
,`workHoursOutcome`:STRUCT<`workHoursFullTime`:BOOLEAN
,`workHoursReason`:STRING>
,`activities`:ARRAY<STRING>
,`jobs`:ARRAY<STRING>
,`claimantId`:STRING
,`contractId`:STRING
,`cvAvailable`:BOOLEAN
,`moreInformation`:STRING
,`prepareToMeetWorkCoachJourney`:STRING
,`qualificationsAndWorkExperience`:STRING>
,`type`:STRING>
,`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_PREPARE_COMMITMENTS_TO_DO_PROPERTIES;

CREATE TABLE agent_todo_archive_prepare_commitments_to_do_properties STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`removed_exploded_todoproperties_preparetomeetworkcoachoutcome_activities`, `exploded_todoproperties_preparetomeetworkcoachoutcome_activities`) as toDoProperties_prepareToMeetWorkCoachOutcome_activities, 
COALESCE(`_removed`.`toDoProperties`.`prepareToMeetWorkCoachOutcome`.`claimantId`, `toDoProperties`.`prepareToMeetWorkCoachOutcome`.`claimantId`) as toDoProperties_prepareToMeetWorkCoachOutcome_claimantId, 
COALESCE(`_removed`.`toDoProperties`.`prepareToMeetWorkCoachOutcome`.`contractId`, `toDoProperties`.`prepareToMeetWorkCoachOutcome`.`contractId`) as toDoProperties_prepareToMeetWorkCoachOutcome_contractId, 
COALESCE(CAST(`_removed`.`toDoProperties`.`prepareToMeetWorkCoachOutcome`.`cvAvailable` as STRING), CAST(`toDoProperties`.`prepareToMeetWorkCoachOutcome`.`cvAvailable` as STRING)) as toDoProperties_prepareToMeetWorkCoachOutcome_cvAvailable, 
COALESCE(CAST(`_removed`.`toDoProperties`.`prepareToMeetWorkCoachOutcome`.`hoursAWeekOutcome`.`hoursAWeekFullTimeSearch` as STRING), CAST(`toDoProperties`.`prepareToMeetWorkCoachOutcome`.`hoursAWeekOutcome`.`hoursAWeekFullTimeSearch` as STRING)) as toDoProperties_prepareToMeetWorkCoachOutcome_hoursAWeekOutcome_hoursAWeekFullTimeSearch, 
COALESCE(`_removed`.`toDoProperties`.`prepareToMeetWorkCoachOutcome`.`hoursAWeekOutcome`.`hoursAWeekReason`, `toDoProperties`.`prepareToMeetWorkCoachOutcome`.`hoursAWeekOutcome`.`hoursAWeekReason`) as toDoProperties_prepareToMeetWorkCoachOutcome_hoursAWeekOutcome_hoursAWeekReason, 
COALESCE(`removed_exploded_todoproperties_preparetomeetworkcoachoutcome_jobs`, `exploded_todoproperties_preparetomeetworkcoachoutcome_jobs`) as toDoProperties_prepareToMeetWorkCoachOutcome_jobs, 
COALESCE(`_removed`.`toDoProperties`.`prepareToMeetWorkCoachOutcome`.`moreInformation`, `toDoProperties`.`prepareToMeetWorkCoachOutcome`.`moreInformation`) as toDoProperties_prepareToMeetWorkCoachOutcome_moreInformation, 
COALESCE(`_removed`.`toDoProperties`.`prepareToMeetWorkCoachOutcome`.`prepareToMeetWorkCoachJourney`, `toDoProperties`.`prepareToMeetWorkCoachOutcome`.`prepareToMeetWorkCoachJourney`) as toDoProperties_prepareToMeetWorkCoachOutcome_prepareToMeetWorkCoachJourney, 
COALESCE(`_removed`.`toDoProperties`.`prepareToMeetWorkCoachOutcome`.`qualificationsAndWorkExperience`, `toDoProperties`.`prepareToMeetWorkCoachOutcome`.`qualificationsAndWorkExperience`) as toDoProperties_prepareToMeetWorkCoachOutcome_qualificationsAndWorkExperience, 
COALESCE(CAST(`_removed`.`toDoProperties`.`prepareToMeetWorkCoachOutcome`.`travelToWorkOutcome`.`travelToWorkFullCommute` as STRING), CAST(`toDoProperties`.`prepareToMeetWorkCoachOutcome`.`travelToWorkOutcome`.`travelToWorkFullCommute` as STRING)) as toDoProperties_prepareToMeetWorkCoachOutcome_travelToWorkOutcome_travelToWorkFullCommute, 
COALESCE(`_removed`.`toDoProperties`.`prepareToMeetWorkCoachOutcome`.`travelToWorkOutcome`.`travelToWorkReason`, `toDoProperties`.`prepareToMeetWorkCoachOutcome`.`travelToWorkOutcome`.`travelToWorkReason`) as toDoProperties_prepareToMeetWorkCoachOutcome_travelToWorkOutcome_travelToWorkReason, 
COALESCE(CAST(`_removed`.`toDoProperties`.`prepareToMeetWorkCoachOutcome`.`workHoursOutcome`.`workHoursFullTime` as STRING), CAST(`toDoProperties`.`prepareToMeetWorkCoachOutcome`.`workHoursOutcome`.`workHoursFullTime` as STRING)) as toDoProperties_prepareToMeetWorkCoachOutcome_workHoursOutcome_workHoursFullTime, 
COALESCE(`_removed`.`toDoProperties`.`prepareToMeetWorkCoachOutcome`.`workHoursOutcome`.`workHoursReason`, `toDoProperties`.`prepareToMeetWorkCoachOutcome`.`workHoursOutcome`.`workHoursReason`) as toDoProperties_prepareToMeetWorkCoachOutcome_workHoursOutcome_workHoursReason, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_prepare_commitments_to_do_properties
 LATERAL VIEW OUTER EXPLODE(`toDoProperties`.`prepareToMeetWorkCoachOutcome`.`activities`) view_exploded_todoproperties_preparetomeetworkcoachoutcome_activities AS exploded_todoproperties_preparetomeetworkcoachoutcome_activities 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`toDoProperties`.`prepareToMeetWorkCoachOutcome`.`activities`) view_removed_exploded_todoproperties_preparetomeetworkcoachoutcome_activities AS removed_exploded_todoproperties_preparetomeetworkcoachoutcome_activities 
 LATERAL VIEW OUTER EXPLODE(`toDoProperties`.`prepareToMeetWorkCoachOutcome`.`jobs`) view_exploded_todoproperties_preparetomeetworkcoachoutcome_jobs AS exploded_todoproperties_preparetomeetworkcoachoutcome_jobs 
 LATERAL VIEW OUTER EXPLODE(`_removed`.`toDoProperties`.`prepareToMeetWorkCoachOutcome`.`jobs`) view_removed_exploded_todoproperties_preparetomeetworkcoachoutcome_jobs AS removed_exploded_todoproperties_preparetomeetworkcoachoutcome_jobs 
 
 where `_removed`.`toDoProperties`.`type`='PREPARE_COMMITMENTS_TO_DO_PROPERTIES' or `toDoProperties`.`type`='PREPARE_COMMITMENTS_TO_DO_PROPERTIES';


!echo ------------------------;
!echo ------------------------ agent_todo_archive_REFER_OVERPAYMENT;
!echo ------------------------;
DROP TABLE IF EXISTS src_agent_core_agenttodoarchive_agent_todo_archive_refer_overpayment
;

CREATE EXTERNAL TABLE src_agent_core_agenttodoarchive_agent_todo_archive_refer_overpayment(
`_removedDateTime` STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime` STRUCT<`d_date`:STRING>
,`createdDateTime` STRUCT<`d_date`:STRING>
,`toDoProperties` STRUCT<`affectedPeriodEndDate`:STRING
,`affectedPeriodStartDate`:STRING
,`overpaymentAmount`:STRING
,`type`:STRING>
,`_id` STRUCT<`toDoId`:STRING>
,`_version` STRING
,`_removed` STRUCT<`_removedDateTime`:STRUCT<`d_date`:STRING>
,`_lastModifiedDateTime`:STRUCT<`d_date`:STRING>
,`createdDateTime`:STRUCT<`d_date`:STRING>
,`toDoProperties`:STRUCT<`affectedPeriodEndDate`:STRING
,`affectedPeriodStartDate`:STRING
,`overpaymentAmount`:STRING
,`type`:STRING>
,`_id`:STRUCT<`toDoId`:STRING>
,`_version`:STRING
>)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/etl/uc/mongo/${hiveconf:BATCH_DATE}/agent-core/agentToDoArchive';

DROP TABLE IF EXISTS agent_todo_archive_REFER_OVERPAYMENT;

CREATE TABLE agent_todo_archive_refer_overpayment STORED AS ORC AS SELECT 
 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_removedDateTime`.`d_date`, LENGTH(`_removed`.`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_removedDateTime`.`d_date`, LENGTH(`_removedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as removed_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`_lastModifiedDateTime`.`d_date`, LENGTH(`_removed`.`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`_lastModifiedDateTime`.`d_date`, LENGTH(`_lastModifiedDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_lastModifiedDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_lastModifiedDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_lastModifiedDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_lastModifiedDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as last_modified_ts, 
COALESCE(CASE WHEN SUBSTRING(`_removed`.`createdDateTime`.`d_date`, LENGTH(`_removed`.`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`_removed`.`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`_removed`.`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END, CASE WHEN SUBSTRING(`createdDateTime`.`d_date`, LENGTH(`createdDateTime`.`d_date`), 1) = 'Z' THEN CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 12)) AS TIMESTAMP) ELSE CAST(CONCAT(FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(CONCAT(SUBSTR(`createdDateTime`.`d_date`, 1, 10), ' ', SUBSTR(`createdDateTime`.`d_date`, 12, 8)) AS TIMESTAMP)) - (CAST(SUBSTR(`createdDateTime`.`d_date`, 25, 2) AS BIGINT) * 3600),'yyyy-MM-dd HH:mm:ss'),'.', SUBSTR(`createdDateTime`.`d_date`, 21, 3)) AS TIMESTAMP) END) as created_ts, 
COALESCE(CAST(`_removed`.`_version` as INT), CAST(`_version` as INT)) as version, 
COALESCE(`_removed`.`toDoProperties`.`affectedPeriodEndDate`, `toDoProperties`.`affectedPeriodEndDate`) as toDoProperties_affectedPeriodEndDate, 
COALESCE(`_removed`.`toDoProperties`.`affectedPeriodStartDate`, `toDoProperties`.`affectedPeriodStartDate`) as toDoProperties_affectedPeriodStartDate, 
COALESCE(`_removed`.`toDoProperties`.`overpaymentAmount`, `toDoProperties`.`overpaymentAmount`) as toDoProperties_overpaymentAmount, 
COALESCE(`_removed`.`toDoProperties`.`type`, `toDoProperties`.`type`) as toDoProperties_type, 
COALESCE(`_removed`.`_id`.`toDoId`, `_id`.`toDoId`) as id FROM src_agent_core_agenttodoarchive_agent_todo_archive_refer_overpayment
 src_agent_core_agenttodoarchive_agent_todo_archive_refer_overpayment 
 where `_removed`.`toDoProperties`.`type`='REFER_OVERPAYMENT' or `toDoProperties`.`type`='REFER_OVERPAYMENT';


